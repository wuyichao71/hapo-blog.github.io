<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数学分析学习</title>
    <url>/2022/12/07/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- # 数学分析学习 -->
<p>最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。<br>想到这里，顿时豁然开朗，原来我应该从头开始学数学。  </p>
<p>当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  </p>
<p>为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本<a href="https://www.overleaf.com/read/pddprfvnrrkv">《数学分析讲义》</a>。希望能在学习和写讲义的过程中有所收获。  </p>
<span id="more"></span>
<p>并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  </p>
<iframe src="//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1" scrolling="no" border="0" frameborder="" framespacing="0" allowfullscreen="true" width="100%" height="400px" > </iframe>   

<p>而另一个则是Maki’s lab的Ayumu的教程：  </p>
<iframe src="//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="400px" > </iframe>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Modeller补缺失残基</title>
    <url>/2022/12/08/%E4%BD%BF%E7%94%A8Modeller%E8%A1%A5%E7%BC%BA%E5%A4%B1%E6%AE%8B%E5%9F%BA/</url>
    <content><![CDATA[<p>写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把<a href="https://salilab.org/modeller/wiki/Missing_residues">使用modeller补全缺失残基</a>的网页放在这里。  </p>
<p>我们以<a href="https://files.rcsb.org/download/4GNX.pdb">4GNX</a>为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为<code>4gnx_half.pdb</code>。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的<code>REMARK 465</code>中记录了缺失的残基序号和类型，pdb文件中的<code>SEQRES</code>也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  </p>
<p>我们可以使用一下代码提取pdb文件中的序列信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modeller <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Get the sequence of the 4gnx PDB file, and write to an alignment file</span></span><br><span class="line">code = <span class="string">&#x27;4gnx&#x27;</span></span><br><span class="line"></span><br><span class="line">e = Environ()</span><br><span class="line">m = Model(e, file=code)</span><br><span class="line">aln = Alignment(e)</span><br><span class="line">aln.append_model(m, align_codes=code)</span><br><span class="line">aln.write(file=code+<span class="string">&#x27;.seq&#x27;</span>)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>用以上代码生成的序列文件<code>4gnx_half.seq</code>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt;P1;4gnx_half</span><br><span class="line">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class="line">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class="line">ANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN</span><br><span class="line">ISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA</span><br><span class="line">HLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE</span><br><span class="line">NHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY</span><br><span class="line">GELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS</span><br><span class="line">TMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE</span><br><span class="line">NLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK</span><br><span class="line">LREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt</span><br><span class="line">tttttttttttttttt*</span><br></pre></td></tr></table></figure>
<p>从<code>REMARK 465</code>和<code>SEQRES</code>中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用<code>-</code>填补缺失残基的模板序列和一份完整序列，这两个序列可以写在<code>alignment.aln</code>文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;P1;4gnx_half</span><br><span class="line">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class="line">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class="line">ANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class="line">VVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class="line">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class="line">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class="line">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class="line">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL</span><br><span class="line">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class="line">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class="line">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br><span class="line">&gt;P1;4gnx_half_fill</span><br><span class="line">sequence:::::::::</span><br><span class="line">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class="line">ANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class="line">VVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class="line">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class="line">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class="line">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class="line">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL</span><br><span class="line">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class="line">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class="line">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br></pre></td></tr></table></figure>
<p>现在我们可以用Modeller中的<a href="https://salilab.org/modeller/10.0/manual/node33.html">‘LoopModel’ class</a>生成所有的残基，并对loop区域进行优化，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modeller <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> modeller.automodel <span class="keyword">import</span> *    <span class="comment"># Load the AutoModel class</span></span><br><span class="line"></span><br><span class="line">log.verbose()</span><br><span class="line">env = Environ()</span><br><span class="line"></span><br><span class="line"><span class="comment"># directories for input atom files</span></span><br><span class="line">env.io.atom_files_directory = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;../atom_files&#x27;</span>]</span><br><span class="line"></span><br><span class="line">a = LoopModel(env, alnfile = <span class="string">&#x27;alignment.ali&#x27;</span>,</span><br><span class="line">              knowns = <span class="string">&#x27;4gnx_half&#x27;</span>, sequence = <span class="string">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class="line">a.starting_model= <span class="number">1</span></span><br><span class="line">a.ending_model  = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a.loop.starting_model = <span class="number">1</span></span><br><span class="line">a.loop.ending_model   = <span class="number">2</span></span><br><span class="line">a.loop.md_level       = refine.fast</span><br><span class="line"></span><br><span class="line">a.make()</span><br></pre></td></tr></table></figure>
<p>使用该代码会生成一个使用model生成的结构(<code>a.starting_model = 1</code>和<code>a.ending_model = 1</code>)和两个使用loopmodel生成的结构(<code>a.loop.starting_model = 1</code>和<code>a.loop.ending_model = 2</code>)。如果我们要生成更多的结构，那么我们可以把<code>a.ending_model</code>和<code>a.loop.ending_model</code>设定为更大的值。  </p>
<p>如果你不需要对loop进行优化，那么你可以选择<code>AutoModel</code>代替<code>LoopModel</code>，同时移除与loop相关的三个参数。  </p>
<p>使用<code>LoopModel</code>和<code>AutoModel</code>补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置<code>select_atoms</code>方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写<code>residue_range</code>有可能需要重新编号。同时<code>residue_range</code>是包括最后一个列出的残基的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modeller <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> modeller.automodel <span class="keyword">import</span> *    <span class="comment"># Load the AutoModel class</span></span><br><span class="line"></span><br><span class="line">log.verbose()</span><br><span class="line">env = Environ()</span><br><span class="line"></span><br><span class="line"><span class="comment"># directories for input atom files</span></span><br><span class="line">env.io.atom_files_directory = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;../atom_files&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(<span class="title class_ inherited__">AutoModel</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_atoms</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Selection(self.residue_range(<span class="string">&#x27;86:A&#x27;</span>, <span class="string">&#x27;89:A&#x27;</span>),</span><br><span class="line">                         self.residue_range(<span class="string">&#x27;180:B&#x27;</span>, <span class="string">&#x27;187:B&#x27;</span>),</span><br><span class="line">                         self.residue_range(<span class="string">&#x27;493:C&#x27;</span>, <span class="string">&#x27;501:C&#x27;</span>))</span><br><span class="line"></span><br><span class="line">a = MyModel(env, alnfile = <span class="string">&#x27;alignment.ali&#x27;</span>,</span><br><span class="line">            knowns = <span class="string">&#x27;4gnx_half&#x27;</span>, sequence = <span class="string">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class="line">a.starting_model= <span class="number">1</span></span><br><span class="line">a.ending_model  = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a.make()</span><br></pre></td></tr></table></figure>
<p>如果使用的是<code>LoopModel</code>，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modeller <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> modeller.automodel <span class="keyword">import</span> *    <span class="comment"># Load the AutoModel class</span></span><br><span class="line"></span><br><span class="line">log.verbose()</span><br><span class="line">env = Environ()</span><br><span class="line"></span><br><span class="line"><span class="comment"># directories for input atom files</span></span><br><span class="line">env.io.atom_files_directory = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;../atom_files&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(<span class="title class_ inherited__">LoopModel</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_atoms</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Selection(self.residue_range(<span class="string">&#x27;86:A&#x27;</span>, <span class="string">&#x27;89:A&#x27;</span>),</span><br><span class="line">                         self.residue_range(<span class="string">&#x27;180:B&#x27;</span>, <span class="string">&#x27;187:B&#x27;</span>),</span><br><span class="line">                         self.residue_range(<span class="string">&#x27;493:C&#x27;</span>, <span class="string">&#x27;501:C&#x27;</span>))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_loop_atoms</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Selection(self.residue_range(<span class="string">&#x27;86:A&#x27;</span>, <span class="string">&#x27;89:A&#x27;</span>),</span><br><span class="line">                         self.residue_range(<span class="string">&#x27;180:B&#x27;</span>, <span class="string">&#x27;187:B&#x27;</span>),</span><br><span class="line">                         self.residue_range(<span class="string">&#x27;493:C&#x27;</span>, <span class="string">&#x27;501:C&#x27;</span>))</span><br><span class="line"></span><br><span class="line">a = MyModel(env, alnfile = <span class="string">&#x27;alignment.ali&#x27;</span>,</span><br><span class="line">            knowns = <span class="string">&#x27;4gnx_half&#x27;</span>, sequence = <span class="string">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class="line">a.starting_model= <span class="number">1</span></span><br><span class="line">a.ending_model  = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a.make()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>分子模拟</category>
      </categories>
      <tags>
        <tag>pdb预处理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机程序的构造与解释</title>
    <url>/2022/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机程序的构造与解释</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>制作小分子力场</title>
    <url>/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/</url>
    <content><![CDATA[<p>新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。</p>
<h1 id="获得pdb结构">获得PDB结构</h1>
<p>这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从<a href="https://www.rcsb.org/">PDB库</a>中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为<a href="https://www.rcsb.org/ligand/ACT">ACT</a>和<a href="https://www.rcsb.org/ligand/3P8">3P8</a>。在网页上可以下载到<code>.sdf</code>文件，接下来可以使用openbabel将<code>.sdf</code>文件转化为<code>.pdb</code>坐标。
<img src="/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png" class="" title="使用openbebal转化文件格式"> <!-- ![使用openbebal转化文件格式](openbabel.png) -->
<span id="more"></span> 这样就获得了对应的<code>.pdb</code>文件。</p>
<p>此时由openbabel生成的acetate的<code>.pdb</code>文件如下:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COMPND    ACT </span><br><span class="line">AUTHOR    GENERATED BY OPEN BABEL 3.1.1</span><br><span class="line">HETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class="line">HETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class="line">HETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-</span><br><span class="line">HETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class="line">HETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class="line">HETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class="line">HETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  </span><br><span class="line">CONECT    1    2    2    3    4                                       </span><br><span class="line">CONECT    2    1    1                                                 </span><br><span class="line">CONECT    3    1                                                      </span><br><span class="line">CONECT    4    1    5    6    7                                       </span><br><span class="line">CONECT    5    4                                                      </span><br><span class="line">CONECT    6    4                                                      </span><br><span class="line">CONECT    7    4                                                      </span><br><span class="line">MASTER        0    0    0    0    0    0    0    0    7    0    7    0</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<code>antechamber</code>对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class="line">ATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class="line">ATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O</span><br><span class="line">ATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class="line">ATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class="line">ATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class="line">ATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H </span><br></pre></td></tr></table></figure></p>
<h1 id="amber力场不使用gaussian">AMBER力场(不使用Gaussian)</h1>
<p>对于amber力场，可以使用AmberTools中的<code>antechamber</code>软件生成小分子的gaff力场。在生成<code>.mol2</code>文件之前，我们先对<code>.pdb</code>文件进行预处理。</p>
<p>首先先用tleap转化下原子的名字, <code>tleap.in</code>文件中的内容如下:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source leaprc.protein.ff14SB</span><br><span class="line">TMP = loadpdb ACT.pdb</span><br><span class="line">savepdb TMP ACT_tleap.pdb</span><br><span class="line">quit</span><br></pre></td></tr></table></figure> 用以下的命令生成<code>ACT_tleap.pdb</code>: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tleap -f tleap.in</span><br></pre></td></tr></table></figure>
之后再用<code>reduce</code>补充H原子(实际上对于小分子即使手动删除貌似也不会补充):
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reduce ACT_tleap.pdb &gt;ACT_h.pdb</span><br></pre></td></tr></table></figure>
之后我们可以使用<code>antechamber</code>软件生成<code>.mol2</code>文件，命令如下:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">antechamber -i ACT_h.pdb -<span class="keyword">fi</span> pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1</span><br></pre></td></tr></table></figure> 上面各个选项的意思分别为:<br>
1. <code>-i ACT_h.pdb</code>: 指定输入3D结构文件名称。<br>
2. <code>-fi pdb</code>: 指定输入文件格式为PDB格式。<br>
3. <code>-o ACT.mol2</code>: 指定输出的文件名称。<br>
4. <code>-fo mol2</code>:
指定输出文件类型为<code>.mol2</code>类型。<br>
5. <code>-c bcc</code>:
指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。<br>
6. <code>-s 2</code>:
指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(<code>2</code>)。<br>
7. <code>-nc -1</code>: 指定净电荷数目为<code>-1</code>。</p>
<p><code>ACT.mol2</code>文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成<code>.prmtop</code>和<code>.inpcrd</code>文件。生成的<code>.mol2</code>文件如下:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@&lt;TRIPOS&gt;MOLECULE</span><br><span class="line">ACT</span><br><span class="line">    7     6     1     0     0</span><br><span class="line">SMALL</span><br><span class="line">bcc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@&lt;TRIPOS&gt;ATOM</span><br><span class="line">      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600</span><br><span class="line">      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class="line">      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class="line">      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100</span><br><span class="line">      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033</span><br><span class="line">      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class="line">      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class="line">@&lt;TRIPOS&gt;BOND</span><br><span class="line">     1     1     2 1   </span><br><span class="line">     2     1     3 1   </span><br><span class="line">     3     1     4 1   </span><br><span class="line">     4     4     5 1   </span><br><span class="line">     5     4     6 1   </span><br><span class="line">     6     4     7 1   </span><br><span class="line">@&lt;TRIPOS&gt;SUBSTRUCTURE</span><br><span class="line">     1 ACT         1 TEMP              0 ****  ****    0 ROOT</span><br></pre></td></tr></table></figure>
<code>.mol</code>文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且<code>.mol2</code>文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在<code>$AMBERHOME/dat/leap/parm/gaff.dat</code>中定义。</p>
<p>参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用<code>parmchk2</code>检查缺失的参数，命令如下:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod</span><br></pre></td></tr></table></figure>
执行以上文件会生成<code>ACT.frcmod</code>文件。这是一个参数文件,
能够载入LEaP中用于添加缺失的参数,
这样就能包含所有缺失的参数。在模拟之前，需要仔细检查<code>ACT.frcmod</code>文件。生成的<code>ACT.frcmod</code>文件如下:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remark line goes here</span><br><span class="line">MASS</span><br><span class="line"></span><br><span class="line">BOND</span><br><span class="line"></span><br><span class="line">ANGLE</span><br><span class="line"></span><br><span class="line">DIHE</span><br><span class="line"></span><br><span class="line">IMPROPER</span><br><span class="line">c3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)</span><br><span class="line"></span><br><span class="line">NONBON</span><br></pre></td></tr></table></figure>
可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。</p>
<p>现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tleap -f leaprc.protein.ff14SB</span><br></pre></td></tr></table></figure></p>
<p>之后在tleap中导入GAFF力场: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source leaprc.gaff</span><br></pre></td></tr></table></figure> 现在导入acetate单元:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACT = loadmol2 ACT.mol2</span><br></pre></td></tr></table></figure>
此时在<code>tleap</code>中键入<code>list</code>，可以看到新增加的<code>ACT</code>单元:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ACT = loadmol2 ACT.mol2</span><br><span class="line">Loading Mol2 file: ./ACT.mol2</span><br><span class="line">Reading MOLECULE named ACT</span><br><span class="line">&gt; list</span><br><span class="line">ACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA</span><br><span class="line">CARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY</span><br><span class="line">CHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS</span><br><span class="line">CMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL</span><br><span class="line">CYM       CYS       CYX       GLH       GLN       GLU       GLY       HID</span><br><span class="line">HIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS</span><br><span class="line">MET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN</span><br><span class="line">NGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE</span><br><span class="line">NLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR</span><br><span class="line">NTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP</span><br><span class="line">TYR       VAL       frcmod14SBgaff      parm10</span><br></pre></td></tr></table></figure> 检查<code>ACT</code>单元: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; check ACT</span><br><span class="line">Checking 'ACT'....</span><br><span class="line"></span><br><span class="line">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class="line">Checking parameters for unit 'ACT'.</span><br><span class="line">Checking for bond parameters.</span><br><span class="line">Checking for angle parameters.</span><br><span class="line">check:  Warnings: 1</span><br><span class="line">Unit is OK.</span><br></pre></td></tr></table></figure>
可以看到并没有缺失参数。现在我们再导入<code>ACT.frcmod</code>文件:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loadamberparams ACT.frcmod</span><br></pre></td></tr></table></figure> 接下来就可以将生成的残基导出了: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; saveoff ACT ACT.lib</span><br><span class="line"> Creating ACT.lib</span><br><span class="line">Building topology.</span><br><span class="line">Building atom parameters.</span><br><span class="line">&gt; saveamberparm ACT ACT.prmtop ACT.inpcrd</span><br><span class="line">Checking Unit.</span><br><span class="line"></span><br><span class="line">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class="line"></span><br><span class="line">Note: Ignoring the warning from Unit Checking.</span><br><span class="line"></span><br><span class="line">Building topology.</span><br><span class="line">Building atom parameters.</span><br><span class="line">Building bond parameters.</span><br><span class="line">Building angle parameters.</span><br><span class="line">Building proper torsion parameters.</span><br><span class="line">Building improper torsion parameters.</span><br><span class="line"> total 1 improper torsion applied</span><br><span class="line">Building H-Bond parameters.</span><br><span class="line">Incorporating Non-Bonded adjustments.</span><br><span class="line">Not Marking per-residue atom chain types.</span><br><span class="line">Marking per-residue atom chain types.</span><br><span class="line">  (Residues lacking connect0/connect1 -</span><br><span class="line">   these don't have chain types marked:</span><br><span class="line"></span><br><span class="line">        res     total affected</span><br><span class="line"></span><br><span class="line">        ACT     1</span><br><span class="line">  )</span><br><span class="line"> (no restraints)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
此时有了<code>ACT.prmtop</code>和<code>ACT.inpcrd</code>,
可以用这两个文件生成gromacs需要的<code>ACT.top</code>和<code>ACT.gro</code>。这可以用<code>amb2gro_top_gro.py</code>完成:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">amb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb</span><br></pre></td></tr></table></figure>
这样我们就有了gromacs可用的<code>.top</code>文件和<code>.gro</code>文件。</p>
<blockquote>
<p>TIPS:
在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]</span><br><span class="line">Warning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]</span><br><span class="line">Warning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="amber力场使用gaussian">AMBER力场(使用Gaussian)</h1>
<p>使用gaussian来生成精确的静电分布。这里需要提及,
g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。</p>
<h2 id="gaussian的安装">gaussian的安装</h2>
<p>首先进行gaussian的安装。<a href="http://sobereva.com/439">gaussian的安装方法</a>在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为<code>g16.tar.gz</code>，则使用以下命令进行解压:
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf g16.tar.gz</span><br></pre></td></tr></table></figure>
假设压缩后的<code>g16</code>文件夹放置在<code>/home/hapo/</code>文件夹下。先在<code>/home/hapo/g16</code>文件夹下新建文件夹<code>scratch</code>。接下来在<code>.bashrc</code>文件中添加如下内容:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> g16root=/home/hapo</span><br><span class="line"><span class="built_in">export</span> GAUSS_SCRDIR=/home/hapo/g16/scratch</span><br><span class="line"><span class="built_in">source</span> /home/hapo/g16/bsd/g16.profile</span><br></pre></td></tr></table></figure> 接下来在进入<code>/home/hapo/g16</code>中更改文件的权限:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 750 -R *</span><br></pre></td></tr></table></figure> 加下来只要重开终端即可运行g16。</p>
<h2 id="生成mol2文件">生成mol2文件</h2>
<p>这一步使用<a href="https://github.com/tamaswells/GMX">别人的脚本</a>，使用方法记录在该<a href="https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/">Jerkwin博客网页中</a>。</p>
<p>首先生成gaussian程序的输入文件: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pre.py acetate.pdb -1</span><br></pre></td></tr></table></figure> 之后运行gaussian程序:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g16 &lt;ACT.gjf &gt;ACT.out</span><br></pre></td></tr></table></figure> 最后运行<code>post.py</code>程序: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python post.py</span><br></pre></td></tr></table></figure>
以上命令最终会生成<code>ACT.mol2</code>文件，其中的静电荷是用gaussian计算后拟合得到的。</p>
<p>最后我们再用以上提及的<code>tleap</code>和<code>amb2gro_top_gro.py</code>即可生成gromacs的<code>.top</code>和<code>.gro</code>文件。</p>
<h1 id="opls-aa力场使用ligpargen">OPLS-AA力场(使用LigParGen)</h1>
<p><a href="http://zarbi.chem.yale.edu/ligpargen/">LigParGen</a>可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。
<img src="/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png" class="" title="LigParGen网页">
点击<code>Submit Molecule</code>之后，只要下载gromacs的<code>.top</code>和<code>.gro</code>文件即可。关于使用LigParGen生成lammaps力场文件的方法<a href="https://longkunxuluke.github.io/posts/2020/11/blog-post-4/">在此</a>。</p>
<h1 id="opls-aa力场使用tppmktop">OPLS-AA力场(使用TPPMKTOP)</h1>
<p><a href="http://erg.biophys.msu.ru/tpp/">TPPMKTOP</a>也可以用于生成OPLS-AA力场，并且和<a href="https://pubs.acs.org/doi/10.1021/ja058637b">文献</a>中的静电值最为接近，该文献可能是使用该程序生成的。
<img src="/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png" class="" title="LigParGen网页"> 同样，只要上传相应的PDB文件即可。</p>
<h1 id="构建gromacs拓扑文件">构建gromacs拓扑文件</h1>
<p>为了能够用gromacs进行模拟，先构建gromacs可用的<code>.top</code>文件。小分子的力场放在<code>molecule</code>文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在<code>heavywater</code>文件夹中。首先先在<code>topol.top</code>文件中写下如下内容:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include "amber14sb_parmbsc1.ff/forcefield.itp"</span><br><span class="line">#include "heavywater/tip3p-hw.itp"</span><br><span class="line">#include "molecule/ACT.itp"</span><br><span class="line">#include "molecule/MLM.itp"</span><br><span class="line">#include "amber14sb_parmbsc1.ff/ions.itp"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ System ]</span><br><span class="line">small molecule in water</span><br><span class="line"></span><br><span class="line">[ Molecules ]</span><br></pre></td></tr></table></figure>
以下是一种外门邪道的构建<code>.top</code>和<code>.gro</code>的方法。<code>solvate</code>可以用来给空盒子填充水，可以这样写:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top</span><br></pre></td></tr></table></figure>
这样子可以生成一个<code>conf.gro</code>文件，盒子大小为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="23.608ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 10434.9 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1878,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2978.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(3978.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(5256.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5856.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6956.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(7956.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(8956.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9556.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>，其中填充了水分子。</p>
<p>同时<code>solvate</code>程序可以通过<code>-maxsol</code>来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top</span><br><span class="line">gmx solvate -cs ./molecule/MLM.gro -<span class="built_in">cp</span> cp.gro -o cp2.gro -maxsol 1 -p topol.top</span><br><span class="line">gmx solvate -cs spc216.gro -<span class="built_in">cp</span> cp2.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure></p>
<p>比较正确的做法应该用<code>insert-molecules</code>来插入小分子，用<code>solvate</code>来填充水分子:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2</span><br><span class="line">gmx solvate -cs spc216.gro -<span class="built_in">cp</span> box.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>分子模拟</category>
      </categories>
      <tags>
        <tag>力场构建</tag>
      </tags>
  </entry>
  <entry>
    <title>在latex中定义新命令</title>
    <url>/2023/01/07/%E5%9C%A8latex%E4%B8%AD%E5%AE%9A%E4%B9%89%E6%96%B0%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="定义新命令">定义新命令</h1>
<p>为了在latex中书写方便，可以用<code>newcommand</code>定义新命令:
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\&lt;</span>cmdname&gt;}[&lt;n&gt;]{&lt;command&gt;}</span><br></pre></td></tr></table></figure> 1. <code>&lt;cmdname&gt;</code>为新定义的命令名字。<br>
2.
<code>&lt;n&gt;</code>为参数个数，各个参数可以在命令体中用<code>#1</code>、<code>#2</code>表示<br>
3. <code>&lt;command&gt;</code>为命令体。<br>
例如，可以用<code>newcommand</code>定义平均值的表示: <figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\mean</span>}[2]{<span class="keyword">\frac</span>{<span class="params">#1</span><span class="built_in">_</span>1 + <span class="params">#1</span><span class="built_in">_</span>2 + <span class="keyword">\cdots</span> + <span class="params">#1</span><span class="built_in">_</span><span class="params">#2</span>}{<span class="params">#2</span>}}</span><br></pre></td></tr></table></figure>
之后可以这样在数学环境中使用 <figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mean</span>{a}{n}</span><br></pre></td></tr></table></figure>
但是<code>newcommand</code>不允许定义一个已经存在的命令，如果要防止报错，可以使用<code>providecommand</code>，该命令使用和<code>newcommand</code>一致，当命令不存在时，它相当于<code>newcommand</code>，当命令存在时，它沿用之前的定义。例如:
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\providecommand</span>{<span class="keyword">\mean</span>}[2]{<span class="keyword">\frac</span>{<span class="params">#1</span>+<span class="params">#2</span>}{2}}</span><br></pre></td></tr></table></figure> 则<code>\mean{a}{n}</code>依旧等于 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="18.658ex" height="4.425ex" role="img" focusable="false" viewBox="0 -1259 8246.7 1956"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1187.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(2188,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3375.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(4376,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(5770.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6770.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3823.4,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="8006.7" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>
有时候我们需要重新定义一个已经定义的命令，此时，我们可以用<code>renewcommand</code>，<code>renewcommand</code>的使用和<code>newcomand</code>相同，但是它必须以及存在原命令，否则会报错。
这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。
<span id="more"></span></p>
<h1 id="使用局部命令">使用局部命令</h1>
<p>为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用<code>newcommand</code>和<code>renewcommand</code>我们可以如下操作:
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\mean</span>}[2]{<span class="keyword">\frac</span>{<span class="params">#1</span><span class="built_in">_</span>1 + <span class="params">#1</span><span class="built_in">_</span>2 + <span class="keyword">\cdots</span> + <span class="params">#1</span><span class="built_in">_</span><span class="params">#2</span>}{<span class="params">#2</span>}}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\mean</span>{a}{n}<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\mean</span>}[2]{<span class="keyword">\frac</span>{<span class="params">#1</span>+<span class="params">#1</span>}{2}}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\mean</span>{a}{n}<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
这时候两个<code>\mean</code>的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个<code>\newcommand</code>需要改为<code>\renewcommand</code>。</p>
<p>为了克服这个缺陷，我们可以使用<code>def</code>,<code>def</code>的语法为:
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\def</span><span class="keyword">\⟨</span>name⟩&lt;parameter text&gt;{⟨definition⟩}</span><br></pre></td></tr></table></figure> 1. <code>&lt;name&gt;</code>为新定义的命令名字。<br>
2.
<code>&lt;parameter text&gt;</code>为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为<code>#1#2#3</code>。<br>
3.
<code>&lt;definition&gt;</code>为命令体，其中的参数用<code>#1</code>、<code>#2</code>……表示。</p>
<p><code>def</code>不需要检查该命令是否定义，因此适合用来该操作。同时<code>def</code>会受到局部环境的影响，需要定义全局的命令可以用<code>gdef</code>，如果要对<code>&lt;definition&gt;</code>中的命令进行展开，可以用<code>edef</code>，全局定义展开时可以用<code>xdef</code></p>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>bash shell的一些以前没用过的特性</title>
    <url>/2023/01/09/bash-shell%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A5%E5%89%8D%E6%B2%A1%E7%94%A8%E8%BF%87%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="转化编码格式">转化编码格式</h1>
<p>有时候在linux打开文件会出现乱码，这时候可以使用<code>iconv</code>转化编码格式:
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iconv -f GB2312 -t utf-8 -o output.txt input.txt</span><br></pre></td></tr></table></figure>
以上命令可以将GB2312编码格式的<code>input.txt</code>文件转化为utf-8编码格式的<code>output.txt</code>文件。</p>
<span id="more"></span>
<h1 id="数组">数组</h1>
<p>用以下命令可以设定bash数组: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">b=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">array=(<span class="string">&#x27;a&#x27;</span> b 1)</span><br></pre></td></tr></table></figure>
用以下命令可以取出列表中的元素: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$&#123;a[0]&#125;</span></span><br></pre></td></tr></table></figure> 可以用以下命令取数组长度:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">length=<span class="variable">$&#123;#a[@]&#125;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="section">=~</h1>
<p><code>=~</code>用来进行正则匹配，匹配成功则为真，用法是:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ aaa =~ a.* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>opensuse15.4安装packman</title>
    <url>/2023/02/06/opensuse15-4%E5%AE%89%E8%A3%85packman/</url>
    <content><![CDATA[<p>最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper install opi</span><br><span class="line">opi codecs</span><br></pre></td></tr></table></figure> 以上两行代码就解决了编码器问题。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>opensuse15.4安装Nvidia驱动</title>
    <url>/2023/02/07/opensuse15-4%E5%AE%89%E8%A3%85Nvidia%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。</p>
<h1 id="添加nvidia软件源">添加Nvidia软件源</h1>
<p>首先需要添加Nvidia的软件源: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper addrepo --refresh <span class="string">&#x27;https://download.nvidia.com/opensuse/leap/$releasever&#x27;</span> NVIDIA</span><br></pre></td></tr></table></figure></p>
<h1 id="获得硬件信息">获得硬件信息</h1>
<p>用以下命令可以获得硬件信息: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lspci |grep VGA</span><br><span class="line">sudo lscpu |grep Arch <span class="comment"># 中文要改成&quot;架构&quot;</span></span><br></pre></td></tr></table></figure> 或者使用以下命令查看:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hwinfo --gfxcard | grep Model</span><br><span class="line">sudo hwinfo --<span class="built_in">arch</span></span><br></pre></td></tr></table></figure> 又或者使用<code>inxi</code>命令: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inxi -G</span><br><span class="line">inxi -Ga</span><br></pre></td></tr></table></figure></p>
<h1 id="安装">安装</h1>
<p>现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:<br />
1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices<br />
2. G04 = driver v390 = legacy driver for GTX4xx/5xx Fermi devices<br />
3. G05 = current driver for current devices<br />
4. G06 = covers all cards GT700 and up</p>
<p>可以用一下命令查看显卡驱动信息: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper se x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure> 或者: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper se -s x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>
如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zypper se nvidia-glG0*</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用git</title>
    <url>/2023/02/15/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git/</url>
    <content><![CDATA[<p>git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的<a
href="https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html">ics的PA</a>上抄来的。</p>
<p>安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;hapo&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;hapo@mail.com&quot;</span></span><br><span class="line">git config --global core.editor vim</span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure>
这些配置会储存在家目录下的<code>.gitconfig</code>中，经过了配置之后，我们就可以开始使用git了。</p>
<h2 id="本地管理">本地管理</h2>
<h3 id="初始化">初始化</h3>
<p>我们可以用<code>git clone</code>拉取远程的框架代码，或者在本地进行初始化新的项目:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<h3 id="查看存档信息">查看存档信息</h3>
<p>使用 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure> 查看目前为止所有的存档。 使用 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
可以得知，与当前存档相比，哪些文件发生变化。 <span id="more"></span></p>
<h3 id="存档">存档</h3>
<p>当我们代码写到一定程度的时候，就应该进行"存档"。<br />
首先我们需要使用<code>git status</code>查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用<code>git add</code>将文件加入跟踪列表，例如
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add file.c</span><br></pre></td></tr></table></figure>
会将<code>file.c</code>加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>
这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的
.o 文件,
和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让<code>git</code>在添加跟踪文件之前作筛选，我们可以编辑<code>.gitignore</code>文件(你可以使用<code>ls -a</code>命令看到它，<font color="orange">但是我没看到</font>)，在里面给出了需要被<code>git</code>忽略的文件和文件类型。<br />
把新文件加入跟踪列表后，使用<code>git status</code>再次确认。确认无误后就可以存档了，使用
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>
提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如"fix
bug for
xxx"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用<code>git log</code>查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱<code>git commit -m "COMMIT"</code>，虽然我知道上面说的是对的。</font></p>
<h3 id="读档">读档</h3>
<p>我们可以使用<code>git log</code>来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash
code，例如<code>8e4fac44d3b567591bc3768fc94d53575726b866</code>，我们需要通过hash
code来告诉<code>git</code>我们希望读取哪一个档。使用一下命令进行独档:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 8e4f</span><br></pre></td></tr></table></figure></p>
<p>其中<code>8e4f</code>是上文hash code的前缀，我们不需要输入整个hash
code。这时候我们的代码已经回到过去了。<br />
但事实上，使用<code>git reset</code>的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到"将来"了。就和别的软件中的撤销操作一样。</p>
<h3 id="第三视点">第三视点</h3>
<p>当然还是有办法来避免上文提到的副作用的，这就是<code>git</code>的分支功能，使用命令
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
查看所有分支。其中<code>master</code>是主分支，使用<code>git init</code>初始化之后会自动建立主分支。<br />
读档的时候使用以下命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 8e4f</span><br></pre></td></tr></table></figure>
而不是<code>git reset</code>。这时你将处于一个虚拟的分支中，你可以<br />
1. 查看<code>8e4f</code>存档的内容 2. 使用以下命令切换到其它分支
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure> 3.
对代码的内容进行修改，但你不能使用<code>git commit</code>进行存档，你需要使用
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git check -B 分支名</span><br></pre></td></tr></table></figure>
把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。<br />
不同的分支之间不会相互干扰，
这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决U盘刻盘空间变小问题</title>
    <url>/2023/02/06/%E8%A7%A3%E5%86%B3U%E7%9B%98%E5%88%BB%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8F%98%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo parted /dev/sdc <span class="comment"># 使用parted来调整磁盘/dev/sdc</span></span><br><span class="line"><span class="built_in">print</span> <span class="comment"># 打印查看当前的</span></span><br><span class="line">resizepart 2 -1 <span class="comment"># 将第二个分区充满剩下的空间</span></span><br><span class="line">quit <span class="comment"># 退出</span></span><br><span class="line">sudo resize2fs /dev/sdc2 <span class="comment"># 使用resize2fs来调整sdc2分区大小</span></span><br></pre></td></tr></table></figure>
亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh登陆相关</title>
    <url>/2023/03/01/ssh%E7%99%BB%E9%99%86%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="密钥登陆">密钥登陆</h1>
<p>linux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥,
生成密钥的命令为: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure> 其中需要输入文件名和key的类型。<br />
使用<code>ssh-copy-id</code>命令可以将<code>filename.pub</code>公钥分发给远程主机:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id hapo@webserver1</span><br></pre></td></tr></table></figure> 以上命令会将默认公钥分发过去, 也可以使用 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1</span><br></pre></td></tr></table></figure>
指定需要分发的公钥。<br />
此时就能不需要密码登陆远程服务器,
若密钥名字不是默认的名字(<code>~/.ssh/id_rsa</code>等),
则可以用以下命令指定: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/filename hapo@websever1</span><br></pre></td></tr></table></figure>
另外可以使用以下命令查看密钥和公钥对应的指纹: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -l -f ~/.ssh/filename</span><br><span class="line">ssh-keygen -l -f ~/.ssh/filename.pub</span><br></pre></td></tr></table></figure> <span id="more"></span>
# ssh配置文件
可以在<code>~/.ssh/config</code>中写如下命令简化<code>ssh</code>登陆时所需参数:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host hapo</span><br><span class="line">    HostName ip</span><br><span class="line">    Port 22</span><br><span class="line">    User hapo</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    ServerAliveInterval 60 <span class="comment"># 每60秒发送一次空请求</span></span><br><span class="line">    ServerAliveCountMax 10 <span class="comment"># 断开时重新连接的次数</span></span><br></pre></td></tr></table></figure></p>
<h1
id="使用ssh-agent和ssh-add">使用<code>ssh-agent</code>和<code>ssh-add</code></h1>
<p><code>ssh-agent</code>可以记录密钥的指纹,
并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。
启动<code>ssh-agent</code>的命令为 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure>
接下里就可以使用<code>ssh-add</code>添加密钥指纹 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add <span class="comment">#添加默认的密钥指纹</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_1 <span class="comment">#指定密钥的指纹</span></span><br></pre></td></tr></table></figure>
可以用以下命令查看添加过的密钥指纹 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add -L</span><br></pre></td></tr></table></figure>
可以用以下命令修改添加过的密钥指纹 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add -D <span class="comment"># 删除ssh-agent中的所有密钥指纹</span></span><br><span class="line">ssh-add -d key_file <span class="comment"># 删除指定密钥指纹</span></span><br></pre></td></tr></table></figure> 另外,
杀掉现在正在运行的<code>ssh-agent</code>的命令为 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-agent -k</span><br></pre></td></tr></table></figure> #
<code>oathtool</code> <code>oathtool</code>可以用于生成二次验证,
其使用命令行是 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oathtool -b --totp &lt;identity&gt;</span><br></pre></td></tr></table></figure>
<code>&lt;identity&gt;</code>为用于生成二次验证的身份码。</p>
<h1 id="sshpass"><code>sshpass</code></h1>
<p><code>sshpass</code>可以用于在命令行输入密码, 命令行如下:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sshpass -p &lt;password&gt; &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure> 通过结合<code>oathtool</code>, 可以实现免二次验证:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line">totp=`oathtool -b --totp &lt;identity&gt;`</span><br><span class="line">sshpass -p <span class="string">&quot;&lt;password&gt; <span class="variable">$totp</span>&quot;</span> &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="expect"><code>expect</code></h1>
<p><code>expect</code>命令可以用于与终端进行交互,
<code>expect</code>使用的是tcl语言,
这里不准备说明语法，只说明对应的一些用法</p>
]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>安装amber22的坑</title>
    <url>/2023/04/18/%E5%AE%89%E8%A3%85amber22%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>amber22已经把Amber部分开源了, 再加上最近需要使用amber,
所以将amber的安装研究了下, 经过两天的debug,
终于可以在集群上安装起来.</p>
<h2 id="最基本的安装过程">最基本的安装过程</h2>
<p>amber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹,
并且amber22已经不需要再分开编译serial, mpi, cuda版本,
只要开启了相应的选项就能都编译出来.
在<code>/path/to/amber22_src/build</code>中有<code>run_make</code>和<code>configure_make.py</code>两个文件.
其中, <code>run_make</code>写了基本的编译命令,
你需要对自己需要的选项进行修改从编译需要的版本,
而<code>configure_make.py</code>则是一个<code>python</code>脚本,
可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure.
当编译出现问题时, 可以用<code>clean_build</code>清理掉生成的文件.</p>
<p>最基本的安装命令是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./run_make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">source</span> /path/to/amber/amber.sh</span><br></pre></td></tr></table></figure>
<p>如果amber源文件夹为<code>/path/to/amber22_src</code>,
则默认安装好的文件夹在<code>/path/to/amber</code>. <span id="more"></span></p>
<h2 id="配置python">配置python</h2>
<p>amber22的一些程序需要python环境, 有很多方法可以python环境.</p>
<h3 id="section">1</h3>
<p>amber22默认会下载miniconda, 这样可以搭建出amber22适配的环境.
安装完成后会生成一个<code>amber.python</code>软连接,
这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网,
此时可以如下操作: (1)
在<code>amber22_src/build</code>下新建文件夹<code>CMakeFiles/miniconda/download/</code>,
下载好<code>Miniconda3-latest-Linux-x86_64.sh</code>放入该文件夹中,
之后cmake会认为该文件已下载好, 从而跳过下载过程. (2)
修改<code>amber22_src/cmake</code>文件夹下的<code>UseMiniconda.cmake</code>文件,
修改91行</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">91</span>  <span class="keyword">set</span>(INSTALLER_URL <span class="string">&quot;http://repo.continuum.io/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>例如修改成如下</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">91</span>  <span class="keyword">set</span>(INSTALLER_URL <span class="string">&quot;http://mirrors.nju.edu.cn/anaconda/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网,
因此我们可以配置成内网的镜像.
可以修改家目录下的<code>.condarc</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">channels<span class="punctuation">:</span></span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">default_channels<span class="punctuation">:</span></span><br><span class="line">  - https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/pkgs/main</span></span><br><span class="line">  - https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/pkgs/r</span></span><br><span class="line">  - https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/pkgs/msys2</span></span><br><span class="line">custom_channels<span class="punctuation">:</span></span><br><span class="line">  conda-forge<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  msys2<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  bioconda<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  menpo<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  pytorch<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  simpleitk<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/anaconda/cloud</span></span><br></pre></td></tr></table></figure>
<p>以及配置pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirror.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>
<p>此时会在家目录下生成如下配置文件<code>～/.config/pip/pip.conf</code>,
其中内容为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>global<span class="punctuation">]</span></span><br><span class="line">index-url = https<span class="punctuation">:</span><span class="comment">//mirror.nju.edu.cn/pypi/web/simple/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样后使用miniconda的python环境就可以顺利安装了.</p>
<h3 id="section-1">2</h3>
<p>如果已经在本地装过anaconda,
那么我们就可以用anaconda生成一个安装amber22的本地环境,
这样可以和已经安装过的python库同时在一个环境下使用.
使用本地python环境需要设置如下的选项<code>-DDOWNLOAD_MINICONDA=FALSE</code>(不下载miniconda)和<code>-DUSE_CONDA_LIBS=TRUE</code>(使用conda的python库).
可以用以下命令生成一个新的环境.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n amber python=3.10</span><br><span class="line">conda activate amber</span><br></pre></td></tr></table></figure>
<p>amber22的安装需要一些python库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install numpy</span><br><span class="line">conda install scipy</span><br><span class="line">conda install matplotlib</span><br><span class="line">conda install setuptools</span><br><span class="line">conda install thinker</span><br></pre></td></tr></table></figure>
<p>有的python库可能已经自带. 经过以上的配置,
amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.</p>
<h2 id="其余的坑">其余的坑</h2>
<h3 id="boost">Boost</h3>
<p>amber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装,
或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译.
如果你确定系统中的版本可用,
那么可以设置<code>-DFORCE_EXTERNAL_LIBS='boost'</code>.
amber22要编译自己的boost库需要zlib和bzip2,
其中zlib的缺失会在<code>run_make</code>的过程中检查到,
而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失,
那么可以使用anaconda安装库.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install zlib <span class="comment">#zlib 在前面的配置环境的时候已经安装了.</span></span><br><span class="line">conda install bzip2</span><br></pre></td></tr></table></figure>
<h3 id="libsm">libSM</h3>
<p>在集群上, libSM库存在问题, 这会导致xaLeap编译出问题,
这时候我们可以使用anaconda安装该库文件.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge xorg-libsm</span><br></pre></td></tr></table></figure>
<p>并且设置如下两个变量：
<code>-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include</code>和<code>-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so</code></p>
<p>并且设置<code>LD_LIBRARY_PATH</code>用于链接<code>libuuid.so</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里实际上是系统的libsm库和uuid库的匹配有问题,
使用conda安装了libsm库后会下载uuid库,
而设置了<code>-DX11_SM_INCLUDE</code>、<code>-DX11_SM_LIB</code>和<code>LD_LIBRARY_PATH</code>后会使用anaconda下的libsm库并且会优先查找<code>/path/toanaconda3/env/amber/lib</code>下的uuid库.
通过使用<code>objdump -d /usr/lib64/libuuid.so.1</code>发现其中的函数名为<code>uuid_generate@@UUID_1.0</code>而不是<code>uuid_generate@UUID_1.0</code>.</p>
<p><font color='salmon'>更简单的方法是设置<code>-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/</code>来让cmake自动查找libsm库和uuid库,
这样就不用设置<code>-DX11_SM_LIB</code>和<code>-DX11_SM_INCLUDE_PATH</code>了,
也不需要设置系统的<code>LD_LIBRARY_PATH</code>.</font></p>
<blockquote>
<p>实际上经过测试,
只设置了<code>-DX11_SM_INCLUDE</code>和<code>-DX11_SM_LIB</code>依旧会使用<code>/usr/lib64/libSM.so.1</code>.</p>
<p>只设置<code>LD_LIBRARY_PATH</code>也无法通过编译</p>
</blockquote>
</blockquote>
<h3 id="一些额外的选项">一些额外的选项</h3>
<ol type="1">
<li><code>-DTRUST_SYSTEM_LIBS</code>: 相信系统的库文件,
开启后会将某些库会使用系统中自带的(例如boost),
开启命令<code>-DTRUST_SYSTEM_LIBS=TRUE</code></li>
<li><code>-DDISABLE_TOOLS</code>: 关闭一些工具的编译,
例如<code>-DDISABLE_TOOLS=cpptraj</code></li>
<li><code>-DFORCE_DISABLE_LIBS</code>: 关闭某些库文件,
使用<code>;</code>分隔开(注意用引号<code>'</code>引起来,
以防和bash冲突), 例如<code>-DFORCE_DISABLE_LIBS=boost</code></li>
<li><code>-DFORCE_INTERNAL_LIBS</code>: 强制某些库文件使用内部编译,
例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>
<li><code>-DFORCE_EXTERNAL_LIBS</code>: 强制某些库文件使用外部编译,
例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>
</ol>
<h3 id="cuda与intel编译器版本问题">CUDA与INTEL编译器版本问题</h3>
<p><code>run_cmake</code>会检查编译器的版本和CUDA版本,
如果版本不适配则会配置不通过. 但是当你使用intel编译器时,
它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本.
为了解决这个问题我们可以修改<code>/path/to/amber22_src/cmake/CudaConfig.cmake</code>文件的112行</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">111</span>             CMAKE_CXX_COMPILER_VERSION <span class="keyword">VERSION_GREATER_EQUAL</span> <span class="number">12</span></span><br><span class="line"><span class="number">112</span>             <span class="keyword">AND</span> CUDA_VERSION <span class="keyword">VERSION_GREATER</span> <span class="number">11.6</span></span><br></pre></td></tr></table></figure>
<p>将cuda的上限版本(11.6)调低即可, 我一般调至11.0.</p>
]]></content>
      <categories>
        <category>分子模拟</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Performing MM/PBSA on Fugaku</title>
    <url>/2024/09/30/Performing-MM-PBSA-on-Fugaku/</url>
    <content><![CDATA[
## Preforming MM/PBSA on Fugaku

The detail of how to preform MM/PBSA on Fugaku is here: [https://github.com/wuyichao71/MMPBSA_on_Fugaku](https://github.com/wuyichao71/MMPBSA_on_Fugaku)
]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>在opensuse上外网远程连接</title>
    <url>/2023/08/07/%E5%9C%A8opensuse%E4%B8%8A%E5%A4%96%E7%BD%91%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[
## 设置路由器
需要把光猫设置成桥接模式并且需要知道宽带拨号的帐号密码, 这部分可以咨询宽带师傅. 不需要关闭DHCP服务, 否则会导致需要调节光猫的时候需要设置内网IP, 为了减少麻烦就不关闭了. 之后通过网线从光猫LAN口接出, 接入路由器WAN口. 为了使得外网可以通过外网IP访问内部电脑, 可以设置先设置静态IP地址绑定, 再设置端口映射或者DMZ主机. 如果使用端口映射, 那么暂时只开放了一个服务, 如果设置DMZ主机, 那么服务就都开放了. 
<span id="more"></span>
通过设置DDNS可以与花生壳的域名绑定, 但是花生壳的免费域名只有1年的使用时间, 因此还是需要去获得公网IP比较稳妥.

## 获得公网IP
如果使用的是华为路由器, 那么就可以使用华为智慧生活APP获得公网IP. 

## 安装花生壳
opensuse可以安装花生壳的rpm包, 可以去[官网](https://hsk.oray.com/download)下载安装包. 之后需要做一些设置才能安装. 首先需要创建文件夹`/lib/systemd/system`, 其次需要安装`netstat`. 在opensuse上需要使用以下命令:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zypper <span class="keyword">in</span> net-tools-deprecated</span><br></pre></td></tr></table></figure>
这样才会在有`netstat`.

之后就可以使用

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rpm -i phddns_&lt;version&gt;.rpm</span><br></pre></td></tr></table></figure>

来安装了.

卸载的命令是
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rpm -e phddns</span><br></pre></td></tr></table></figure>

> 这里有个小坑, 用花生壳做内网穿透的话, 如果ip和刚刚做DDNS的ip不一致, 那么会把前面的DDNS设置冲掉. 因为是坑所以就不介绍如何设置内网穿透了.

## 安装向日葵

## 安装teamviewer]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
