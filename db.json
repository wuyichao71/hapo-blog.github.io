{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1670334520078},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1670334520072},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1670334519999},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1670334520079},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1670334520005},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1670334519993},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1670334520021},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1670334520095},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1670334520101},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1670334520013},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1670334520087},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1670334520116},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1670334520111},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1670334520089},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1670334520129},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1670334520122},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1670334520162},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1670334520168},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1670334520135},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1670334520197},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1670334520183},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1670334520175},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1670334520161},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1670334520188},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1670334520207},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1670334520067},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1670334520212},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1670334520245},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1670334520135},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1670334520228},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1670334520238},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1670334520250},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1670334520256},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1670334520263},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1670334520233},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1670334520274},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1670334520269},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1670334520280},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1670334520159},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1670334520303},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1670334520298},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1670334520285},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1670334520292},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1670334520434},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1670334520478},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1670334520486},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1670334520454},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1670334520537},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1670334520531},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1670334520509},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1670334520517},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1670334520545},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1670334520552},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1670334520522},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1670334520542},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1670334520549},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1670334520364},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1670334520264},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1670334520353},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1670334520359},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1670334520377},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1670334520372},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1670334520497},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1670334520581},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1670334520427},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1670334520497},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1670334520575},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1670334520600},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1670334520562},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1670334520557},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1670334520559},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1670334520565},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1670334520576},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1670334520570},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1670334520573},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1670334520568},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1670334520578},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1670334520471},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1670334520589},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1670334520591},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1670334520599},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1670334520596},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1670334520601},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1670334520589},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1670334520589},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1670334520504},{"_id":"public/archives/index.html","hash":"24df5005e28f47e5e7dfb38fa3cc99fe4652a844","modified":1670366518822},{"_id":"public/1970/01/01/hello-world/index.html","hash":"dcd70164899af0a3c0a3e8754c832d566fec070e","modified":1670366518822},{"_id":"public/archives/1970/01/index.html","hash":"1cf611aca4ee0859fe092b8737b8e7f43bcc17ef","modified":1670366518822},{"_id":"public/archives/1970/index.html","hash":"442f9b9d39ba76abaeebb955cbfa8c8ddddf6472","modified":1670366518822},{"_id":"public/index.html","hash":"6c50716f238c1f4c7e20358d56ce220085b76ba0","modified":1670366518822},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1670366518822},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1670366518822},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1670366518822},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1670366518822},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1670366518822},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1670366518822},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1670366518822},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1670366518822},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1670366518822},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1670366518822},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1670366518822},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1670366518822},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1670366518822},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1670366518822},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1670366518822},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1670366518822},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1670366518822},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1670366518822},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1670366518822},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1670366518822},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1670366518822},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1670366518822},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1670366518822},{"_id":"source/_posts/数学分析学习.md","hash":"2c14eb00e5911eb5c73f331e2d7b0a329e27b3d3","modified":1671078754468},{"_id":"source/_posts/hello-world.md.bak","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1670334520078},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670428614170},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1670430882575},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1670430882559},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670428613770},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670428613785},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670428613801},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1670430919413},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670428614148},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1670430881472},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1670428611395},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1670430916907},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1670430881488},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1670428611464},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1670428611464},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1670428611458},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1670430881635},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1670430881651},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1670430916914},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1670430881657},{"_id":"themes/next/_config.yml","hash":"9be12f30cfff9b5ec0cd0783ee80b8e584b18d55","modified":1671205029867},{"_id":"themes/next/bower.json","hash":"2fd34aa37640c87abb391af760569b7e8d54877a","modified":1670428611511},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1670430918079},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1670428611527},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1670428611681},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1670430881689},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1670430881720},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1670428611565},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1670430916945},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"d5352aa0cfc26c62116d4e4521e802692d789b7a","modified":1670428611426},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1670428611443},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1670430916976},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1670430916876},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1670430916813},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1670430916892},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1670430917114},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1670430917114},{"_id":"themes/next/languages/fr-FR.yml","hash":"6ee34c8103a95839207dac1201fef7a8f727d2fc","modified":1670428611712},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1670430917177},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1670430917161},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1670430917114},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1670430917192},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1670428611743},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1670430917230},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1670430917246},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1670430917230},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1670430917208},{"_id":"themes/next/languages/zh-hk.yml","hash":"54e4aa1d04ccad1e13cf08124fe5f70a930592dd","modified":1670428611796},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1670430917277},{"_id":"themes/next/languages/zh-tw.yml","hash":"280dd00495e90b8a8c4d9351bab8ae65c78bbe87","modified":1670428611796},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ce7413e9619d55e794dcab1e914bc7359a3c5568","modified":1670428611781},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1670430918016},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1670430917315},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1670430918032},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1670428612567},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1670430918016},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1670430918048},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1670430918063},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1670430918063},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1670428612583},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1670428612598},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1670428614719},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1670430881773},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1670428614719},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1670428614734},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1670430916992},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1670430881758},{"_id":"themes/next/docs/cn/DATA-FILES.md","hash":"58c58c7d98365395dba904a87f9b5f5e0b1e99cb","modified":1670428611596},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1670430917007},{"_id":"themes/next/docs/cn/README.md","hash":"0f3768c0db0b48105b989fe77e7c5f486b498a1c","modified":1670428611612},{"_id":"themes/next/docs/cn/INSTALLATION.md","hash":"15b09b7cf4e4159858895e37ce334fcc96ac08d7","modified":1670428611596},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1670428611881},{"_id":"themes/next/docs/cn/UPDATE-FROM-5.1.X.md","hash":"e46a72abf7c08f2637b79e24e35a9dcc5b2b28c0","modified":1670428611627},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1670430917346},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1670430917346},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1670428611865},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1670428611897},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1670428611812},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1670430917362},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1670428611828},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1670430917377},{"_id":"themes/next/layout/_partials/head.swig","hash":"4dd4f0f4c6d8fbf2099419be6adcf7e3b051044d","modified":1670428611944},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1670430917393},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1670428611981},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1670430882321},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1670428611981},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1670428612013},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1670428612112},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1670428612128},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1670430882606},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1670428612429},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1670428612429},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1670428612445},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1670428612445},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1670430917863},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1670428612460},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1670430918306},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1670430918333},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1670428612467},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1670428612629},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1670428612645},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1670430883261},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1670430883292},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1670428612614},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1670430918364},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1670430883239},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1670430919452},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1670428614170},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1670430884965},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1670428614186},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1670428614202},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1670428614217},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1670428614217},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1670428614233},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1670428614233},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1670428614248},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1670428614248},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1670428614264},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1670428614271},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1670428614271},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1670428614271},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1670428614286},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1670428614302},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1670428614286},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1670428614302},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1670430917631},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1670428612044},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1670428611959},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1670428611966},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1670428612044},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1670428612066},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1670428612097},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1670428612081},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1670428612097},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1670428612128},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1670430882590},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1670428612213},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1670430882553},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1670428612244},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1670430882622},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1670428612266},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1670428612266},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1670430882637},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1670428612282},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1670428612282},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1670428612313},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1670430882659},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1670428612329},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1670428612313},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1670428612344},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1670430882706},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1670430917732},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1670428612382},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1670428612366},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1670428612382},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1670430917794},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1670428612398},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1670430882760},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1670428612413},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1670428612514},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1670428612514},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1670430882860},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1670428612529},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1670428613763},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1670428613785},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1670428613747},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1670428613801},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1670430919397},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1670430919382},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1670430919420},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1670428614333},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1670428614349},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1670430919436},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1670428614349},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1670428614364},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1670428614371},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1670428614386},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1670428614371},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1670428614386},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1670428614433},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1670428614418},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1670428614433},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1670428614471},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1670428614487},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1670428614487},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1670428614471},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1670428614502},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1670428614703},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1670428614703},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1670428614687},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1670430918417},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1670430918417},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1670428612714},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1670428612714},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1670428612968},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1670430918433},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1670428613368},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1670430918896},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1670428613701},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1670430919018},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1670428613685},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1670430884364},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1670430884326},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1670430919097},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1670428613848},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1670428612482},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1670430919197},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1670428612498},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1670428613869},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1670430919219},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1670430919235},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1670430884696},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1670428613901},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1670428613885},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1670430884665},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1670428613985},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1670430919282},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1670428614001},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1670428614048},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1670428614070},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1670430919319},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1670430919351},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1670430884765},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1670430919335},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1670430884859},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1670428614418},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1670428614518},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1670428614650},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1670428614650},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1670428614549},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1670428612899},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1670428614534},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1670430883424},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1670428612930},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1670430883440},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1670430918464},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1670428612815},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1670428612783},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1670428612799},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1670428612831},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1670428612831},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1670428612862},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1670428612867},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1670428612883},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1670428612745},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1670428613215},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1670428613268},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1670428613246},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1670428613230},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1670428613284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1670428613315},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1670428613315},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1670428613299},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1670428613331},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1670428613346},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1670430918517},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1670428612983},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1670430918534},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1670430918565},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1670430883578},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1670430918580},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1670430918649},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"0abb074afb6ab7242a22fa6dc3ac688251df708a","modified":1670428613068},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1670430918633},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1670430883640},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1670430883662},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1670428613147},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1670430883694},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1670430918664},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1670428613168},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1670428613531},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1670428613562},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1670428613569},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1670428613547},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1670428613585},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1670428613600},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1670428613585},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1670428613616},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1670428613616},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1670430883825},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1670428613415},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1670428613447},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1670428613400},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1670428613431},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1670428613469},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1670428613462},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1670428613484},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1670428613500},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1670428613932},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1670428613500},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1670428614032},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1670428613948},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1670428614618},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1670428614587},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1670428614603},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1670428614571},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1670428614672},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1670430881488},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1670430881673},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1670430917092},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1670430881488},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1670430916892},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1670430881573},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1670430881588},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1670430881588},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1670430881604},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1670430881604},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1670430881620},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1670430917092},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1670430917130},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1670430917146},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1670430917130},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1670430917161},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1670430917215},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1670430917261},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1670430917261},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1670430917293},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1670430917293},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1670430917308},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1670430916945},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1670430916961},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1670430881735},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1670430916961},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1670430883192},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1670430916860},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1670430916845},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1670430916829},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1670430917014},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1670430916876},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1670430881820},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1670430881858},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1670430881836},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1670430917030},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1670430917061},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1670430917045},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1670430917076},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1670430917045},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1670430917509},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1670430882475},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1670430882490},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1670430882506},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1670430917694},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1670430882590},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1670430882775},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1670430917709},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1670430917832},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1670430918095},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1670430883123},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1670430883108},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1670430918217},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1670430883139},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1670430918227},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1670430918244},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1670430918260},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1670430918291},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1670430918317},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1670430918275},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1670430883277},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1670430918348},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1670430883308},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1670430918379},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1670430919166},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1670430919467},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1670430919467},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1670430919483},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1670430919520},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1670430919499},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1670430919567},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1670430885097},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1670430882305},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1670430917462},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1670430917531},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1670430917446},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1670430917446},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1670430917478},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1670430917493},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1670430917415},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1670430917431},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1670430917547},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1670430917562},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1670430882359},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1670430882374},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1670430917578},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1670430917647},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1670430917609},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1670430917616},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1670430917678},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1670430882653},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1670430917716},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1670430882691},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1670430917747},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1670430917816},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1670430917778},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1670430882791},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1670430882807},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1670430917879},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1670430882860},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1670430882876},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1670430917917},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1670430917932},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1670430917948},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1670430882891},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1670430917979},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1670430917995},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1670430883061},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1670430918166},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1670430918150},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1670430918181},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1670430883076},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1670430883092},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1670430883092},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1670430918213},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1670430918117},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1670430883023},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1670430883007},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1670430919551},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1670430919535},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1670430919266},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1670430919297},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1670430884743},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1670430919219},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1670430919250},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1670430919319},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1670430919366},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1670430918680},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1670430918880},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1670430919050},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1670430919034},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1670430884342},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1670430884495},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1670430919635},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1670430919599},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1670430883763},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1670430918711},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1670430883778},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1670430918717},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1670430883408},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1670430918495},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1670430918596},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1670430918617},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1670430918818},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1670430918764},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1670430918796},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1670430918749},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1670430883925},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1670430918833},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1670430918865},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1670430918849},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1670430884041},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1670430918934},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1670430918949},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1670430884095},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1670430918965},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1670430918981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1670430884158},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1670430919012},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1670430918996},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1670430884279},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1670430919081},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1670430919065},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1670430919119},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1670430884311},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1670430919119},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1670430919134},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1670430884426},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1670430884480},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1670430919166},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1670430919150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1670430918918},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1670430919620},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1670430919651},{"_id":"themes/ocean/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1670432238895},{"_id":"themes/ocean/package.json","hash":"b993176f8c35bc3ab9dbd8642ec6cd125fcb447e","modified":1670432239327},{"_id":"themes/ocean/README.md","hash":"28876fb36a83896ba0d54923b2ef17c2f9f183bf","modified":1670432238895},{"_id":"themes/ocean/_config.yml","hash":"fcad1ad7ca45a33766658b97c0b2679123231390","modified":1670432757427},{"_id":"themes/ocean/layout/index.ejs","hash":"1c3e5237d2c02c0dd2b95fad282603bb76d70c23","modified":1670432239296},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1670432239274},{"_id":"themes/ocean/layout/categories.ejs","hash":"bf3eff3f238a9798227ce868f5c08b230f66ea04","modified":1670432239290},{"_id":"themes/ocean/layout/layout.ejs","hash":"a0648569b4e28464559ad8efae9115d35e30fd28","modified":1670432239296},{"_id":"themes/ocean/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1670432239312},{"_id":"themes/ocean/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1670432239312},{"_id":"themes/ocean/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1670432238926},{"_id":"themes/ocean/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1670432238926},{"_id":"themes/ocean/layout/tags.ejs","hash":"4a15edf11625b90a82c589755e751a2c3ec3c4b0","modified":1670432239312},{"_id":"themes/ocean/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1670432238942},{"_id":"themes/ocean/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1670432238942},{"_id":"themes/ocean/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1670432238973},{"_id":"themes/ocean/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1670432238957},{"_id":"themes/ocean/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1670432238995},{"_id":"themes/ocean/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1670432238973},{"_id":"themes/ocean/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1670432238957},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"cb47124a281170e3924c51ac3fc70b8b8c3a5519","modified":1670432239011},{"_id":"themes/ocean/source/404.html","hash":"788929fab7b99dd74575399f41cddae6f63ce1f4","modified":1670432239343},{"_id":"themes/ocean/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1670432238995},{"_id":"themes/ocean/source/favicon.ico","hash":"d125a7c3f6f2c75e3f3fb7df9ef28db2987a85a7","modified":1670432239797},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1670432239011},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"a769094a3620ccc59e7b769448186b0f21f5bd4e","modified":1670432239042},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"e6a4d823a84579a1a4fdc69a6583f33b1045ef8d","modified":1670432239026},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"c3bb015d3f368cf63ba51779ba849dd263654f23","modified":1670432239058},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"8274535727f7256479fb896d50961c2c028250ce","modified":1670432239073},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"a3e967e14f29fbbffafcfa112ffd0f081e5faf6a","modified":1670432239089},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"7df17b17c315ad0194bd8211d1b18b3ad58647f4","modified":1670432239058},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"e7e40dba2eadf0c2d2a5c75c58c6f78234a039a4","modified":1670432239274},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"f8cc4e4f9df1832b8ab6d7033840c57f3ad14fad","modified":1670432239096},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"72b960315983ee95363fa9cabe82f52916ac9ae3","modified":1670432239274},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"4c7427906a608343397afefbffe75722a7d04278","modified":1670432239390},{"_id":"themes/ocean/source/css/_extend.styl","hash":"95f094de3fdca53fd88f5bfd86cec3522f39ad6f","modified":1670432239374},{"_id":"themes/ocean/source/css/_fonts.styl","hash":"4fb2e8660548f2cb3abcd44a204c1bc627f1fadf","modified":1670432239428},{"_id":"themes/ocean/source/css/404.styl","hash":"14b2fec2da86081f0545732552aa5f07b545c19a","modified":1670432239359},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1670432239443},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"b2090d404f06d0a3f12d7b052d2e689a8b06bbf9","modified":1670432239428},{"_id":"themes/ocean/source/css/_variables.styl","hash":"ed2e95e9a2e753f9c0cfce0940e377e889b996a9","modified":1670432239697},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1670432239792},{"_id":"themes/ocean/source/css/style.styl","hash":"8816644d5017e3e7575eb12dc5ba107f2cb2e20f","modified":1670432239776},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1670432240962},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1670432240999},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1670432241014},{"_id":"themes/ocean/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1670432241030},{"_id":"themes/ocean/source/js/search.js","hash":"3e66ea259eff66e36e240b695c4753c5d4454bbb","modified":1670432241046},{"_id":"themes/ocean/source/js/ocean.js","hash":"39f7f028a6c449b3e418e659abba7276cff7f3b0","modified":1670432241030},{"_id":"themes/ocean/source/images/hexo.svg","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1670432239913},{"_id":"themes/ocean/source/js/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1670432241046},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"525309ea3c7360f83d1d9df6d04c256d7171950d","modified":1670432239913},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1670432239712},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1670432239744},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1670432239760},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1670432239760},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1670432239459},{"_id":"themes/ocean/source/css/_partial/apple.styl","hash":"187106fe1dcfb953a8677677628e08152988db8c","modified":1670432239474},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"418cb1a9549de56a036ef56984f07658ea85f6ad","modified":1670432239474},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"7bf289013d304505984b251be725b49165a694fd","modified":1670432239497},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"201bf22a3879f55a5cd3c8e17be8df92e0cea11c","modified":1670432239497},{"_id":"themes/ocean/source/css/_partial/blockquote.styl","hash":"c098346d42f5ddcbb9e2841cbbd0bee7dd8f09bc","modified":1670432239512},{"_id":"themes/ocean/source/css/_partial/categories.styl","hash":"f0c898823a5ddc37ae6bf76cc34ce8e50dd30885","modified":1670432239512},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1670432239559},{"_id":"themes/ocean/source/css/_partial/english.styl","hash":"32ebfa9f9c103c495064d288418088234e940586","modified":1670432239528},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"c6e99fd23056fb01177aeefbc5dd4a8e88cf8f81","modified":1670432239559},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1670432239528},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"24779cbce1012d4f35ffc6b3ec0830cbc2ea3b3f","modified":1670432239544},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1670432239544},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"91a3b4ed092b683df9c528d9a61f0123f650d1d2","modified":1670432239575},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1670432239597},{"_id":"themes/ocean/source/css/_partial/justifiedGallery.styl","hash":"e7b5784ffd501f98216a717f876f2adb23fa5cd9","modified":1670432239575},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"6fd213c53027d42164bfc9f0e3b4ea02317bfb89","modified":1670432239597},{"_id":"themes/ocean/source/css/_partial/pages.styl","hash":"3b2a13061709f4fe921951599a44ea4962b299ee","modified":1670432239629},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"bddda2f76021f37167339fb1b7bd088cd6ce2bb3","modified":1670432239613},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"69ba351909c73eb1e04510facc9b35dd584198e0","modified":1670432239613},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"e326918ba276ee332d0598d8193ccd8353e7d916","modified":1670432239629},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"011aaf21942dfff514ed4e98ce20142efbdd1b71","modified":1670432239644},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1670432239660},{"_id":"themes/ocean/source/css/_partial/tocbot.styl","hash":"62375bee9b6e0fce5b0b68c4b74572b2cfabf526","modified":1670432239676},{"_id":"themes/ocean/source/css/_partial/tag.styl","hash":"c88ebf80e1cff4d464abbe6bc13032b73abae1c4","modified":1670432239660},{"_id":"themes/ocean/source/css/_partial/safari.styl","hash":"dbb582354b1ff2d7f161cb42c104f58b5b4fa87b","modified":1670432239644},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"c1806bb9efde4b31c61c2bba8fa5d66e10bae62e","modified":1670432239691},{"_id":"themes/ocean/source/css/_partial/tooltips.styl","hash":"cdef939c54d2ca34d691e847af4fb6cc39d0ec21","modified":1670432239676},{"_id":"themes/ocean/source/css/_partial/valine.styl","hash":"b980d02c0d1aad4866c8173c20f5e6b53026cbd5","modified":1670432239697},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.eot","hash":"532e7f0e62bcc9be2fb72c143635fa5051503414","modified":1670432239828},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.ttf","hash":"1133580bee441a8ad24fb2dde3bbdc324d8648af","modified":1670432239860},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.svg","hash":"b0a3535723b40ad2fa1636b244099af1c86c71a7","modified":1670432239844},{"_id":"themes/ocean/source/fonts/raleway_medium/Raleway-Medium.woff","hash":"83f9d80f2e2a158f7e3024289d8cd856d0966efb","modified":1670432239875},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"a7b0c7059ec6ce0c0d4fabdece662e0ebe5f85b9","modified":1670432239111},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1670432239158},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"245ccbeffed5e54543990fcbdd63fba15b7d83bf","modified":1670432239127},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"c997e2f8f93a13f8684b46dcef1bbb052349d1c7","modified":1670432239196},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"386f47b0299351f45cac2ad43779893b31f60c28","modified":1670432239142},{"_id":"themes/ocean/layout/_partial/post/justifiedGallery.ejs","hash":"db321fe1cd5965d9303a25aeff5349798a1b7865","modified":1670432239189},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"827448d0947467d9b2d351973a53b8c01ea0924f","modified":1670432239227},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"4d75833291b4f2478c7ac125a40ea8217f25a63a","modified":1670432239174},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1670432239211},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"1bbb92e9c571de1f539120ad5519b91c8a02c709","modified":1670432239174},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"adaea79d14202c281d457a2cb4ee766d023c4088","modified":1670432239227},{"_id":"themes/ocean/layout/_partial/post/valine.ejs","hash":"cde2408a3e1615d1899e6e89e8d2ccbecef1d7d7","modified":1670432239258},{"_id":"themes/ocean/layout/_partial/post/tocbot.ejs","hash":"11ddd6106103c3b4506f69da8b6d4b8f20c95c89","modified":1670432239243},{"_id":"themes/ocean/layout/_partial/post/topping.ejs","hash":"7a839e91c502cf4c188b8c10f4f02675dbc5cde5","modified":1670432239243},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1670432240947},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"ab131f0b13a89f24543fadbf496b1c813d417c02","modified":1670432240978},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"600c86071c2b5198cfa2c052dd90b78920f62b45","modified":1670432239797},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1670432239728},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1670432239343},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1670432239897},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1670432240462},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1670432240545},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1670432240947},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1670432240398},{"_id":"source/about/index.md","hash":"888f2d0903308c895f2964ef6d5e6f234292a9bf","modified":1670434927586},{"_id":"source/gallery/index.md","hash":"74c1a01479911df54705978a3b76733000d62d37","modified":1670433132167},{"_id":"source/tags/index.md","hash":"745fb85a831982281309789474cd1a814a63eb54","modified":1670434705777},{"_id":"themes/next/._config.yml.swp","hash":"aa44e5aa2e3d9cda0487aaa33e394d7ce1dddf2d","modified":1670433340932},{"_id":"source/categories/index.md","hash":"0afcadd6af7f69b0ef961a8479e889b1c7ff310d","modified":1670434531770},{"_id":"source/schedule/index.md","hash":"5976be059b7b0d7212d80422938358857af896b7","modified":1672323450765},{"_id":"themes/next/.README.md.swp","hash":"3567d226bb71f30fb0af609ed81ea2076d8a90f7","modified":1670435578576},{"_id":"source/_posts/使用Modeller补缺失残基.md","hash":"d2cd0c1939295a19335850a25e336d7e70a0a501","modified":1671078754453},{"_id":"source/_posts/计算机程序的构造与解释.md","hash":"35147dee8d5f998948e187fb8536a8d8b61c05e1","modified":1670686831383},{"_id":"themes/next/source/images/avatar.jpg","hash":"24c315983945886ec3323119e44e7cffae9f5716","modified":1671199756000},{"_id":"source/_posts/制作小分子力场.md","hash":"806d89b8eb4b76c55acca35c186800d559b8e4d1","modified":1675687204782},{"_id":"source/_posts/在latex中定义新命令.md","hash":"df8f9508ebf7c6a740a120c1dfd00be20d22c076","modified":1675687204782},{"_id":"source/_posts/制作小分子力场/openbabel.png","hash":"7f863b3c87de2408a5f6f21ed01b3480cf5acad2","modified":1672321525751},{"_id":"source/_posts/制作小分子力场/tppmktop.png","hash":"8886e032643134b685a359c55e49f0e690dadbdb","modified":1672583306013},{"_id":"source/_posts/制作小分子力场/LigParGen.png","hash":"7c289f34e97dfa4ea28d81d24534f2f6273a646d","modified":1672581896245},{"_id":"source/_posts/bash-shell的一些以前没用过的特性.md","hash":"173b29308b1fba11ada23afc9115bbb16ccc51e3","modified":1675687204782},{"_id":"source/_posts/opensuse15-4安装Nvidia驱动.md","hash":"79c45bd4faa38704bfe19b42b329476b671612bb","modified":1675750647328},{"_id":"source/_posts/opensuse15-4安装packman.md","hash":"1119728ed5e336bd33e823dea92e2f8532236274","modified":1675688109851},{"_id":"source/_posts/如何使用git.md","hash":"8df27337e1dc1e0ed68503bb35bba8d38c2b680f","modified":1676453612759},{"_id":"source/_posts/解决U盘刻盘空间变小问题.md","hash":"876013c91e9f26f1de9f99e10dc8a743f26e5e23","modified":1675689153935},{"_id":"source/_posts/计算机系统基础习题.md","hash":"4f7208a4804444c1689e034678232bdb88f9fe7d","modified":1675748205056},{"_id":"source/_posts/ssh登陆相关.md","hash":"2cf036cfca97210775e5534f6714cac146c8576b","modified":1680841064844},{"_id":"source/_posts/计算机系统基础第三章习题.md","hash":"68225ba517936feaa8d711a797979fd162da1482","modified":1683815834957},{"_id":"source/_posts/计算机系统基础第四章习题.md","hash":"e94cef9e66447ea220db27c689c2505c9b7141d4","modified":1683964700491},{"_id":"source/_posts/计算机系统基础第一章习题.md","hash":"6894e06f19499ad68d81aaf5153861180e68f6ad","modified":1683171902025},{"_id":"source/_posts/安装amber22的坑.md","hash":"0d1d047d0c124d77944c1559227931e8066e5d1a","modified":1682748696468},{"_id":"source/_posts/计算机系统基础第二章习题.md","hash":"4e7203392bf35bb4762af8e10b82049efdd39cee","modified":1683171857341},{"_id":"source/_posts/计算机系统基础第五章习题.md","hash":"7505f58dc66da590e7c99315273c58b3983dc700","modified":1684643460649}],"Category":[{"name":"数学","_id":"clbdxieb90000ijvq3thmaffh"},{"name":"分子模拟","_id":"clbetkmq00001scpvetyn24jr"},{"name":"计算机","_id":"clbqkri8c0001abvqezga0tsx"},{"name":"latex","_id":"clclmin0g0005ugvqhhcygud2"},{"name":"bash","_id":"clcoj4f1t00012cvq4lq714vy"}],"Data":[],"Page":[{"title":"about","date":"2022-12-07T17:12:52.000Z","type":"about","_content":"<div align='center'>email: wuyichao71@126.com</div>\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-12-08 01:12:52\ntype: \"about\"\n---\n<div align='center'>email: wuyichao71@126.com</div>\n","updated":"2022-12-07T17:42:07.586Z","path":"about/index.html","_id":"clbdwthic0000udvq3xka2t0d","comments":1,"layout":"page","content":"<div align='center'>email: wuyichao71@126.com</div>\n","site":{"data":{}},"excerpt":"","more":"<div align='center'>email: wuyichao71@126.com</div>\n"},{"title":"gallery","date":"2022-12-07T17:12:12.000Z","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate: 2022-12-08 01:12:12\n---\n","updated":"2022-12-07T17:12:12.167Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"clbdwthip0001udvqfk4bewr8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-12-07T17:15:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-08 01:15:04\ntype: \"tags\"\n---\n","updated":"2022-12-07T17:38:25.777Z","path":"tags/index.html","_id":"clbdwvxcc0000v0vq507x31rq","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-12-07T17:16:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-12-08 01:16:42\ntype: \"categories\"\n---\n","updated":"2022-12-07T17:35:31.770Z","path":"categories/index.html","_id":"clbdx0o9f0000y3vqcror4931","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2022-12-07T17:17:50.000Z","mathjax":true,"_content":"# 2022-12-29\n转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。  \n\n\n# 2022-12-16  \n暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。  \n\n其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。  \n\n最近发现mendeley真难用，装了一天就卸载了，还是用zotero。\n\n数学分析已经学到了函数极限部分，从$\\epsilon-N$语言到了$\\epsilon-\\delta$语言。\n\nSICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。\n<!--more-->","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2022-12-08 01:17:50\nmathjax: true\n---\n# 2022-12-29\n转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。  \n\n\n# 2022-12-16  \n暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。  \n\n其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。  \n\n最近发现mendeley真难用，装了一天就卸载了，还是用zotero。\n\n数学分析已经学到了函数极限部分，从$\\epsilon-N$语言到了$\\epsilon-\\delta$语言。\n\nSICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。\n<!--more-->","updated":"2022-12-29T14:17:30.765Z","path":"schedule/index.html","_id":"clbdx0oa70001y3vq6404hnnu","comments":1,"layout":"page","content":"<h1 id=\"section\">2022-12-29</h1>\r\n<p>转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。</p>\r\n<h1 id=\"section-1\">2022-12-16</h1>\r\n<p>暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。</p>\r\n<p>其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。</p>\r\n<p>最近发现mendeley真难用，装了一天就卸载了，还是用zotero。</p>\r\n<p>数学分析已经学到了函数极限部分，从<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.693ex\" height=\"1.731ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 2516.4 765\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(628.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1628.4,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></svg></mjx-container></span>语言到了<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.689ex\" height=\"1.808ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -717 2072.4 799\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(628.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1628.4,0)\"><path data-c=\"1D6FF\" d=\"M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z\"></path></g></g></g></svg></mjx-container></span>语言。</p>\r\n<p>SICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。 <span id=\"more\"></span></p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"section\">2022-12-29</h1>\r\n<p>转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。</p>\r\n<h1 id=\"section-1\">2022-12-16</h1>\r\n<p>暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。</p>\r\n<p>其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。</p>\r\n<p>最近发现mendeley真难用，装了一天就卸载了，还是用zotero。</p>\r\n<p>数学分析已经学到了函数极限部分，从<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.693ex\" height=\"1.731ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 2516.4 765\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(628.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1628.4,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></g></g></svg></mjx-container></span>语言到了<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.689ex\" height=\"1.808ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -717 2072.4 799\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(628.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1628.4,0)\"><path data-c=\"1D6FF\" d=\"M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z\"></path></g></g></g></svg></mjx-container></span>语言。</p>\r\n<p>SICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。","more":"</p>"}],"Post":[{"title":"数学分析学习","date":"2022-12-07T14:58:26.000Z","_content":"<!-- # 数学分析学习 -->\n最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。  \n想到这里，顿时豁然开朗，原来我应该从头开始学数学。  \n\n当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  \n\n为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本[《数学分析讲义》](https://www.overleaf.com/read/pddprfvnrrkv)。希望能在学习和写讲义的过程中有所收获。  \n\n<!--more-->\n并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n而另一个则是Maki's lab的Ayumu的教程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>\n","source":"_posts/数学分析学习.md","raw":"---\ntitle: 数学分析学习\ndate: 2022-12-07 22:58:26\ncategories:\n    - 数学\ntags:\n    - 数学分析\n---\n<!-- # 数学分析学习 -->\n最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。  \n想到这里，顿时豁然开朗，原来我应该从头开始学数学。  \n\n当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  \n\n为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本[《数学分析讲义》](https://www.overleaf.com/read/pddprfvnrrkv)。希望能在学习和写讲义的过程中有所收获。  \n\n<!--more-->\n并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n而另一个则是Maki's lab的Ayumu的教程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>\n","slug":"数学分析学习","published":1,"updated":"2022-12-15T04:32:34.468Z","_id":"clbds0fi200001qvq80qo3lsh","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- # 数学分析学习 -->\n<p>最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。<br>想到这里，顿时豁然开朗，原来我应该从头开始学数学。  </p>\n<p>当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  </p>\n<p>为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本<a href=\"https://www.overleaf.com/read/pddprfvnrrkv\">《数学分析讲义》</a>。希望能在学习和写讲义的过程中有所收获。  </p>\n<span id=\"more\"></span>\n<p>并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n<p>而另一个则是Maki’s lab的Ayumu的教程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>\n","site":{"data":{}},"excerpt":"<!-- # 数学分析学习 -->\n<p>最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。<br>想到这里，顿时豁然开朗，原来我应该从头开始学数学。  </p>\n<p>当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  </p>\n<p>为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本<a href=\"https://www.overleaf.com/read/pddprfvnrrkv\">《数学分析讲义》</a>。希望能在学习和写讲义的过程中有所收获。  </p>","more":"<p>并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n<p>而另一个则是Maki’s lab的Ayumu的教程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>"},{"title":"使用Modeller补缺失残基","date":"2022-12-07T19:19:31.000Z","_content":"写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把[使用modeller补全缺失残基](https://salilab.org/modeller/wiki/Missing_residues)的网页放在这里。  \n\n我们以[4GNX](https://files.rcsb.org/download/4GNX.pdb)为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为`4gnx_half.pdb`。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的`REMARK 465`中记录了缺失的残基序号和类型，pdb文件中的`SEQRES`也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  \n\n我们可以使用一下代码提取pdb文件中的序列信息：\n```python\nfrom modeller import *\n# Get the sequence of the 4gnx PDB file, and write to an alignment file\ncode = '4gnx'\n\ne = Environ()\nm = Model(e, file=code)\naln = Alignment(e)\naln.append_model(m, align_codes=code)\naln.write(file=code+'.seq')\n```\n<!--more-->\n用以上代码生成的序列文件`4gnx_half.seq`如下：\n```\n\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN\nISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA\nHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE\nNHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY\nGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS\nTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE\nNLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK\nLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt\ntttttttttttttttt*\n```\n从`REMARK 465`和`SEQRES`中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用`-`填补缺失残基的模板序列和一份完整序列，这两个序列可以写在`alignment.aln`文件中：\n```\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n>P1;4gnx_half_fill\nsequence:::::::::\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n```\n现在我们可以用Modeller中的['LoopModel' class](https://salilab.org/modeller/10.0/manual/node33.html)生成所有的残基，并对loop区域进行优化，代码如下：\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\na = LoopModel(env, alnfile = 'alignment.ali',\n              knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.loop.starting_model = 1\na.loop.ending_model   = 2\na.loop.md_level       = refine.fast\n\na.make()\n```\n使用该代码会生成一个使用model生成的结构(`a.starting_model = 1`和`a.ending_model = 1`)和两个使用loopmodel生成的结构(`a.loop.starting_model = 1`和`a.loop.ending_model = 2`)。如果我们要生成更多的结构，那么我们可以把`a.ending_model`和`a.loop.ending_model`设定为更大的值。  \n\n如果你不需要对loop进行优化，那么你可以选择`AutoModel`代替`LoopModel`，同时移除与loop相关的三个参数。  \n\n使用`LoopModel`和`AutoModel`补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置`select_atoms`方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写`residue_range`有可能需要重新编号。同时`residue_range`是包括最后一个列出的残基的。\n\n\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(AutoModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n如果使用的是`LoopModel`，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  \n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(LoopModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n    def select_loop_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n","source":"_posts/使用Modeller补缺失残基.md","raw":"---\ntitle: 使用Modeller补缺失残基\ndate: 2022-12-08 03:19:31\ncategories:\n    - 分子模拟\ntags:\n    - pdb预处理\n---\n写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把[使用modeller补全缺失残基](https://salilab.org/modeller/wiki/Missing_residues)的网页放在这里。  \n\n我们以[4GNX](https://files.rcsb.org/download/4GNX.pdb)为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为`4gnx_half.pdb`。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的`REMARK 465`中记录了缺失的残基序号和类型，pdb文件中的`SEQRES`也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  \n\n我们可以使用一下代码提取pdb文件中的序列信息：\n```python\nfrom modeller import *\n# Get the sequence of the 4gnx PDB file, and write to an alignment file\ncode = '4gnx'\n\ne = Environ()\nm = Model(e, file=code)\naln = Alignment(e)\naln.append_model(m, align_codes=code)\naln.write(file=code+'.seq')\n```\n<!--more-->\n用以上代码生成的序列文件`4gnx_half.seq`如下：\n```\n\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN\nISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA\nHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE\nNHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY\nGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS\nTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE\nNLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK\nLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt\ntttttttttttttttt*\n```\n从`REMARK 465`和`SEQRES`中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用`-`填补缺失残基的模板序列和一份完整序列，这两个序列可以写在`alignment.aln`文件中：\n```\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n>P1;4gnx_half_fill\nsequence:::::::::\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n```\n现在我们可以用Modeller中的['LoopModel' class](https://salilab.org/modeller/10.0/manual/node33.html)生成所有的残基，并对loop区域进行优化，代码如下：\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\na = LoopModel(env, alnfile = 'alignment.ali',\n              knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.loop.starting_model = 1\na.loop.ending_model   = 2\na.loop.md_level       = refine.fast\n\na.make()\n```\n使用该代码会生成一个使用model生成的结构(`a.starting_model = 1`和`a.ending_model = 1`)和两个使用loopmodel生成的结构(`a.loop.starting_model = 1`和`a.loop.ending_model = 2`)。如果我们要生成更多的结构，那么我们可以把`a.ending_model`和`a.loop.ending_model`设定为更大的值。  \n\n如果你不需要对loop进行优化，那么你可以选择`AutoModel`代替`LoopModel`，同时移除与loop相关的三个参数。  \n\n使用`LoopModel`和`AutoModel`补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置`select_atoms`方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写`residue_range`有可能需要重新编号。同时`residue_range`是包括最后一个列出的残基的。\n\n\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(AutoModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n如果使用的是`LoopModel`，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  \n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(LoopModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n    def select_loop_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n","slug":"使用Modeller补缺失残基","published":1,"updated":"2022-12-15T04:32:34.453Z","_id":"clbetkmpx0000scpv24l22241","comments":1,"layout":"post","photos":[],"link":"","content":"<p>写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把<a href=\"https://salilab.org/modeller/wiki/Missing_residues\">使用modeller补全缺失残基</a>的网页放在这里。  </p>\n<p>我们以<a href=\"https://files.rcsb.org/download/4GNX.pdb\">4GNX</a>为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为<code>4gnx_half.pdb</code>。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的<code>REMARK 465</code>中记录了缺失的残基序号和类型，pdb文件中的<code>SEQRES</code>也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  </p>\n<p>我们可以使用一下代码提取pdb文件中的序列信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># Get the sequence of the 4gnx PDB file, and write to an alignment file</span></span><br><span class=\"line\">code = <span class=\"string\">&#x27;4gnx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = Environ()</span><br><span class=\"line\">m = Model(e, file=code)</span><br><span class=\"line\">aln = Alignment(e)</span><br><span class=\"line\">aln.append_model(m, align_codes=code)</span><br><span class=\"line\">aln.write(file=code+<span class=\"string\">&#x27;.seq&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>用以上代码生成的序列文件<code>4gnx_half.seq</code>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN</span><br><span class=\"line\">ISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA</span><br><span class=\"line\">HLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE</span><br><span class=\"line\">NHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY</span><br><span class=\"line\">GELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS</span><br><span class=\"line\">TMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE</span><br><span class=\"line\">NLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK</span><br><span class=\"line\">LREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt</span><br><span class=\"line\">tttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>从<code>REMARK 465</code>和<code>SEQRES</code>中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用<code>-</code>填补缺失残基的模板序列和一份完整序列，这两个序列可以写在<code>alignment.aln</code>文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br><span class=\"line\">&gt;P1;4gnx_half_fill</span><br><span class=\"line\">sequence:::::::::</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>现在我们可以用Modeller中的<a href=\"https://salilab.org/modeller/10.0/manual/node33.html\">‘LoopModel’ class</a>生成所有的残基，并对loop区域进行优化，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a = LoopModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">              knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.loop.starting_model = <span class=\"number\">1</span></span><br><span class=\"line\">a.loop.ending_model   = <span class=\"number\">2</span></span><br><span class=\"line\">a.loop.md_level       = refine.fast</span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>使用该代码会生成一个使用model生成的结构(<code>a.starting_model = 1</code>和<code>a.ending_model = 1</code>)和两个使用loopmodel生成的结构(<code>a.loop.starting_model = 1</code>和<code>a.loop.ending_model = 2</code>)。如果我们要生成更多的结构，那么我们可以把<code>a.ending_model</code>和<code>a.loop.ending_model</code>设定为更大的值。  </p>\n<p>如果你不需要对loop进行优化，那么你可以选择<code>AutoModel</code>代替<code>LoopModel</code>，同时移除与loop相关的三个参数。  </p>\n<p>使用<code>LoopModel</code>和<code>AutoModel</code>补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置<code>select_atoms</code>方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写<code>residue_range</code>有可能需要重新编号。同时<code>residue_range</code>是包括最后一个列出的残基的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">AutoModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(self.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>如果使用的是<code>LoopModel</code>，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">LoopModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(self.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_loop_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(self.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把<a href=\"https://salilab.org/modeller/wiki/Missing_residues\">使用modeller补全缺失残基</a>的网页放在这里。  </p>\n<p>我们以<a href=\"https://files.rcsb.org/download/4GNX.pdb\">4GNX</a>为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为<code>4gnx_half.pdb</code>。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的<code>REMARK 465</code>中记录了缺失的残基序号和类型，pdb文件中的<code>SEQRES</code>也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  </p>\n<p>我们可以使用一下代码提取pdb文件中的序列信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># Get the sequence of the 4gnx PDB file, and write to an alignment file</span></span><br><span class=\"line\">code = <span class=\"string\">&#x27;4gnx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = Environ()</span><br><span class=\"line\">m = Model(e, file=code)</span><br><span class=\"line\">aln = Alignment(e)</span><br><span class=\"line\">aln.append_model(m, align_codes=code)</span><br><span class=\"line\">aln.write(file=code+<span class=\"string\">&#x27;.seq&#x27;</span>)</span><br></pre></td></tr></table></figure>","more":"<p>用以上代码生成的序列文件<code>4gnx_half.seq</code>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN</span><br><span class=\"line\">ISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA</span><br><span class=\"line\">HLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE</span><br><span class=\"line\">NHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY</span><br><span class=\"line\">GELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS</span><br><span class=\"line\">TMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE</span><br><span class=\"line\">NLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK</span><br><span class=\"line\">LREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt</span><br><span class=\"line\">tttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>从<code>REMARK 465</code>和<code>SEQRES</code>中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用<code>-</code>填补缺失残基的模板序列和一份完整序列，这两个序列可以写在<code>alignment.aln</code>文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br><span class=\"line\">&gt;P1;4gnx_half_fill</span><br><span class=\"line\">sequence:::::::::</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>现在我们可以用Modeller中的<a href=\"https://salilab.org/modeller/10.0/manual/node33.html\">‘LoopModel’ class</a>生成所有的残基，并对loop区域进行优化，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a = LoopModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">              knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.loop.starting_model = <span class=\"number\">1</span></span><br><span class=\"line\">a.loop.ending_model   = <span class=\"number\">2</span></span><br><span class=\"line\">a.loop.md_level       = refine.fast</span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>使用该代码会生成一个使用model生成的结构(<code>a.starting_model = 1</code>和<code>a.ending_model = 1</code>)和两个使用loopmodel生成的结构(<code>a.loop.starting_model = 1</code>和<code>a.loop.ending_model = 2</code>)。如果我们要生成更多的结构，那么我们可以把<code>a.ending_model</code>和<code>a.loop.ending_model</code>设定为更大的值。  </p>\n<p>如果你不需要对loop进行优化，那么你可以选择<code>AutoModel</code>代替<code>LoopModel</code>，同时移除与loop相关的三个参数。  </p>\n<p>使用<code>LoopModel</code>和<code>AutoModel</code>补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置<code>select_atoms</code>方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写<code>residue_range</code>有可能需要重新编号。同时<code>residue_range</code>是包括最后一个列出的残基的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">AutoModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(self.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>如果使用的是<code>LoopModel</code>，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">LoopModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(self.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_loop_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(self.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         self.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>"},{"title":"计算机程序的构造与解释","date":"2022-12-10T15:37:21.000Z","_content":"我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。","source":"_posts/计算机程序的构造与解释.md","raw":"---\ntitle: 计算机程序的构造与解释\ndate: 2022-12-10 23:37:21\ncategories:\n    - 计算机\ntags:\n    - 计算机程序的构造与解释\n    - python\n---\n我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。","slug":"计算机程序的构造与解释","published":1,"updated":"2022-12-10T15:40:31.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbqkri890000abvq4pmo6gvo","content":"<p>我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。</p>\n"},{"title":"制作小分子力场","date":"2022-12-29T13:24:34.000Z","mathjax":true,"_content":"\n新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。  \n\n# 获得PDB结构\n这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从[PDB库](https://www.rcsb.org/)中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为[ACT](https://www.rcsb.org/ligand/ACT)和[3P8](https://www.rcsb.org/ligand/3P8)。在网页上可以下载到`.sdf`文件，接下来可以使用openbabel将`.sdf`文件转化为`.pdb`坐标。\n![使用openbebal转化文件格式](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png)\n<!-- ![使用openbebal转化文件格式](openbabel.png) -->\n<!--more-->\n这样就获得了对应的`.pdb`文件。  \n\n此时由openbabel生成的acetate的`.pdb`文件如下:\n```\nCOMPND    ACT \nAUTHOR    GENERATED BY OPEN BABEL 3.1.1\nHETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  \nHETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  \nHETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-\nHETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  \nHETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  \nHETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  \nHETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  \nCONECT    1    2    2    3    4                                       \nCONECT    2    1    1                                                 \nCONECT    3    1                                                      \nCONECT    4    1    5    6    7                                       \nCONECT    5    4                                                      \nCONECT    6    4                                                      \nCONECT    7    4                                                      \nMASTER        0    0    0    0    0    0    0    0    7    0    7    0\nEND\n```\n`antechamber`对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:\n```\nATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  \nATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  \nATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O\nATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  \nATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  \nATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  \nATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H \n```\n\n# AMBER力场(不使用Gaussian)\n对于amber力场，可以使用AmberTools中的`antechamber`软件生成小分子的gaff力场。在生成`.mol2`文件之前，我们先对`.pdb`文件进行预处理。  \n\n首先先用tleap转化下原子的名字, `tleap.in`文件中的内容如下:\n```\nsource leaprc.protein.ff14SB\nTMP = loadpdb ACT.pdb\nsavepdb TMP ACT_tleap.pdb\nquit\n```\n用以下的命令生成`ACT_tleap.pdb`:\n```bash\ntleap -f tleap.in\n```\n之后再用`reduce`补充H原子(实际上对于小分子即使手动删除貌似也不会补充):\n```bash\nreduce ACT_tleap.pdb >ACT_h.pdb\n```\n之后我们可以使用`antechamber`软件生成`.mol2`文件，命令如下:\n```bash\nantechamber -i ACT_h.pdb -fi pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1\n```\n上面各个选项的意思分别为:  \n  1. `-i ACT_h.pdb`: 指定输入3D结构文件名称。  \n  2. `-fi pdb`: 指定输入文件格式为PDB格式。  \n  3. `-o ACT.mol2`: 指定输出的文件名称。  \n  4. `-fo mol2`: 指定输出文件类型为`.mol2`类型。  \n  5. `-c bcc`: 指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。  \n  6. `-s 2`: 指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(`2`)。  \n  7. `-nc -1`: 指定净电荷数目为`-1`。  \n\n`ACT.mol2`文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成`.prmtop`和`.inpcrd`文件。生成的`.mol2`文件如下:\n```\n@<TRIPOS>MOLECULE\nACT\n    7     6     1     0     0\nSMALL\nbcc\n\n\n@<TRIPOS>ATOM\n      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600\n      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300\n      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300\n      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100\n      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033\n      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033\n      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033\n@<TRIPOS>BOND\n     1     1     2 1   \n     2     1     3 1   \n     3     1     4 1   \n     4     4     5 1   \n     5     4     6 1   \n     6     4     7 1   \n@<TRIPOS>SUBSTRUCTURE\n     1 ACT         1 TEMP              0 ****  ****    0 ROOT\n```\n`.mol`文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且`.mol2`文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在`$AMBERHOME/dat/leap/parm/gaff.dat`中定义。  \n\n参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用`parmchk2`检查缺失的参数，命令如下:\n```bash\nparmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod\n```\n执行以上文件会生成`ACT.frcmod`文件。这是一个参数文件, 能够载入LEaP中用于添加缺失的参数, 这样就能包含所有缺失的参数。在模拟之前，需要仔细检查`ACT.frcmod`文件。生成的`ACT.frcmod`文件如下:\n```\nRemark line goes here\nMASS\n\nBOND\n\nANGLE\n\nDIHE\n\nIMPROPER\nc3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)\n\nNONBON\n```\n可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。  \n\n现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:\n```\ntleap -f leaprc.protein.ff14SB\n```\n\n之后在tleap中导入GAFF力场:\n```\nsource leaprc.gaff\n```\n现在导入acetate单元:\n```\nACT = loadmol2 ACT.mol2\n```\n此时在`tleap`中键入`list`，可以看到新增加的`ACT`单元:\n```\n> ACT = loadmol2 ACT.mol2\nLoading Mol2 file: ./ACT.mol2\nReading MOLECULE named ACT\n> list\nACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA\nCARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY\nCHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS\nCMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL\nCYM       CYS       CYX       GLH       GLN       GLU       GLY       HID\nHIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS\nMET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN\nNGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE\nNLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR\nNTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP\nTYR       VAL       frcmod14SBgaff      parm10\n```\n检查`ACT`单元:\n```\n> check ACT\nChecking 'ACT'....\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\nChecking parameters for unit 'ACT'.\nChecking for bond parameters.\nChecking for angle parameters.\ncheck:  Warnings: 1\nUnit is OK.\n```\n可以看到并没有缺失参数。现在我们再导入`ACT.frcmod`文件:\n```\nloadamberparams ACT.frcmod\n```\n接下来就可以将生成的残基导出了:\n```\n> saveoff ACT ACT.lib\n Creating ACT.lib\nBuilding topology.\nBuilding atom parameters.\n> saveamberparm ACT ACT.prmtop ACT.inpcrd\nChecking Unit.\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\n\nNote: Ignoring the warning from Unit Checking.\n\nBuilding topology.\nBuilding atom parameters.\nBuilding bond parameters.\nBuilding angle parameters.\nBuilding proper torsion parameters.\nBuilding improper torsion parameters.\n total 1 improper torsion applied\nBuilding H-Bond parameters.\nIncorporating Non-Bonded adjustments.\nNot Marking per-residue atom chain types.\nMarking per-residue atom chain types.\n  (Residues lacking connect0/connect1 -\n   these don't have chain types marked:\n\n        res     total affected\n\n        ACT     1\n  )\n (no restraints)\n>\n```\n此时有了`ACT.prmtop`和`ACT.inpcrd`, 可以用这两个文件生成gromacs需要的`ACT.top`和`ACT.gro`。这可以用`amb2gro_top_gro.py`完成:\n```\namb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb\n```\n这样我们就有了gromacs可用的`.top`文件和`.gro`文件。\n\n\n>TIPS: 在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。\n```\nWarning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]\n```\n\n# AMBER力场(使用Gaussian)\n使用gaussian来生成精确的静电分布。这里需要提及, g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。\n\n## gaussian的安装\n首先进行gaussian的安装。[gaussian的安装方法](http://sobereva.com/439)在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为`g16.tar.gz`，则使用以下命令进行解压:\n```shell\ntar -xvf g16.tar.gz\n```\n假设压缩后的`g16`文件夹放置在`/home/hapo/`文件夹下。先在`/home/hapo/g16`文件夹下新建文件夹`scratch`。接下来在`.bashrc`文件中添加如下内容:\n```bash\nexport g16root=/home/hapo\nexport GAUSS_SCRDIR=/home/hapo/g16/scratch\nsource /home/hapo/g16/bsd/g16.profile\n```\n接下来在进入`/home/hapo/g16`中更改文件的权限:\n```bash\nchmod 750 -R *\n```\n加下来只要重开终端即可运行g16。\n\n## 生成mol2文件\n这一步使用[别人的脚本](https://github.com/tamaswells/GMX)，使用方法记录在该[Jerkwin博客网页中](https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/)。  \n\n首先生成gaussian程序的输入文件:\n```bash\npython pre.py acetate.pdb -1\n```\n之后运行gaussian程序:\n```bash\ng16 <ACT.gjf >ACT.out\n```\n最后运行`post.py`程序:\n```bash\npython post.py\n```\n以上命令最终会生成`ACT.mol2`文件，其中的静电荷是用gaussian计算后拟合得到的。  \n\n最后我们再用以上提及的`tleap`和`amb2gro_top_gro.py`即可生成gromacs的`.top`和`.gro`文件。\n\n\n# OPLS-AA力场(使用LigParGen)\n[LigParGen](http://zarbi.chem.yale.edu/ligpargen/)可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png)\n点击`Submit Molecule`之后，只要下载gromacs的`.top`和`.gro`文件即可。关于使用LigParGen生成lammaps力场文件的方法[在此](https://longkunxuluke.github.io/posts/2020/11/blog-post-4/)。\n\n\n# OPLS-AA力场(使用TPPMKTOP)\n[TPPMKTOP](http://erg.biophys.msu.ru/tpp/)也可以用于生成OPLS-AA力场，并且和[文献](https://pubs.acs.org/doi/10.1021/ja058637b)中的静电值最为接近，该文献可能是使用该程序生成的。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png)\n同样，只要上传相应的PDB文件即可。\n\n# 构建gromacs拓扑文件\n为了能够用gromacs进行模拟，先构建gromacs可用的`.top`文件。小分子的力场放在`molecule`文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在`heavywater`文件夹中。首先先在`topol.top`文件中写下如下内容:\n```\n#include \"amber14sb_parmbsc1.ff/forcefield.itp\"\n#include \"heavywater/tip3p-hw.itp\"\n#include \"molecule/ACT.itp\"\n#include \"molecule/MLM.itp\"\n#include \"amber14sb_parmbsc1.ff/ions.itp\"\n\n\n[ System ]\nsmall molecule in water\n\n[ Molecules ]\n```\n以下是一种外门邪道的构建`.top`和`.gro`的方法。`solvate`可以用来给空盒子填充水，可以这样写:\n```bash\ngmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top\n```\n这样子可以生成一个`conf.gro`文件，盒子大小为$2.5nm \\times 2.5 nm \\times 25 nm$，其中填充了水分子。\n\n同时`solvate`程序可以通过`-maxsol`来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:\n```bash\ngmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top\ngmx solvate -cs ./molecule/MLM.gro -cp cp.gro -o cp2.gro -maxsol 1 -p topol.top\ngmx solvate -cs spc216.gro -cp cp2.gro -o conf.gro -p topol.top\n```\n\n比较正确的做法应该用`insert-molecules`来插入小分子，用`solvate`来填充水分子:\n```bash\ngmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2\ngmx solvate -cs spc216.gro -cp box.gro -o conf.gro -p topol.top\n```","source":"_posts/制作小分子力场.md","raw":"---\ntitle: 制作小分子力场\ndate: 2022-12-29 21:24:34\nmathjax: true\ncategories:\n    - 分子模拟\ntags:\n    - 力场构建\n---\n\n新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。  \n\n# 获得PDB结构\n这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从[PDB库](https://www.rcsb.org/)中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为[ACT](https://www.rcsb.org/ligand/ACT)和[3P8](https://www.rcsb.org/ligand/3P8)。在网页上可以下载到`.sdf`文件，接下来可以使用openbabel将`.sdf`文件转化为`.pdb`坐标。\n![使用openbebal转化文件格式](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png)\n<!-- ![使用openbebal转化文件格式](openbabel.png) -->\n<!--more-->\n这样就获得了对应的`.pdb`文件。  \n\n此时由openbabel生成的acetate的`.pdb`文件如下:\n```\nCOMPND    ACT \nAUTHOR    GENERATED BY OPEN BABEL 3.1.1\nHETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  \nHETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  \nHETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-\nHETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  \nHETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  \nHETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  \nHETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  \nCONECT    1    2    2    3    4                                       \nCONECT    2    1    1                                                 \nCONECT    3    1                                                      \nCONECT    4    1    5    6    7                                       \nCONECT    5    4                                                      \nCONECT    6    4                                                      \nCONECT    7    4                                                      \nMASTER        0    0    0    0    0    0    0    0    7    0    7    0\nEND\n```\n`antechamber`对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:\n```\nATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  \nATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  \nATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O\nATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  \nATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  \nATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  \nATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H \n```\n\n# AMBER力场(不使用Gaussian)\n对于amber力场，可以使用AmberTools中的`antechamber`软件生成小分子的gaff力场。在生成`.mol2`文件之前，我们先对`.pdb`文件进行预处理。  \n\n首先先用tleap转化下原子的名字, `tleap.in`文件中的内容如下:\n```\nsource leaprc.protein.ff14SB\nTMP = loadpdb ACT.pdb\nsavepdb TMP ACT_tleap.pdb\nquit\n```\n用以下的命令生成`ACT_tleap.pdb`:\n```bash\ntleap -f tleap.in\n```\n之后再用`reduce`补充H原子(实际上对于小分子即使手动删除貌似也不会补充):\n```bash\nreduce ACT_tleap.pdb >ACT_h.pdb\n```\n之后我们可以使用`antechamber`软件生成`.mol2`文件，命令如下:\n```bash\nantechamber -i ACT_h.pdb -fi pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1\n```\n上面各个选项的意思分别为:  \n  1. `-i ACT_h.pdb`: 指定输入3D结构文件名称。  \n  2. `-fi pdb`: 指定输入文件格式为PDB格式。  \n  3. `-o ACT.mol2`: 指定输出的文件名称。  \n  4. `-fo mol2`: 指定输出文件类型为`.mol2`类型。  \n  5. `-c bcc`: 指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。  \n  6. `-s 2`: 指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(`2`)。  \n  7. `-nc -1`: 指定净电荷数目为`-1`。  \n\n`ACT.mol2`文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成`.prmtop`和`.inpcrd`文件。生成的`.mol2`文件如下:\n```\n@<TRIPOS>MOLECULE\nACT\n    7     6     1     0     0\nSMALL\nbcc\n\n\n@<TRIPOS>ATOM\n      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600\n      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300\n      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300\n      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100\n      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033\n      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033\n      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033\n@<TRIPOS>BOND\n     1     1     2 1   \n     2     1     3 1   \n     3     1     4 1   \n     4     4     5 1   \n     5     4     6 1   \n     6     4     7 1   \n@<TRIPOS>SUBSTRUCTURE\n     1 ACT         1 TEMP              0 ****  ****    0 ROOT\n```\n`.mol`文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且`.mol2`文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在`$AMBERHOME/dat/leap/parm/gaff.dat`中定义。  \n\n参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用`parmchk2`检查缺失的参数，命令如下:\n```bash\nparmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod\n```\n执行以上文件会生成`ACT.frcmod`文件。这是一个参数文件, 能够载入LEaP中用于添加缺失的参数, 这样就能包含所有缺失的参数。在模拟之前，需要仔细检查`ACT.frcmod`文件。生成的`ACT.frcmod`文件如下:\n```\nRemark line goes here\nMASS\n\nBOND\n\nANGLE\n\nDIHE\n\nIMPROPER\nc3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)\n\nNONBON\n```\n可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。  \n\n现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:\n```\ntleap -f leaprc.protein.ff14SB\n```\n\n之后在tleap中导入GAFF力场:\n```\nsource leaprc.gaff\n```\n现在导入acetate单元:\n```\nACT = loadmol2 ACT.mol2\n```\n此时在`tleap`中键入`list`，可以看到新增加的`ACT`单元:\n```\n> ACT = loadmol2 ACT.mol2\nLoading Mol2 file: ./ACT.mol2\nReading MOLECULE named ACT\n> list\nACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA\nCARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY\nCHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS\nCMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL\nCYM       CYS       CYX       GLH       GLN       GLU       GLY       HID\nHIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS\nMET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN\nNGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE\nNLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR\nNTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP\nTYR       VAL       frcmod14SBgaff      parm10\n```\n检查`ACT`单元:\n```\n> check ACT\nChecking 'ACT'....\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\nChecking parameters for unit 'ACT'.\nChecking for bond parameters.\nChecking for angle parameters.\ncheck:  Warnings: 1\nUnit is OK.\n```\n可以看到并没有缺失参数。现在我们再导入`ACT.frcmod`文件:\n```\nloadamberparams ACT.frcmod\n```\n接下来就可以将生成的残基导出了:\n```\n> saveoff ACT ACT.lib\n Creating ACT.lib\nBuilding topology.\nBuilding atom parameters.\n> saveamberparm ACT ACT.prmtop ACT.inpcrd\nChecking Unit.\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\n\nNote: Ignoring the warning from Unit Checking.\n\nBuilding topology.\nBuilding atom parameters.\nBuilding bond parameters.\nBuilding angle parameters.\nBuilding proper torsion parameters.\nBuilding improper torsion parameters.\n total 1 improper torsion applied\nBuilding H-Bond parameters.\nIncorporating Non-Bonded adjustments.\nNot Marking per-residue atom chain types.\nMarking per-residue atom chain types.\n  (Residues lacking connect0/connect1 -\n   these don't have chain types marked:\n\n        res     total affected\n\n        ACT     1\n  )\n (no restraints)\n>\n```\n此时有了`ACT.prmtop`和`ACT.inpcrd`, 可以用这两个文件生成gromacs需要的`ACT.top`和`ACT.gro`。这可以用`amb2gro_top_gro.py`完成:\n```\namb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb\n```\n这样我们就有了gromacs可用的`.top`文件和`.gro`文件。\n\n\n>TIPS: 在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。\n```\nWarning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]\n```\n\n# AMBER力场(使用Gaussian)\n使用gaussian来生成精确的静电分布。这里需要提及, g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。\n\n## gaussian的安装\n首先进行gaussian的安装。[gaussian的安装方法](http://sobereva.com/439)在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为`g16.tar.gz`，则使用以下命令进行解压:\n```shell\ntar -xvf g16.tar.gz\n```\n假设压缩后的`g16`文件夹放置在`/home/hapo/`文件夹下。先在`/home/hapo/g16`文件夹下新建文件夹`scratch`。接下来在`.bashrc`文件中添加如下内容:\n```bash\nexport g16root=/home/hapo\nexport GAUSS_SCRDIR=/home/hapo/g16/scratch\nsource /home/hapo/g16/bsd/g16.profile\n```\n接下来在进入`/home/hapo/g16`中更改文件的权限:\n```bash\nchmod 750 -R *\n```\n加下来只要重开终端即可运行g16。\n\n## 生成mol2文件\n这一步使用[别人的脚本](https://github.com/tamaswells/GMX)，使用方法记录在该[Jerkwin博客网页中](https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/)。  \n\n首先生成gaussian程序的输入文件:\n```bash\npython pre.py acetate.pdb -1\n```\n之后运行gaussian程序:\n```bash\ng16 <ACT.gjf >ACT.out\n```\n最后运行`post.py`程序:\n```bash\npython post.py\n```\n以上命令最终会生成`ACT.mol2`文件，其中的静电荷是用gaussian计算后拟合得到的。  \n\n最后我们再用以上提及的`tleap`和`amb2gro_top_gro.py`即可生成gromacs的`.top`和`.gro`文件。\n\n\n# OPLS-AA力场(使用LigParGen)\n[LigParGen](http://zarbi.chem.yale.edu/ligpargen/)可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png)\n点击`Submit Molecule`之后，只要下载gromacs的`.top`和`.gro`文件即可。关于使用LigParGen生成lammaps力场文件的方法[在此](https://longkunxuluke.github.io/posts/2020/11/blog-post-4/)。\n\n\n# OPLS-AA力场(使用TPPMKTOP)\n[TPPMKTOP](http://erg.biophys.msu.ru/tpp/)也可以用于生成OPLS-AA力场，并且和[文献](https://pubs.acs.org/doi/10.1021/ja058637b)中的静电值最为接近，该文献可能是使用该程序生成的。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png)\n同样，只要上传相应的PDB文件即可。\n\n# 构建gromacs拓扑文件\n为了能够用gromacs进行模拟，先构建gromacs可用的`.top`文件。小分子的力场放在`molecule`文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在`heavywater`文件夹中。首先先在`topol.top`文件中写下如下内容:\n```\n#include \"amber14sb_parmbsc1.ff/forcefield.itp\"\n#include \"heavywater/tip3p-hw.itp\"\n#include \"molecule/ACT.itp\"\n#include \"molecule/MLM.itp\"\n#include \"amber14sb_parmbsc1.ff/ions.itp\"\n\n\n[ System ]\nsmall molecule in water\n\n[ Molecules ]\n```\n以下是一种外门邪道的构建`.top`和`.gro`的方法。`solvate`可以用来给空盒子填充水，可以这样写:\n```bash\ngmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top\n```\n这样子可以生成一个`conf.gro`文件，盒子大小为$2.5nm \\times 2.5 nm \\times 25 nm$，其中填充了水分子。\n\n同时`solvate`程序可以通过`-maxsol`来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:\n```bash\ngmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top\ngmx solvate -cs ./molecule/MLM.gro -cp cp.gro -o cp2.gro -maxsol 1 -p topol.top\ngmx solvate -cs spc216.gro -cp cp2.gro -o conf.gro -p topol.top\n```\n\n比较正确的做法应该用`insert-molecules`来插入小分子，用`solvate`来填充水分子:\n```bash\ngmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2\ngmx solvate -cs spc216.gro -cp box.gro -o conf.gro -p topol.top\n```","slug":"制作小分子力场","published":1,"updated":"2023-02-06T12:40:04.782Z","_id":"clclmimzw0000ugvq80hf94vc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。</p>\n<h1 id=\"获得pdb结构\">获得PDB结构</h1>\n<p>这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从<a href=\"https://www.rcsb.org/\">PDB库</a>中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为<a href=\"https://www.rcsb.org/ligand/ACT\">ACT</a>和<a href=\"https://www.rcsb.org/ligand/3P8\">3P8</a>。在网页上可以下载到<code>.sdf</code>文件，接下来可以使用openbabel将<code>.sdf</code>文件转化为<code>.pdb</code>坐标。\n<img src=\"/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png\" class=\"\" title=\"使用openbebal转化文件格式\"> <!-- ![使用openbebal转化文件格式](openbabel.png) -->\n<span id=\"more\"></span> 这样就获得了对应的<code>.pdb</code>文件。</p>\n<p>此时由openbabel生成的acetate的<code>.pdb</code>文件如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMPND    ACT </span><br><span class=\"line\">AUTHOR    GENERATED BY OPEN BABEL 3.1.1</span><br><span class=\"line\">HETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">HETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-</span><br><span class=\"line\">HETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">HETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">HETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">CONECT    1    2    2    3    4                                       </span><br><span class=\"line\">CONECT    2    1    1                                                 </span><br><span class=\"line\">CONECT    3    1                                                      </span><br><span class=\"line\">CONECT    4    1    5    6    7                                       </span><br><span class=\"line\">CONECT    5    4                                                      </span><br><span class=\"line\">CONECT    6    4                                                      </span><br><span class=\"line\">CONECT    7    4                                                      </span><br><span class=\"line\">MASTER        0    0    0    0    0    0    0    0    7    0    7    0</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<code>antechamber</code>对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">ATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O</span><br><span class=\"line\">ATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">ATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">ATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H </span><br></pre></td></tr></table></figure></p>\n<h1 id=\"amber力场不使用gaussian\">AMBER力场(不使用Gaussian)</h1>\n<p>对于amber力场，可以使用AmberTools中的<code>antechamber</code>软件生成小分子的gaff力场。在生成<code>.mol2</code>文件之前，我们先对<code>.pdb</code>文件进行预处理。</p>\n<p>首先先用tleap转化下原子的名字, <code>tleap.in</code>文件中的内容如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.protein.ff14SB</span><br><span class=\"line\">TMP = loadpdb ACT.pdb</span><br><span class=\"line\">savepdb TMP ACT_tleap.pdb</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure> 用以下的命令生成<code>ACT_tleap.pdb</code>: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f tleap.in</span><br></pre></td></tr></table></figure>\n之后再用<code>reduce</code>补充H原子(实际上对于小分子即使手动删除貌似也不会补充):\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce ACT_tleap.pdb &gt;ACT_h.pdb</span><br></pre></td></tr></table></figure>\n之后我们可以使用<code>antechamber</code>软件生成<code>.mol2</code>文件，命令如下:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">antechamber -i ACT_h.pdb -<span class=\"keyword\">fi</span> pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1</span><br></pre></td></tr></table></figure> 上面各个选项的意思分别为:<br>\n1. <code>-i ACT_h.pdb</code>: 指定输入3D结构文件名称。<br>\n2. <code>-fi pdb</code>: 指定输入文件格式为PDB格式。<br>\n3. <code>-o ACT.mol2</code>: 指定输出的文件名称。<br>\n4. <code>-fo mol2</code>:\n指定输出文件类型为<code>.mol2</code>类型。<br>\n5. <code>-c bcc</code>:\n指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。<br>\n6. <code>-s 2</code>:\n指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(<code>2</code>)。<br>\n7. <code>-nc -1</code>: 指定净电荷数目为<code>-1</code>。</p>\n<p><code>ACT.mol2</code>文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成<code>.prmtop</code>和<code>.inpcrd</code>文件。生成的<code>.mol2</code>文件如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&lt;TRIPOS&gt;MOLECULE</span><br><span class=\"line\">ACT</span><br><span class=\"line\">    7     6     1     0     0</span><br><span class=\"line\">SMALL</span><br><span class=\"line\">bcc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@&lt;TRIPOS&gt;ATOM</span><br><span class=\"line\">      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600</span><br><span class=\"line\">      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100</span><br><span class=\"line\">      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033</span><br><span class=\"line\">      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">@&lt;TRIPOS&gt;BOND</span><br><span class=\"line\">     1     1     2 1   </span><br><span class=\"line\">     2     1     3 1   </span><br><span class=\"line\">     3     1     4 1   </span><br><span class=\"line\">     4     4     5 1   </span><br><span class=\"line\">     5     4     6 1   </span><br><span class=\"line\">     6     4     7 1   </span><br><span class=\"line\">@&lt;TRIPOS&gt;SUBSTRUCTURE</span><br><span class=\"line\">     1 ACT         1 TEMP              0 ****  ****    0 ROOT</span><br></pre></td></tr></table></figure>\n<code>.mol</code>文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且<code>.mol2</code>文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在<code>$AMBERHOME/dat/leap/parm/gaff.dat</code>中定义。</p>\n<p>参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用<code>parmchk2</code>检查缺失的参数，命令如下:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod</span><br></pre></td></tr></table></figure>\n执行以上文件会生成<code>ACT.frcmod</code>文件。这是一个参数文件,\n能够载入LEaP中用于添加缺失的参数,\n这样就能包含所有缺失的参数。在模拟之前，需要仔细检查<code>ACT.frcmod</code>文件。生成的<code>ACT.frcmod</code>文件如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Remark line goes here</span><br><span class=\"line\">MASS</span><br><span class=\"line\"></span><br><span class=\"line\">BOND</span><br><span class=\"line\"></span><br><span class=\"line\">ANGLE</span><br><span class=\"line\"></span><br><span class=\"line\">DIHE</span><br><span class=\"line\"></span><br><span class=\"line\">IMPROPER</span><br><span class=\"line\">c3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)</span><br><span class=\"line\"></span><br><span class=\"line\">NONBON</span><br></pre></td></tr></table></figure>\n可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。</p>\n<p>现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f leaprc.protein.ff14SB</span><br></pre></td></tr></table></figure></p>\n<p>之后在tleap中导入GAFF力场: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.gaff</span><br></pre></td></tr></table></figure> 现在导入acetate单元:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACT = loadmol2 ACT.mol2</span><br></pre></td></tr></table></figure>\n此时在<code>tleap</code>中键入<code>list</code>，可以看到新增加的<code>ACT</code>单元:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ACT = loadmol2 ACT.mol2</span><br><span class=\"line\">Loading Mol2 file: ./ACT.mol2</span><br><span class=\"line\">Reading MOLECULE named ACT</span><br><span class=\"line\">&gt; list</span><br><span class=\"line\">ACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA</span><br><span class=\"line\">CARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY</span><br><span class=\"line\">CHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS</span><br><span class=\"line\">CMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL</span><br><span class=\"line\">CYM       CYS       CYX       GLH       GLN       GLU       GLY       HID</span><br><span class=\"line\">HIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS</span><br><span class=\"line\">MET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN</span><br><span class=\"line\">NGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE</span><br><span class=\"line\">NLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR</span><br><span class=\"line\">NTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP</span><br><span class=\"line\">TYR       VAL       frcmod14SBgaff      parm10</span><br></pre></td></tr></table></figure> 检查<code>ACT</code>单元: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; check ACT</span><br><span class=\"line\">Checking 'ACT'....</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\">Checking parameters for unit 'ACT'.</span><br><span class=\"line\">Checking for bond parameters.</span><br><span class=\"line\">Checking for angle parameters.</span><br><span class=\"line\">check:  Warnings: 1</span><br><span class=\"line\">Unit is OK.</span><br></pre></td></tr></table></figure>\n可以看到并没有缺失参数。现在我们再导入<code>ACT.frcmod</code>文件:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadamberparams ACT.frcmod</span><br></pre></td></tr></table></figure> 接下来就可以将生成的残基导出了: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; saveoff ACT ACT.lib</span><br><span class=\"line\"> Creating ACT.lib</span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">&gt; saveamberparm ACT ACT.prmtop ACT.inpcrd</span><br><span class=\"line\">Checking Unit.</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\"></span><br><span class=\"line\">Note: Ignoring the warning from Unit Checking.</span><br><span class=\"line\"></span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">Building bond parameters.</span><br><span class=\"line\">Building angle parameters.</span><br><span class=\"line\">Building proper torsion parameters.</span><br><span class=\"line\">Building improper torsion parameters.</span><br><span class=\"line\"> total 1 improper torsion applied</span><br><span class=\"line\">Building H-Bond parameters.</span><br><span class=\"line\">Incorporating Non-Bonded adjustments.</span><br><span class=\"line\">Not Marking per-residue atom chain types.</span><br><span class=\"line\">Marking per-residue atom chain types.</span><br><span class=\"line\">  (Residues lacking connect0/connect1 -</span><br><span class=\"line\">   these don't have chain types marked:</span><br><span class=\"line\"></span><br><span class=\"line\">        res     total affected</span><br><span class=\"line\"></span><br><span class=\"line\">        ACT     1</span><br><span class=\"line\">  )</span><br><span class=\"line\"> (no restraints)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n此时有了<code>ACT.prmtop</code>和<code>ACT.inpcrd</code>,\n可以用这两个文件生成gromacs需要的<code>ACT.top</code>和<code>ACT.gro</code>。这可以用<code>amb2gro_top_gro.py</code>完成:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb</span><br></pre></td></tr></table></figure>\n这样我们就有了gromacs可用的<code>.top</code>文件和<code>.gro</code>文件。</p>\n<blockquote>\n<p>TIPS:\n在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"amber力场使用gaussian\">AMBER力场(使用Gaussian)</h1>\n<p>使用gaussian来生成精确的静电分布。这里需要提及,\ng09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。</p>\n<h2 id=\"gaussian的安装\">gaussian的安装</h2>\n<p>首先进行gaussian的安装。<a href=\"http://sobereva.com/439\">gaussian的安装方法</a>在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为<code>g16.tar.gz</code>，则使用以下命令进行解压:\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf g16.tar.gz</span><br></pre></td></tr></table></figure>\n假设压缩后的<code>g16</code>文件夹放置在<code>/home/hapo/</code>文件夹下。先在<code>/home/hapo/g16</code>文件夹下新建文件夹<code>scratch</code>。接下来在<code>.bashrc</code>文件中添加如下内容:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> g16root=/home/hapo</span><br><span class=\"line\"><span class=\"built_in\">export</span> GAUSS_SCRDIR=/home/hapo/g16/scratch</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/hapo/g16/bsd/g16.profile</span><br></pre></td></tr></table></figure> 接下来在进入<code>/home/hapo/g16</code>中更改文件的权限:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 750 -R *</span><br></pre></td></tr></table></figure> 加下来只要重开终端即可运行g16。</p>\n<h2 id=\"生成mol2文件\">生成mol2文件</h2>\n<p>这一步使用<a href=\"https://github.com/tamaswells/GMX\">别人的脚本</a>，使用方法记录在该<a href=\"https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/\">Jerkwin博客网页中</a>。</p>\n<p>首先生成gaussian程序的输入文件: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python pre.py acetate.pdb -1</span><br></pre></td></tr></table></figure> 之后运行gaussian程序:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g16 &lt;ACT.gjf &gt;ACT.out</span><br></pre></td></tr></table></figure> 最后运行<code>post.py</code>程序: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python post.py</span><br></pre></td></tr></table></figure>\n以上命令最终会生成<code>ACT.mol2</code>文件，其中的静电荷是用gaussian计算后拟合得到的。</p>\n<p>最后我们再用以上提及的<code>tleap</code>和<code>amb2gro_top_gro.py</code>即可生成gromacs的<code>.top</code>和<code>.gro</code>文件。</p>\n<h1 id=\"opls-aa力场使用ligpargen\">OPLS-AA力场(使用LigParGen)</h1>\n<p><a href=\"http://zarbi.chem.yale.edu/ligpargen/\">LigParGen</a>可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。\n<img src=\"/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png\" class=\"\" title=\"LigParGen网页\">\n点击<code>Submit Molecule</code>之后，只要下载gromacs的<code>.top</code>和<code>.gro</code>文件即可。关于使用LigParGen生成lammaps力场文件的方法<a href=\"https://longkunxuluke.github.io/posts/2020/11/blog-post-4/\">在此</a>。</p>\n<h1 id=\"opls-aa力场使用tppmktop\">OPLS-AA力场(使用TPPMKTOP)</h1>\n<p><a href=\"http://erg.biophys.msu.ru/tpp/\">TPPMKTOP</a>也可以用于生成OPLS-AA力场，并且和<a href=\"https://pubs.acs.org/doi/10.1021/ja058637b\">文献</a>中的静电值最为接近，该文献可能是使用该程序生成的。\n<img src=\"/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png\" class=\"\" title=\"LigParGen网页\"> 同样，只要上传相应的PDB文件即可。</p>\n<h1 id=\"构建gromacs拓扑文件\">构建gromacs拓扑文件</h1>\n<p>为了能够用gromacs进行模拟，先构建gromacs可用的<code>.top</code>文件。小分子的力场放在<code>molecule</code>文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在<code>heavywater</code>文件夹中。首先先在<code>topol.top</code>文件中写下如下内容:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include \"amber14sb_parmbsc1.ff/forcefield.itp\"</span><br><span class=\"line\">#include \"heavywater/tip3p-hw.itp\"</span><br><span class=\"line\">#include \"molecule/ACT.itp\"</span><br><span class=\"line\">#include \"molecule/MLM.itp\"</span><br><span class=\"line\">#include \"amber14sb_parmbsc1.ff/ions.itp\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[ System ]</span><br><span class=\"line\">small molecule in water</span><br><span class=\"line\"></span><br><span class=\"line\">[ Molecules ]</span><br></pre></td></tr></table></figure>\n以下是一种外门邪道的构建<code>.top</code>和<code>.gro</code>的方法。<code>solvate</code>可以用来给空盒子填充水，可以这样写:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top</span><br></pre></td></tr></table></figure>\n这样子可以生成一个<code>conf.gro</code>文件，盒子大小为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.608ex\" height=\"1.557ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 10434.9 688\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1278,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1878,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2978.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3978.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5256.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5856.4,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6956.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7956.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8956.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9556.9,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></span>，其中填充了水分子。</p>\n<p>同时<code>solvate</code>程序可以通过<code>-maxsol</code>来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top</span><br><span class=\"line\">gmx solvate -cs ./molecule/MLM.gro -<span class=\"built_in\">cp</span> cp.gro -o cp2.gro -maxsol 1 -p topol.top</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> cp2.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure></p>\n<p>比较正确的做法应该用<code>insert-molecules</code>来插入小分子，用<code>solvate</code>来填充水分子:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> box.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。</p>\n<h1 id=\"获得pdb结构\">获得PDB结构</h1>\n<p>这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从<a href=\"https://www.rcsb.org/\">PDB库</a>中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为<a href=\"https://www.rcsb.org/ligand/ACT\">ACT</a>和<a href=\"https://www.rcsb.org/ligand/3P8\">3P8</a>。在网页上可以下载到<code>.sdf</code>文件，接下来可以使用openbabel将<code>.sdf</code>文件转化为<code>.pdb</code>坐标。\n<img src=\"/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png\" class=\"\" title=\"使用openbebal转化文件格式\"> <!-- ![使用openbebal转化文件格式](openbabel.png) -->","more":"这样就获得了对应的<code>.pdb</code>文件。</p>\n<p>此时由openbabel生成的acetate的<code>.pdb</code>文件如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMPND    ACT </span><br><span class=\"line\">AUTHOR    GENERATED BY OPEN BABEL 3.1.1</span><br><span class=\"line\">HETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">HETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-</span><br><span class=\"line\">HETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">HETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">HETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">CONECT    1    2    2    3    4                                       </span><br><span class=\"line\">CONECT    2    1    1                                                 </span><br><span class=\"line\">CONECT    3    1                                                      </span><br><span class=\"line\">CONECT    4    1    5    6    7                                       </span><br><span class=\"line\">CONECT    5    4                                                      </span><br><span class=\"line\">CONECT    6    4                                                      </span><br><span class=\"line\">CONECT    7    4                                                      </span><br><span class=\"line\">MASTER        0    0    0    0    0    0    0    0    7    0    7    0</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<code>antechamber</code>对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">ATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O</span><br><span class=\"line\">ATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">ATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">ATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H </span><br></pre></td></tr></table></figure></p>\n<h1 id=\"amber力场不使用gaussian\">AMBER力场(不使用Gaussian)</h1>\n<p>对于amber力场，可以使用AmberTools中的<code>antechamber</code>软件生成小分子的gaff力场。在生成<code>.mol2</code>文件之前，我们先对<code>.pdb</code>文件进行预处理。</p>\n<p>首先先用tleap转化下原子的名字, <code>tleap.in</code>文件中的内容如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.protein.ff14SB</span><br><span class=\"line\">TMP = loadpdb ACT.pdb</span><br><span class=\"line\">savepdb TMP ACT_tleap.pdb</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure> 用以下的命令生成<code>ACT_tleap.pdb</code>: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f tleap.in</span><br></pre></td></tr></table></figure>\n之后再用<code>reduce</code>补充H原子(实际上对于小分子即使手动删除貌似也不会补充):\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce ACT_tleap.pdb &gt;ACT_h.pdb</span><br></pre></td></tr></table></figure>\n之后我们可以使用<code>antechamber</code>软件生成<code>.mol2</code>文件，命令如下:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">antechamber -i ACT_h.pdb -<span class=\"keyword\">fi</span> pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1</span><br></pre></td></tr></table></figure> 上面各个选项的意思分别为:<br>\n1. <code>-i ACT_h.pdb</code>: 指定输入3D结构文件名称。<br>\n2. <code>-fi pdb</code>: 指定输入文件格式为PDB格式。<br>\n3. <code>-o ACT.mol2</code>: 指定输出的文件名称。<br>\n4. <code>-fo mol2</code>:\n指定输出文件类型为<code>.mol2</code>类型。<br>\n5. <code>-c bcc</code>:\n指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。<br>\n6. <code>-s 2</code>:\n指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(<code>2</code>)。<br>\n7. <code>-nc -1</code>: 指定净电荷数目为<code>-1</code>。</p>\n<p><code>ACT.mol2</code>文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成<code>.prmtop</code>和<code>.inpcrd</code>文件。生成的<code>.mol2</code>文件如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&lt;TRIPOS&gt;MOLECULE</span><br><span class=\"line\">ACT</span><br><span class=\"line\">    7     6     1     0     0</span><br><span class=\"line\">SMALL</span><br><span class=\"line\">bcc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@&lt;TRIPOS&gt;ATOM</span><br><span class=\"line\">      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600</span><br><span class=\"line\">      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100</span><br><span class=\"line\">      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033</span><br><span class=\"line\">      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">@&lt;TRIPOS&gt;BOND</span><br><span class=\"line\">     1     1     2 1   </span><br><span class=\"line\">     2     1     3 1   </span><br><span class=\"line\">     3     1     4 1   </span><br><span class=\"line\">     4     4     5 1   </span><br><span class=\"line\">     5     4     6 1   </span><br><span class=\"line\">     6     4     7 1   </span><br><span class=\"line\">@&lt;TRIPOS&gt;SUBSTRUCTURE</span><br><span class=\"line\">     1 ACT         1 TEMP              0 ****  ****    0 ROOT</span><br></pre></td></tr></table></figure>\n<code>.mol</code>文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且<code>.mol2</code>文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在<code>$AMBERHOME/dat/leap/parm/gaff.dat</code>中定义。</p>\n<p>参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用<code>parmchk2</code>检查缺失的参数，命令如下:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod</span><br></pre></td></tr></table></figure>\n执行以上文件会生成<code>ACT.frcmod</code>文件。这是一个参数文件,\n能够载入LEaP中用于添加缺失的参数,\n这样就能包含所有缺失的参数。在模拟之前，需要仔细检查<code>ACT.frcmod</code>文件。生成的<code>ACT.frcmod</code>文件如下:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Remark line goes here</span><br><span class=\"line\">MASS</span><br><span class=\"line\"></span><br><span class=\"line\">BOND</span><br><span class=\"line\"></span><br><span class=\"line\">ANGLE</span><br><span class=\"line\"></span><br><span class=\"line\">DIHE</span><br><span class=\"line\"></span><br><span class=\"line\">IMPROPER</span><br><span class=\"line\">c3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)</span><br><span class=\"line\"></span><br><span class=\"line\">NONBON</span><br></pre></td></tr></table></figure>\n可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。</p>\n<p>现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f leaprc.protein.ff14SB</span><br></pre></td></tr></table></figure></p>\n<p>之后在tleap中导入GAFF力场: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.gaff</span><br></pre></td></tr></table></figure> 现在导入acetate单元:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACT = loadmol2 ACT.mol2</span><br></pre></td></tr></table></figure>\n此时在<code>tleap</code>中键入<code>list</code>，可以看到新增加的<code>ACT</code>单元:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ACT = loadmol2 ACT.mol2</span><br><span class=\"line\">Loading Mol2 file: ./ACT.mol2</span><br><span class=\"line\">Reading MOLECULE named ACT</span><br><span class=\"line\">&gt; list</span><br><span class=\"line\">ACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA</span><br><span class=\"line\">CARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY</span><br><span class=\"line\">CHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS</span><br><span class=\"line\">CMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL</span><br><span class=\"line\">CYM       CYS       CYX       GLH       GLN       GLU       GLY       HID</span><br><span class=\"line\">HIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS</span><br><span class=\"line\">MET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN</span><br><span class=\"line\">NGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE</span><br><span class=\"line\">NLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR</span><br><span class=\"line\">NTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP</span><br><span class=\"line\">TYR       VAL       frcmod14SBgaff      parm10</span><br></pre></td></tr></table></figure> 检查<code>ACT</code>单元: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; check ACT</span><br><span class=\"line\">Checking 'ACT'....</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\">Checking parameters for unit 'ACT'.</span><br><span class=\"line\">Checking for bond parameters.</span><br><span class=\"line\">Checking for angle parameters.</span><br><span class=\"line\">check:  Warnings: 1</span><br><span class=\"line\">Unit is OK.</span><br></pre></td></tr></table></figure>\n可以看到并没有缺失参数。现在我们再导入<code>ACT.frcmod</code>文件:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadamberparams ACT.frcmod</span><br></pre></td></tr></table></figure> 接下来就可以将生成的残基导出了: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; saveoff ACT ACT.lib</span><br><span class=\"line\"> Creating ACT.lib</span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">&gt; saveamberparm ACT ACT.prmtop ACT.inpcrd</span><br><span class=\"line\">Checking Unit.</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\"></span><br><span class=\"line\">Note: Ignoring the warning from Unit Checking.</span><br><span class=\"line\"></span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">Building bond parameters.</span><br><span class=\"line\">Building angle parameters.</span><br><span class=\"line\">Building proper torsion parameters.</span><br><span class=\"line\">Building improper torsion parameters.</span><br><span class=\"line\"> total 1 improper torsion applied</span><br><span class=\"line\">Building H-Bond parameters.</span><br><span class=\"line\">Incorporating Non-Bonded adjustments.</span><br><span class=\"line\">Not Marking per-residue atom chain types.</span><br><span class=\"line\">Marking per-residue atom chain types.</span><br><span class=\"line\">  (Residues lacking connect0/connect1 -</span><br><span class=\"line\">   these don't have chain types marked:</span><br><span class=\"line\"></span><br><span class=\"line\">        res     total affected</span><br><span class=\"line\"></span><br><span class=\"line\">        ACT     1</span><br><span class=\"line\">  )</span><br><span class=\"line\"> (no restraints)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n此时有了<code>ACT.prmtop</code>和<code>ACT.inpcrd</code>,\n可以用这两个文件生成gromacs需要的<code>ACT.top</code>和<code>ACT.gro</code>。这可以用<code>amb2gro_top_gro.py</code>完成:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb</span><br></pre></td></tr></table></figure>\n这样我们就有了gromacs可用的<code>.top</code>文件和<code>.gro</code>文件。</p>\n<blockquote>\n<p>TIPS:\n在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"amber力场使用gaussian\">AMBER力场(使用Gaussian)</h1>\n<p>使用gaussian来生成精确的静电分布。这里需要提及,\ng09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。</p>\n<h2 id=\"gaussian的安装\">gaussian的安装</h2>\n<p>首先进行gaussian的安装。<a href=\"http://sobereva.com/439\">gaussian的安装方法</a>在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为<code>g16.tar.gz</code>，则使用以下命令进行解压:\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf g16.tar.gz</span><br></pre></td></tr></table></figure>\n假设压缩后的<code>g16</code>文件夹放置在<code>/home/hapo/</code>文件夹下。先在<code>/home/hapo/g16</code>文件夹下新建文件夹<code>scratch</code>。接下来在<code>.bashrc</code>文件中添加如下内容:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> g16root=/home/hapo</span><br><span class=\"line\"><span class=\"built_in\">export</span> GAUSS_SCRDIR=/home/hapo/g16/scratch</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/hapo/g16/bsd/g16.profile</span><br></pre></td></tr></table></figure> 接下来在进入<code>/home/hapo/g16</code>中更改文件的权限:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 750 -R *</span><br></pre></td></tr></table></figure> 加下来只要重开终端即可运行g16。</p>\n<h2 id=\"生成mol2文件\">生成mol2文件</h2>\n<p>这一步使用<a href=\"https://github.com/tamaswells/GMX\">别人的脚本</a>，使用方法记录在该<a href=\"https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/\">Jerkwin博客网页中</a>。</p>\n<p>首先生成gaussian程序的输入文件: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python pre.py acetate.pdb -1</span><br></pre></td></tr></table></figure> 之后运行gaussian程序:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g16 &lt;ACT.gjf &gt;ACT.out</span><br></pre></td></tr></table></figure> 最后运行<code>post.py</code>程序: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python post.py</span><br></pre></td></tr></table></figure>\n以上命令最终会生成<code>ACT.mol2</code>文件，其中的静电荷是用gaussian计算后拟合得到的。</p>\n<p>最后我们再用以上提及的<code>tleap</code>和<code>amb2gro_top_gro.py</code>即可生成gromacs的<code>.top</code>和<code>.gro</code>文件。</p>\n<h1 id=\"opls-aa力场使用ligpargen\">OPLS-AA力场(使用LigParGen)</h1>\n<p><a href=\"http://zarbi.chem.yale.edu/ligpargen/\">LigParGen</a>可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。\n<img src=\"/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png\" class=\"\" title=\"LigParGen网页\">\n点击<code>Submit Molecule</code>之后，只要下载gromacs的<code>.top</code>和<code>.gro</code>文件即可。关于使用LigParGen生成lammaps力场文件的方法<a href=\"https://longkunxuluke.github.io/posts/2020/11/blog-post-4/\">在此</a>。</p>\n<h1 id=\"opls-aa力场使用tppmktop\">OPLS-AA力场(使用TPPMKTOP)</h1>\n<p><a href=\"http://erg.biophys.msu.ru/tpp/\">TPPMKTOP</a>也可以用于生成OPLS-AA力场，并且和<a href=\"https://pubs.acs.org/doi/10.1021/ja058637b\">文献</a>中的静电值最为接近，该文献可能是使用该程序生成的。\n<img src=\"/2022/12/29/%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png\" class=\"\" title=\"LigParGen网页\"> 同样，只要上传相应的PDB文件即可。</p>\n<h1 id=\"构建gromacs拓扑文件\">构建gromacs拓扑文件</h1>\n<p>为了能够用gromacs进行模拟，先构建gromacs可用的<code>.top</code>文件。小分子的力场放在<code>molecule</code>文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在<code>heavywater</code>文件夹中。首先先在<code>topol.top</code>文件中写下如下内容:\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include \"amber14sb_parmbsc1.ff/forcefield.itp\"</span><br><span class=\"line\">#include \"heavywater/tip3p-hw.itp\"</span><br><span class=\"line\">#include \"molecule/ACT.itp\"</span><br><span class=\"line\">#include \"molecule/MLM.itp\"</span><br><span class=\"line\">#include \"amber14sb_parmbsc1.ff/ions.itp\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[ System ]</span><br><span class=\"line\">small molecule in water</span><br><span class=\"line\"></span><br><span class=\"line\">[ Molecules ]</span><br></pre></td></tr></table></figure>\n以下是一种外门邪道的构建<code>.top</code>和<code>.gro</code>的方法。<code>solvate</code>可以用来给空盒子填充水，可以这样写:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top</span><br></pre></td></tr></table></figure>\n这样子可以生成一个<code>conf.gro</code>文件，盒子大小为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.608ex\" height=\"1.557ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 10434.9 688\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1278,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1878,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2978.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3978.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5256.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5856.4,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6956.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7956.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8956.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9556.9,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container></span>，其中填充了水分子。</p>\n<p>同时<code>solvate</code>程序可以通过<code>-maxsol</code>来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top</span><br><span class=\"line\">gmx solvate -cs ./molecule/MLM.gro -<span class=\"built_in\">cp</span> cp.gro -o cp2.gro -maxsol 1 -p topol.top</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> cp2.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure></p>\n<p>比较正确的做法应该用<code>insert-molecules</code>来插入小分子，用<code>solvate</code>来填充水分子:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> box.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure></p>"},{"title":"在latex中定义新命令","date":"2023-01-07T07:03:02.000Z","mathjax":true,"_content":"\n# 定义新命令\n为了在latex中书写方便，可以用`newcommand`定义新命令:\n```latex\n\\newcommand{\\<cmdname>}[<n>]{<command>}\n```\n  1. `<cmdname>`为新定义的命令名字。  \n  2. `<n>`为参数个数，各个参数可以在命令体中用`#1`、`#2`表示  \n  3. `<command>`为命令体。  \n例如，可以用`newcommand`定义平均值的表示:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n```\n之后可以这样在数学环境中使用\n```latex\n\\mean{a}{n}\n```\n但是`newcommand`不允许定义一个已经存在的命令，如果要防止报错，可以使用`providecommand`，该命令使用和`newcommand`一致，当命令不存在时，它相当于`newcommand`，当命令存在时，它沿用之前的定义。例如:\n```latex\n\\providecommand{\\mean}[2]{\\frac{#1+#2}{2}}\n```\n则`\\mean{a}{n}`依旧等于\n$$ \\frac{a_1+a_2+\\cdots+a_n}{n} $$\n有时候我们需要重新定义一个已经定义的命令，此时，我们可以用`renewcommand`，`renewcommand`的使用和`newcomand`相同，但是它必须以及存在原命令，否则会报错。\n这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。\n<!--more-->\n\n# 使用局部命令\n为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用`newcommand`和`renewcommand`我们可以如下操作:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n$$\\mean{a}{n}$$\n\\renewcommand{\\mean}[2]{\\frac{#1+#1}{2}}\n$$\\mean{a}{n}$$\n```\n这时候两个`\\mean`的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个`\\newcommand`需要改为`\\renewcommand`。  \n\n为了克服这个缺陷，我们可以使用`def`,`def`的语法为:\n```latex\n\\def\\⟨name⟩<parameter text>{⟨definition⟩}\n```\n  1. `<name>`为新定义的命令名字。  \n  2. `<parameter text>`为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为`#1#2#3`。  \n  3. `<definition>`为命令体，其中的参数用`#1`、`#2`……表示。  \n\n`def`不需要检查该命令是否定义，因此适合用来该操作。同时`def`会受到局部环境的影响，需要定义全局的命令可以用`gdef`，如果要对`<definition>`中的命令进行展开，可以用`edef`，全局定义展开时可以用`xdef`\n\n","source":"_posts/在latex中定义新命令.md","raw":"---\ntitle: 在latex中定义新命令\ndate: 2023-01-07 15:03:02\nmathjax: true\ncategories:\n    - latex\ntags:\n    - latex\n---\n\n# 定义新命令\n为了在latex中书写方便，可以用`newcommand`定义新命令:\n```latex\n\\newcommand{\\<cmdname>}[<n>]{<command>}\n```\n  1. `<cmdname>`为新定义的命令名字。  \n  2. `<n>`为参数个数，各个参数可以在命令体中用`#1`、`#2`表示  \n  3. `<command>`为命令体。  \n例如，可以用`newcommand`定义平均值的表示:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n```\n之后可以这样在数学环境中使用\n```latex\n\\mean{a}{n}\n```\n但是`newcommand`不允许定义一个已经存在的命令，如果要防止报错，可以使用`providecommand`，该命令使用和`newcommand`一致，当命令不存在时，它相当于`newcommand`，当命令存在时，它沿用之前的定义。例如:\n```latex\n\\providecommand{\\mean}[2]{\\frac{#1+#2}{2}}\n```\n则`\\mean{a}{n}`依旧等于\n$$ \\frac{a_1+a_2+\\cdots+a_n}{n} $$\n有时候我们需要重新定义一个已经定义的命令，此时，我们可以用`renewcommand`，`renewcommand`的使用和`newcomand`相同，但是它必须以及存在原命令，否则会报错。\n这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。\n<!--more-->\n\n# 使用局部命令\n为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用`newcommand`和`renewcommand`我们可以如下操作:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n$$\\mean{a}{n}$$\n\\renewcommand{\\mean}[2]{\\frac{#1+#1}{2}}\n$$\\mean{a}{n}$$\n```\n这时候两个`\\mean`的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个`\\newcommand`需要改为`\\renewcommand`。  \n\n为了克服这个缺陷，我们可以使用`def`,`def`的语法为:\n```latex\n\\def\\⟨name⟩<parameter text>{⟨definition⟩}\n```\n  1. `<name>`为新定义的命令名字。  \n  2. `<parameter text>`为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为`#1#2#3`。  \n  3. `<definition>`为命令体，其中的参数用`#1`、`#2`……表示。  \n\n`def`不需要检查该命令是否定义，因此适合用来该操作。同时`def`会受到局部环境的影响，需要定义全局的命令可以用`gdef`，如果要对`<definition>`中的命令进行展开，可以用`edef`，全局定义展开时可以用`xdef`\n\n","slug":"在latex中定义新命令","published":1,"updated":"2023-02-06T12:40:04.782Z","_id":"clclmin0e0004ugvqeyfhh1vv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"定义新命令\">定义新命令</h1>\n<p>为了在latex中书写方便，可以用<code>newcommand</code>定义新命令:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>{<span class=\"keyword\">\\&lt;</span>cmdname&gt;}[&lt;n&gt;]{&lt;command&gt;}</span><br></pre></td></tr></table></figure> 1. <code>&lt;cmdname&gt;</code>为新定义的命令名字。<br>\n2.\n<code>&lt;n&gt;</code>为参数个数，各个参数可以在命令体中用<code>#1</code>、<code>#2</code>表示<br>\n3. <code>&lt;command&gt;</code>为命令体。<br>\n例如，可以用<code>newcommand</code>定义平均值的表示: <figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>}{<span class=\"params\">#2</span>}}</span><br></pre></td></tr></table></figure>\n之后可以这样在数学环境中使用 <figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\mean</span>{a}{n}</span><br></pre></td></tr></table></figure>\n但是<code>newcommand</code>不允许定义一个已经存在的命令，如果要防止报错，可以使用<code>providecommand</code>，该命令使用和<code>newcommand</code>一致，当命令不存在时，它相当于<code>newcommand</code>，当命令存在时，它沿用之前的定义。例如:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\providecommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span>+<span class=\"params\">#2</span>}{2}}</span><br></pre></td></tr></table></figure> 则<code>\\mean{a}{n}</code>依旧等于 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.577ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.658ex\" height=\"4.425ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1259 8246.7 1956\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1187.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2188,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3375.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4376,0)\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5770.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6770.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(3823.4,-686)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><rect width=\"8006.7\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></span>\n有时候我们需要重新定义一个已经定义的命令，此时，我们可以用<code>renewcommand</code>，<code>renewcommand</code>的使用和<code>newcomand</code>相同，但是它必须以及存在原命令，否则会报错。\n这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。\n<span id=\"more\"></span></p>\n<h1 id=\"使用局部命令\">使用局部命令</h1>\n<p>为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用<code>newcommand</code>和<code>renewcommand</code>我们可以如下操作:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>}{<span class=\"params\">#2</span>}}</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>{a}{n}<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br><span class=\"line\"><span class=\"keyword\">\\renewcommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span>+<span class=\"params\">#1</span>}{2}}</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>{a}{n}<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br></pre></td></tr></table></figure>\n这时候两个<code>\\mean</code>的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个<code>\\newcommand</code>需要改为<code>\\renewcommand</code>。</p>\n<p>为了克服这个缺陷，我们可以使用<code>def</code>,<code>def</code>的语法为:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\def</span><span class=\"keyword\">\\⟨</span>name⟩&lt;parameter text&gt;{⟨definition⟩}</span><br></pre></td></tr></table></figure> 1. <code>&lt;name&gt;</code>为新定义的命令名字。<br>\n2.\n<code>&lt;parameter text&gt;</code>为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为<code>#1#2#3</code>。<br>\n3.\n<code>&lt;definition&gt;</code>为命令体，其中的参数用<code>#1</code>、<code>#2</code>……表示。</p>\n<p><code>def</code>不需要检查该命令是否定义，因此适合用来该操作。同时<code>def</code>会受到局部环境的影响，需要定义全局的命令可以用<code>gdef</code>，如果要对<code>&lt;definition&gt;</code>中的命令进行展开，可以用<code>edef</code>，全局定义展开时可以用<code>xdef</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"定义新命令\">定义新命令</h1>\n<p>为了在latex中书写方便，可以用<code>newcommand</code>定义新命令:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>{<span class=\"keyword\">\\&lt;</span>cmdname&gt;}[&lt;n&gt;]{&lt;command&gt;}</span><br></pre></td></tr></table></figure> 1. <code>&lt;cmdname&gt;</code>为新定义的命令名字。<br>\n2.\n<code>&lt;n&gt;</code>为参数个数，各个参数可以在命令体中用<code>#1</code>、<code>#2</code>表示<br>\n3. <code>&lt;command&gt;</code>为命令体。<br>\n例如，可以用<code>newcommand</code>定义平均值的表示: <figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>}{<span class=\"params\">#2</span>}}</span><br></pre></td></tr></table></figure>\n之后可以这样在数学环境中使用 <figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\mean</span>{a}{n}</span><br></pre></td></tr></table></figure>\n但是<code>newcommand</code>不允许定义一个已经存在的命令，如果要防止报错，可以使用<code>providecommand</code>，该命令使用和<code>newcommand</code>一致，当命令不存在时，它相当于<code>newcommand</code>，当命令存在时，它沿用之前的定义。例如:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\providecommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span>+<span class=\"params\">#2</span>}{2}}</span><br></pre></td></tr></table></figure> 则<code>\\mean{a}{n}</code>依旧等于 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.577ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.658ex\" height=\"4.425ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1259 8246.7 1956\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1187.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2188,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3375.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4376,0)\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5770.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(6770.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(562,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(3823.4,-686)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><rect width=\"8006.7\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></span>\n有时候我们需要重新定义一个已经定义的命令，此时，我们可以用<code>renewcommand</code>，<code>renewcommand</code>的使用和<code>newcomand</code>相同，但是它必须以及存在原命令，否则会报错。\n这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。","more":"</p>\n<h1 id=\"使用局部命令\">使用局部命令</h1>\n<p>为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用<code>newcommand</code>和<code>renewcommand</code>我们可以如下操作:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>}{<span class=\"params\">#2</span>}}</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>{a}{n}<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br><span class=\"line\"><span class=\"keyword\">\\renewcommand</span>{<span class=\"keyword\">\\mean</span>}[2]{<span class=\"keyword\">\\frac</span>{<span class=\"params\">#1</span>+<span class=\"params\">#1</span>}{2}}</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>{a}{n}<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br></pre></td></tr></table></figure>\n这时候两个<code>\\mean</code>的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个<code>\\newcommand</code>需要改为<code>\\renewcommand</code>。</p>\n<p>为了克服这个缺陷，我们可以使用<code>def</code>,<code>def</code>的语法为:\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\def</span><span class=\"keyword\">\\⟨</span>name⟩&lt;parameter text&gt;{⟨definition⟩}</span><br></pre></td></tr></table></figure> 1. <code>&lt;name&gt;</code>为新定义的命令名字。<br>\n2.\n<code>&lt;parameter text&gt;</code>为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为<code>#1#2#3</code>。<br>\n3.\n<code>&lt;definition&gt;</code>为命令体，其中的参数用<code>#1</code>、<code>#2</code>……表示。</p>\n<p><code>def</code>不需要检查该命令是否定义，因此适合用来该操作。同时<code>def</code>会受到局部环境的影响，需要定义全局的命令可以用<code>gdef</code>，如果要对<code>&lt;definition&gt;</code>中的命令进行展开，可以用<code>edef</code>，全局定义展开时可以用<code>xdef</code></p>"},{"title":"bash shell的一些以前没用过的特性","date":"2023-01-09T08:03:43.000Z","_content":"\n# 转化编码格式\n有时候在linux打开文件会出现乱码，这时候可以使用`iconv`转化编码格式:\n```shell\niconv -f GB2312 -t utf-8 -o output.txt input.txt\n```\n以上命令可以将GB2312编码格式的`input.txt`文件转化为utf-8编码格式的`output.txt`文件。\n\n<!--more-->\n# 数组\n用以下命令可以设定bash数组:\n```bash\n#!/bin/bash\nb='b'\narray=('a' b 1)\n```\n用以下命令可以取出列表中的元素:\n```bash\nc=${a[0]}\n```\n可以用以下命令取数组长度:\n```bash\nlength=${#a[@]}\n```\n\n# =~ \n`=~`用来进行正则匹配，匹配成功则为真，用法是:\n```bash\nif [[ aaa =~ a.* ]]; then\n    echo 'aaa'\nfi\n```\n","source":"_posts/bash-shell的一些以前没用过的特性.md","raw":"---\ntitle: bash shell的一些以前没用过的特性\ndate: 2023-01-09 16:03:43\ncategories:\n    - bash\ntags:\n    - bash\n---\n\n# 转化编码格式\n有时候在linux打开文件会出现乱码，这时候可以使用`iconv`转化编码格式:\n```shell\niconv -f GB2312 -t utf-8 -o output.txt input.txt\n```\n以上命令可以将GB2312编码格式的`input.txt`文件转化为utf-8编码格式的`output.txt`文件。\n\n<!--more-->\n# 数组\n用以下命令可以设定bash数组:\n```bash\n#!/bin/bash\nb='b'\narray=('a' b 1)\n```\n用以下命令可以取出列表中的元素:\n```bash\nc=${a[0]}\n```\n可以用以下命令取数组长度:\n```bash\nlength=${#a[@]}\n```\n\n# =~ \n`=~`用来进行正则匹配，匹配成功则为真，用法是:\n```bash\nif [[ aaa =~ a.* ]]; then\n    echo 'aaa'\nfi\n```\n","slug":"bash-shell的一些以前没用过的特性","published":1,"updated":"2023-02-06T12:40:04.782Z","_id":"clcoj4f1o00002cvqb7i644fc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"转化编码格式\">转化编码格式</h1>\n<p>有时候在linux打开文件会出现乱码，这时候可以使用<code>iconv</code>转化编码格式:\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv -f GB2312 -t utf-8 -o output.txt input.txt</span><br></pre></td></tr></table></figure>\n以上命令可以将GB2312编码格式的<code>input.txt</code>文件转化为utf-8编码格式的<code>output.txt</code>文件。</p>\n<span id=\"more\"></span>\n<h1 id=\"数组\">数组</h1>\n<p>用以下命令可以设定bash数组: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">b=<span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">array=(<span class=\"string\">&#x27;a&#x27;</span> b 1)</span><br></pre></td></tr></table></figure>\n用以下命令可以取出列表中的元素: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"variable\">$&#123;a[0]&#125;</span></span><br></pre></td></tr></table></figure> 可以用以下命令取数组长度:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length=<span class=\"variable\">$&#123;#a[@]&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"section\">=~</h1>\n<p><code>=~</code>用来进行正则匹配，匹配成功则为真，用法是:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ aaa =~ a.* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"转化编码格式\">转化编码格式</h1>\n<p>有时候在linux打开文件会出现乱码，这时候可以使用<code>iconv</code>转化编码格式:\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv -f GB2312 -t utf-8 -o output.txt input.txt</span><br></pre></td></tr></table></figure>\n以上命令可以将GB2312编码格式的<code>input.txt</code>文件转化为utf-8编码格式的<code>output.txt</code>文件。</p>","more":"<h1 id=\"数组\">数组</h1>\n<p>用以下命令可以设定bash数组: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">b=<span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">array=(<span class=\"string\">&#x27;a&#x27;</span> b 1)</span><br></pre></td></tr></table></figure>\n用以下命令可以取出列表中的元素: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"variable\">$&#123;a[0]&#125;</span></span><br></pre></td></tr></table></figure> 可以用以下命令取数组长度:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length=<span class=\"variable\">$&#123;#a[@]&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"section\">=~</h1>\n<p><code>=~</code>用来进行正则匹配，匹配成功则为真，用法是:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ aaa =~ a.* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>"},{"title":"opensuse15.4安装packman","date":"2023-02-06T12:42:33.000Z","_content":"最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：\n```bash\nsudo zypper install opi\nopi codecs\n```\n以上两行代码就解决了编码器问题。\n","source":"_posts/opensuse15-4安装packman.md","raw":"---\ntitle: opensuse15.4安装packman\ndate: 2023-02-06 20:42:33\ntags:\n    - linux\ncategories:\n    - 计算机\n---\n最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：\n```bash\nsudo zypper install opi\nopi codecs\n```\n以上两行代码就解决了编码器问题。\n","slug":"opensuse15-4安装packman","published":1,"updated":"2023-02-06T12:55:09.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5fqocd0000mutfgtv86znr","content":"<p>最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper install opi</span><br><span class=\"line\">opi codecs</span><br></pre></td></tr></table></figure> 以上两行代码就解决了编码器问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper install opi</span><br><span class=\"line\">opi codecs</span><br></pre></td></tr></table></figure> 以上两行代码就解决了编码器问题。</p>\n"},{"title":"opensuse15.4安装Nvidia驱动","date":"2023-02-07T05:37:36.000Z","_content":"更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。  \n\n# 添加Nvidia软件源\n首先需要添加Nvidia的软件源:\n```bash\nsudo zypper addrepo --refresh 'https://download.nvidia.com/opensuse/leap/$releasever' NVIDIA\n```\n\n# 获得硬件信息\n用以下命令可以获得硬件信息:\n```bash\nsudo lspci |grep VGA\nsudo lscpu |grep Arch # 中文要改成\"架构\"\n```\n或者使用以下命令查看:\n```bash\nsudo hwinfo --gfxcard | grep Model\nsudo hwinfo --arch\n```\n又或者使用`inxi`命令:\n```bash\ninxi -G\ninxi -Ga\n```\n\n# 安装\n现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:  \n1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices\n2. G04 = driver v390 = legacy driver for GTX4xx/5xx Fermi devices\n3. G05 = current driver for current devices\n4. G06 = covers all cards GT700 and up\n\n可以用一下命令查看显卡驱动信息:\n```bash\nsudo zypper se x11-video-nvidiaG0*\n```\n或者:\n```bash\nsudo zypper se -s x11-video-nvidiaG0*\n```\n如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:\n```bash\nzypper se nvidia-glG0*\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/opensuse15-4安装Nvidia驱动.md","raw":"---\ntitle: opensuse15.4安装Nvidia驱动\ndate: 2023-02-07 13:37:36\ntags:\n    - linux\ncategories:\n    - 计算机\n---\n更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。  \n\n# 添加Nvidia软件源\n首先需要添加Nvidia的软件源:\n```bash\nsudo zypper addrepo --refresh 'https://download.nvidia.com/opensuse/leap/$releasever' NVIDIA\n```\n\n# 获得硬件信息\n用以下命令可以获得硬件信息:\n```bash\nsudo lspci |grep VGA\nsudo lscpu |grep Arch # 中文要改成\"架构\"\n```\n或者使用以下命令查看:\n```bash\nsudo hwinfo --gfxcard | grep Model\nsudo hwinfo --arch\n```\n又或者使用`inxi`命令:\n```bash\ninxi -G\ninxi -Ga\n```\n\n# 安装\n现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:  \n1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices\n2. G04 = driver v390 = legacy driver for GTX4xx/5xx Fermi devices\n3. G05 = current driver for current devices\n4. G06 = covers all cards GT700 and up\n\n可以用一下命令查看显卡驱动信息:\n```bash\nsudo zypper se x11-video-nvidiaG0*\n```\n或者:\n```bash\nsudo zypper se -s x11-video-nvidiaG0*\n```\n如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:\n```bash\nzypper se nvidia-glG0*\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"opensuse15-4安装Nvidia驱动","published":1,"updated":"2023-02-07T06:17:27.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5fqocf0001mutfbv6a8a31","content":"<p>更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。</p>\n<h1 id=\"添加nvidia软件源\">添加Nvidia软件源</h1>\n<p>首先需要添加Nvidia的软件源: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper addrepo --refresh <span class=\"string\">&#x27;https://download.nvidia.com/opensuse/leap/$releasever&#x27;</span> NVIDIA</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获得硬件信息\">获得硬件信息</h1>\n<p>用以下命令可以获得硬件信息: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lspci |grep VGA</span><br><span class=\"line\">sudo lscpu |grep Arch <span class=\"comment\"># 中文要改成&quot;架构&quot;</span></span><br></pre></td></tr></table></figure> 或者使用以下命令查看:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hwinfo --gfxcard | grep Model</span><br><span class=\"line\">sudo hwinfo --<span class=\"built_in\">arch</span></span><br></pre></td></tr></table></figure> 又或者使用<code>inxi</code>命令: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inxi -G</span><br><span class=\"line\">inxi -Ga</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"安装\">安装</h1>\n<p>现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:<br />\n1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices 2. G04 =\ndriver v390 = legacy driver for GTX4xx/5xx Fermi devices 3. G05 =\ncurrent driver for current devices 4. G06 = covers all cards GT700 and\nup</p>\n<p>可以用一下命令查看显卡驱动信息: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper se x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure> 或者: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper se -s x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>\n如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zypper se nvidia-glG0*</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。</p>\n<h1 id=\"添加nvidia软件源\">添加Nvidia软件源</h1>\n<p>首先需要添加Nvidia的软件源: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper addrepo --refresh <span class=\"string\">&#x27;https://download.nvidia.com/opensuse/leap/$releasever&#x27;</span> NVIDIA</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获得硬件信息\">获得硬件信息</h1>\n<p>用以下命令可以获得硬件信息: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lspci |grep VGA</span><br><span class=\"line\">sudo lscpu |grep Arch <span class=\"comment\"># 中文要改成&quot;架构&quot;</span></span><br></pre></td></tr></table></figure> 或者使用以下命令查看:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo hwinfo --gfxcard | grep Model</span><br><span class=\"line\">sudo hwinfo --<span class=\"built_in\">arch</span></span><br></pre></td></tr></table></figure> 又或者使用<code>inxi</code>命令: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inxi -G</span><br><span class=\"line\">inxi -Ga</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"安装\">安装</h1>\n<p>现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:<br />\n1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices 2. G04 =\ndriver v390 = legacy driver for GTX4xx/5xx Fermi devices 3. G05 =\ncurrent driver for current devices 4. G06 = covers all cards GT700 and\nup</p>\n<p>可以用一下命令查看显卡驱动信息: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper se x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure> 或者: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo zypper se -s x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>\n如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zypper se nvidia-glG0*</span><br></pre></td></tr></table></figure></p>\n"},{"title":"如何使用git","date":"2023-02-15T07:26:02.000Z","catagories":["计算机"],"_content":"git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的[ics的PA](https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html)上抄来的。  \n\n安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:\n```bash\ngit config --global user.name \"hapo\"\ngit config --global user.email \"hapo@mail.com\"\ngit config --global core.editor vim\ngit config --global color.ui true\n```\n这些配置会储存在家目录下的`.gitconfig`中，经过了配置之后，我们就可以开始使用git了。\n\n## 本地管理  \n### 初始化  \n我们可以用`git clone`拉取远程的框架代码，或者在本地进行初始化新的项目:\n```bash\ngit init\n```\n\n### 查看存档信息\n使用\n```bash\ngit log\n```\n查看目前为止所有的存档。\n使用\n```bash\ngit status\n```\n可以得知，与当前存档相比，哪些文件发生变化。 \n<!--more--> \n\n### 存档\n当我们代码写到一定程度的时候，就应该进行\"存档\"。  \n首先我们需要使用`git status`查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用`git add`将文件加入跟踪列表，例如\n```bash\ngit add file.c\n```\n会将`file.c`加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用\n```bash\ngit add -A\n```\n这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的 .o 文件, 和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让`git`在添加跟踪文件之前作筛选，我们可以编辑`.gitignore`文件(你可以使用`ls -a`命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被`git`忽略的文件和文件类型。  \n把新文件加入跟踪列表后，使用`git status`再次确认。确认无误后就可以存档了，使用\n```bash\ngit commit\n```\n提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如\"fix bug for xxx\"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用`git log`查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱`git commit -m \"COMMIT\"`，虽然我知道上面说的是对的。</font>  \n\n### 读档\n我们可以使用`git log`来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash code，例如`8e4fac44d3b567591bc3768fc94d53575726b866`，我们需要通过hash code来告诉`git`我们希望读取哪一个档。使用一下命令进行独档:\n```bash\ngit reset --hard 8e4f\n```\n\n其中`8e4f`是上文hash code的前缀，我们不需要输入整个hash code。这时候我们的代码已经回到过去了。  \n但事实上，使用`git reset`的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到\"将来\"了。就和别的软件中的撤销操作一样。\n\n### 第三视点\n当然还是有办法来避免上文提到的副作用的，这就是`git`的分支功能，使用命令\n```bash\ngit branch\n```\n查看所有分支。其中`master`是主分支，使用`git init`初始化之后会自动建立主分支。  \n读档的时候使用以下命令\n```bash\ngit checkout 8e4f\n```\n而不是`git reset`。这时你将处于一个虚拟的分支中，你可以  \n1. 查看`8e4f`存档的内容\n2. 使用以下命令切换到其它分支\n```bash\ngit checkout 分支名\n```\n3. 对代码的内容进行修改，但你不能使用`git commit`进行存档，你需要使用\n```bash\ngit check -B 分支名\n```\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。  \n不同的分支之间不会相互干扰， 这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。\n\n\n\n","source":"_posts/如何使用git.md","raw":"---\ntitle: 如何使用git\ndate: 2023-02-15 15:26:02\ntags:\n    - git\ncatagories:\n    - 计算机\n---\ngit是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的[ics的PA](https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html)上抄来的。  \n\n安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:\n```bash\ngit config --global user.name \"hapo\"\ngit config --global user.email \"hapo@mail.com\"\ngit config --global core.editor vim\ngit config --global color.ui true\n```\n这些配置会储存在家目录下的`.gitconfig`中，经过了配置之后，我们就可以开始使用git了。\n\n## 本地管理  \n### 初始化  \n我们可以用`git clone`拉取远程的框架代码，或者在本地进行初始化新的项目:\n```bash\ngit init\n```\n\n### 查看存档信息\n使用\n```bash\ngit log\n```\n查看目前为止所有的存档。\n使用\n```bash\ngit status\n```\n可以得知，与当前存档相比，哪些文件发生变化。 \n<!--more--> \n\n### 存档\n当我们代码写到一定程度的时候，就应该进行\"存档\"。  \n首先我们需要使用`git status`查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用`git add`将文件加入跟踪列表，例如\n```bash\ngit add file.c\n```\n会将`file.c`加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用\n```bash\ngit add -A\n```\n这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的 .o 文件, 和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让`git`在添加跟踪文件之前作筛选，我们可以编辑`.gitignore`文件(你可以使用`ls -a`命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被`git`忽略的文件和文件类型。  \n把新文件加入跟踪列表后，使用`git status`再次确认。确认无误后就可以存档了，使用\n```bash\ngit commit\n```\n提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如\"fix bug for xxx\"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用`git log`查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱`git commit -m \"COMMIT\"`，虽然我知道上面说的是对的。</font>  \n\n### 读档\n我们可以使用`git log`来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash code，例如`8e4fac44d3b567591bc3768fc94d53575726b866`，我们需要通过hash code来告诉`git`我们希望读取哪一个档。使用一下命令进行独档:\n```bash\ngit reset --hard 8e4f\n```\n\n其中`8e4f`是上文hash code的前缀，我们不需要输入整个hash code。这时候我们的代码已经回到过去了。  \n但事实上，使用`git reset`的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到\"将来\"了。就和别的软件中的撤销操作一样。\n\n### 第三视点\n当然还是有办法来避免上文提到的副作用的，这就是`git`的分支功能，使用命令\n```bash\ngit branch\n```\n查看所有分支。其中`master`是主分支，使用`git init`初始化之后会自动建立主分支。  \n读档的时候使用以下命令\n```bash\ngit checkout 8e4f\n```\n而不是`git reset`。这时你将处于一个虚拟的分支中，你可以  \n1. 查看`8e4f`存档的内容\n2. 使用以下命令切换到其它分支\n```bash\ngit checkout 分支名\n```\n3. 对代码的内容进行修改，但你不能使用`git commit`进行存档，你需要使用\n```bash\ngit check -B 分支名\n```\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。  \n不同的分支之间不会相互干扰， 这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。\n\n\n\n","slug":"如何使用git","published":1,"updated":"2023-02-15T09:33:32.759Z","_id":"cle5fqoco0007mutffaly6d35","comments":1,"layout":"post","photos":[],"link":"","content":"<p>git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的<a\nhref=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html\">ics的PA</a>上抄来的。</p>\n<p>安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;hapo&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;hapo@mail.com&quot;</span></span><br><span class=\"line\">git config --global core.editor vim</span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n这些配置会储存在家目录下的<code>.gitconfig</code>中，经过了配置之后，我们就可以开始使用git了。</p>\n<h2 id=\"本地管理\">本地管理</h2>\n<h3 id=\"初始化\">初始化</h3>\n<p>我们可以用<code>git clone</code>拉取远程的框架代码，或者在本地进行初始化新的项目:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看存档信息\">查看存档信息</h3>\n<p>使用 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure> 查看目前为止所有的存档。 使用 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n可以得知，与当前存档相比，哪些文件发生变化。 <span id=\"more\"></span></p>\n<h3 id=\"存档\">存档</h3>\n<p>当我们代码写到一定程度的时候，就应该进行\"存档\"。<br />\n首先我们需要使用<code>git status</code>查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用<code>git add</code>将文件加入跟踪列表，例如\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.c</span><br></pre></td></tr></table></figure>\n会将<code>file.c</code>加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的\n.o 文件,\n和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让<code>git</code>在添加跟踪文件之前作筛选，我们可以编辑<code>.gitignore</code>文件(你可以使用<code>ls -a</code>命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被<code>git</code>忽略的文件和文件类型。<br />\n把新文件加入跟踪列表后，使用<code>git status</code>再次确认。确认无误后就可以存档了，使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如\"fix\nbug for\nxxx\"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用<code>git log</code>查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱<code>git commit -m \"COMMIT\"</code>，虽然我知道上面说的是对的。</font></p>\n<h3 id=\"读档\">读档</h3>\n<p>我们可以使用<code>git log</code>来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash\ncode，例如<code>8e4fac44d3b567591bc3768fc94d53575726b866</code>，我们需要通过hash\ncode来告诉<code>git</code>我们希望读取哪一个档。使用一下命令进行独档:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 8e4f</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>8e4f</code>是上文hash code的前缀，我们不需要输入整个hash\ncode。这时候我们的代码已经回到过去了。<br />\n但事实上，使用<code>git reset</code>的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到\"将来\"了。就和别的软件中的撤销操作一样。</p>\n<h3 id=\"第三视点\">第三视点</h3>\n<p>当然还是有办法来避免上文提到的副作用的，这就是<code>git</code>的分支功能，使用命令\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n查看所有分支。其中<code>master</code>是主分支，使用<code>git init</code>初始化之后会自动建立主分支。<br />\n读档的时候使用以下命令 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 8e4f</span><br></pre></td></tr></table></figure>\n而不是<code>git reset</code>。这时你将处于一个虚拟的分支中，你可以<br />\n1. 查看<code>8e4f</code>存档的内容 2. 使用以下命令切换到其它分支\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br></pre></td></tr></table></figure> 3.\n对代码的内容进行修改，但你不能使用<code>git commit</code>进行存档，你需要使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git check -B 分支名</span><br></pre></td></tr></table></figure>\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。<br />\n不同的分支之间不会相互干扰，\n这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。</p>\n","site":{"data":{}},"excerpt":"<p>git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的<a\nhref=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html\">ics的PA</a>上抄来的。</p>\n<p>安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;hapo&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;hapo@mail.com&quot;</span></span><br><span class=\"line\">git config --global core.editor vim</span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n这些配置会储存在家目录下的<code>.gitconfig</code>中，经过了配置之后，我们就可以开始使用git了。</p>\n<h2 id=\"本地管理\">本地管理</h2>\n<h3 id=\"初始化\">初始化</h3>\n<p>我们可以用<code>git clone</code>拉取远程的框架代码，或者在本地进行初始化新的项目:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看存档信息\">查看存档信息</h3>\n<p>使用 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure> 查看目前为止所有的存档。 使用 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n可以得知，与当前存档相比，哪些文件发生变化。","more":"</p>\n<h3 id=\"存档\">存档</h3>\n<p>当我们代码写到一定程度的时候，就应该进行\"存档\"。<br />\n首先我们需要使用<code>git status</code>查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用<code>git add</code>将文件加入跟踪列表，例如\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.c</span><br></pre></td></tr></table></figure>\n会将<code>file.c</code>加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的\n.o 文件,\n和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让<code>git</code>在添加跟踪文件之前作筛选，我们可以编辑<code>.gitignore</code>文件(你可以使用<code>ls -a</code>命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被<code>git</code>忽略的文件和文件类型。<br />\n把新文件加入跟踪列表后，使用<code>git status</code>再次确认。确认无误后就可以存档了，使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如\"fix\nbug for\nxxx\"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用<code>git log</code>查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱<code>git commit -m \"COMMIT\"</code>，虽然我知道上面说的是对的。</font></p>\n<h3 id=\"读档\">读档</h3>\n<p>我们可以使用<code>git log</code>来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash\ncode，例如<code>8e4fac44d3b567591bc3768fc94d53575726b866</code>，我们需要通过hash\ncode来告诉<code>git</code>我们希望读取哪一个档。使用一下命令进行独档:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 8e4f</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>8e4f</code>是上文hash code的前缀，我们不需要输入整个hash\ncode。这时候我们的代码已经回到过去了。<br />\n但事实上，使用<code>git reset</code>的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到\"将来\"了。就和别的软件中的撤销操作一样。</p>\n<h3 id=\"第三视点\">第三视点</h3>\n<p>当然还是有办法来避免上文提到的副作用的，这就是<code>git</code>的分支功能，使用命令\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n查看所有分支。其中<code>master</code>是主分支，使用<code>git init</code>初始化之后会自动建立主分支。<br />\n读档的时候使用以下命令 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 8e4f</span><br></pre></td></tr></table></figure>\n而不是<code>git reset</code>。这时你将处于一个虚拟的分支中，你可以<br />\n1. 查看<code>8e4f</code>存档的内容 2. 使用以下命令切换到其它分支\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br></pre></td></tr></table></figure> 3.\n对代码的内容进行修改，但你不能使用<code>git commit</code>进行存档，你需要使用\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git check -B 分支名</span><br></pre></td></tr></table></figure>\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。<br />\n不同的分支之间不会相互干扰，\n这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。</p>"},{"title":"解决U盘刻盘空间变小问题","date":"2023-02-06T12:54:38.000Z","_content":"U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：\n```bash\nsudo parted /dev/sdc # 使用parted来调整磁盘/dev/sdc\nprint # 打印查看当前的\nresizepart 2 -1 # 将第二个分区充满剩下的空间\nquit # 退出\nsudo resize2fs /dev/sdc2 # 使用resize2fs来调整sdc2分区大小\n```\n亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。","source":"_posts/解决U盘刻盘空间变小问题.md","raw":"---\ntitle: 解决U盘刻盘空间变小问题\ndate: 2023-02-06 20:54:38\ntags:\n    - linux\ncategories:\n    - 计算机\n---\nU盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：\n```bash\nsudo parted /dev/sdc # 使用parted来调整磁盘/dev/sdc\nprint # 打印查看当前的\nresizepart 2 -1 # 将第二个分区充满剩下的空间\nquit # 退出\nsudo resize2fs /dev/sdc2 # 使用resize2fs来调整sdc2分区大小\n```\n亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。","slug":"解决U盘刻盘空间变小问题","published":1,"updated":"2023-02-06T13:12:33.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5fqoco0008mutfaclt23m2","content":"<p>U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted /dev/sdc <span class=\"comment\"># 使用parted来调整磁盘/dev/sdc</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"comment\"># 打印查看当前的</span></span><br><span class=\"line\">resizepart 2 -1 <span class=\"comment\"># 将第二个分区充满剩下的空间</span></span><br><span class=\"line\">quit <span class=\"comment\"># 退出</span></span><br><span class=\"line\">sudo resize2fs /dev/sdc2 <span class=\"comment\"># 使用resize2fs来调整sdc2分区大小</span></span><br></pre></td></tr></table></figure>\n亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted /dev/sdc <span class=\"comment\"># 使用parted来调整磁盘/dev/sdc</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"comment\"># 打印查看当前的</span></span><br><span class=\"line\">resizepart 2 -1 <span class=\"comment\"># 将第二个分区充满剩下的空间</span></span><br><span class=\"line\">quit <span class=\"comment\"># 退出</span></span><br><span class=\"line\">sudo resize2fs /dev/sdc2 <span class=\"comment\"># 使用resize2fs来调整sdc2分区大小</span></span><br></pre></td></tr></table></figure>\n亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。</p>\n"},{"title":"ssh登陆相关","date":"2023-03-01T05:50:51.000Z","catagories":["计算机"],"_content":"# 密钥登陆\nlinux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥, 生成密钥的命令为:\n```bash\nssh-keygen\n```\n其中需要输入文件名和key的类型。  \n使用`ssh-copy-id`命令可以将`filename.pub`公钥分发给远程主机:\n```bash\nssh-copy-id hapo@webserver1\n```\n以上命令会将默认公钥分发过去, 也可以使用\n```bash\nssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1\n```\n指定需要分发的公钥。  \n此时就能不需要密码登陆远程服务器, 若密钥名字不是默认的名字(`~/.ssh/id_rsa`等), 则可以用以下命令指定:\n```bash\nssh -i ~/.ssh/filename hapo@websever1\n```\n另外可以使用以下命令查看密钥和公钥对应的指纹:\n```bash\nssh-keygen -l -f ~/.ssh/filename\nssh-keygen -l -f ~/.ssh/filename.pub\n```\n<!--more-->\n# ssh配置文件\n可以在`~/.ssh/config`中写如下命令简化`ssh`登陆时所需参数:\n```bash\nHost hapo\n    HostName ip\n    Port 22\n    User hapo\n    IdentityFile ~/.ssh/id_rsa\n    ServerAliveInterval 60 # 每60秒发送一次空请求\n    ServerAliveCountMax 10 # 断开时重新连接的次数\n```\n\n# 使用`ssh-agent`和`ssh-add`\n`ssh-agent`可以记录密钥的指纹, 并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。\n启动`ssh-agent`的命令为\n```bash\neval `ssh-agent`\n```\n接下里就可以使用`ssh-add`添加密钥指纹\n```bash\nssh-add #添加默认的密钥指纹\nssh-add ~/.ssh/id_rsa_1 #指定密钥的指纹\n```\n可以用以下命令查看添加过的密钥指纹\n```bash\nssh-add -L\n```\n可以用以下命令修改添加过的密钥指纹\n```bash\nssh-add -D # 删除ssh-agent中的所有密钥指纹\nssh-add -d key_file # 删除指定密钥指纹\n```\n另外, 杀掉现在正在运行的`ssh-agent`的命令为\n```bash\nssh-agent -k\n```\n# `oathtool`\n`oathtool`可以用于生成二次验证, 其使用命令行是\n```bash\noathtool -b --totp <identity>\n```\n`<identity>`为用于生成二次验证的身份码。\n\n# `sshpass`\n`sshpass`可以用于在命令行输入密码, 命令行如下:\n```bash\nsshpass -p <password> <user>@<hostname>\n```\n通过结合`oathtool`, 可以实现免二次验证:\n```bash\n#！/bin/bash\ntotp=`oathtool -b --totp <identity>`\nsshpass -p \"<password> $totp\" <user>@<hostname>\n```\n\n# `expect`\n`expect`命令可以用于与终端进行交互, `expect`使用的是tcl语言, 这里不准备说明语法，只说明对应的一些用法\n","source":"_posts/ssh登陆相关.md","raw":"---\ntitle: ssh登陆相关\ndate: 2023-03-01 13:50:51\ntags:\n    - ssh\ncatagories:\n    - 计算机\n---\n# 密钥登陆\nlinux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥, 生成密钥的命令为:\n```bash\nssh-keygen\n```\n其中需要输入文件名和key的类型。  \n使用`ssh-copy-id`命令可以将`filename.pub`公钥分发给远程主机:\n```bash\nssh-copy-id hapo@webserver1\n```\n以上命令会将默认公钥分发过去, 也可以使用\n```bash\nssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1\n```\n指定需要分发的公钥。  \n此时就能不需要密码登陆远程服务器, 若密钥名字不是默认的名字(`~/.ssh/id_rsa`等), 则可以用以下命令指定:\n```bash\nssh -i ~/.ssh/filename hapo@websever1\n```\n另外可以使用以下命令查看密钥和公钥对应的指纹:\n```bash\nssh-keygen -l -f ~/.ssh/filename\nssh-keygen -l -f ~/.ssh/filename.pub\n```\n<!--more-->\n# ssh配置文件\n可以在`~/.ssh/config`中写如下命令简化`ssh`登陆时所需参数:\n```bash\nHost hapo\n    HostName ip\n    Port 22\n    User hapo\n    IdentityFile ~/.ssh/id_rsa\n    ServerAliveInterval 60 # 每60秒发送一次空请求\n    ServerAliveCountMax 10 # 断开时重新连接的次数\n```\n\n# 使用`ssh-agent`和`ssh-add`\n`ssh-agent`可以记录密钥的指纹, 并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。\n启动`ssh-agent`的命令为\n```bash\neval `ssh-agent`\n```\n接下里就可以使用`ssh-add`添加密钥指纹\n```bash\nssh-add #添加默认的密钥指纹\nssh-add ~/.ssh/id_rsa_1 #指定密钥的指纹\n```\n可以用以下命令查看添加过的密钥指纹\n```bash\nssh-add -L\n```\n可以用以下命令修改添加过的密钥指纹\n```bash\nssh-add -D # 删除ssh-agent中的所有密钥指纹\nssh-add -d key_file # 删除指定密钥指纹\n```\n另外, 杀掉现在正在运行的`ssh-agent`的命令为\n```bash\nssh-agent -k\n```\n# `oathtool`\n`oathtool`可以用于生成二次验证, 其使用命令行是\n```bash\noathtool -b --totp <identity>\n```\n`<identity>`为用于生成二次验证的身份码。\n\n# `sshpass`\n`sshpass`可以用于在命令行输入密码, 命令行如下:\n```bash\nsshpass -p <password> <user>@<hostname>\n```\n通过结合`oathtool`, 可以实现免二次验证:\n```bash\n#！/bin/bash\ntotp=`oathtool -b --totp <identity>`\nsshpass -p \"<password> $totp\" <user>@<hostname>\n```\n\n# `expect`\n`expect`命令可以用于与终端进行交互, `expect`使用的是tcl语言, 这里不准备说明语法，只说明对应的一些用法\n","slug":"ssh登陆相关","published":1,"updated":"2023-04-07T04:17:44.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhj8prdv0000maqh5wim8ehn","content":"<h1 id=\"密钥登陆\">密钥登陆</h1>\n<p>linux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥,\n生成密钥的命令为: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure> 其中需要输入文件名和key的类型。<br />\n使用<code>ssh-copy-id</code>命令可以将<code>filename.pub</code>公钥分发给远程主机:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id hapo@webserver1</span><br></pre></td></tr></table></figure> 以上命令会将默认公钥分发过去, 也可以使用 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1</span><br></pre></td></tr></table></figure>\n指定需要分发的公钥。<br />\n此时就能不需要密码登陆远程服务器,\n若密钥名字不是默认的名字(<code>~/.ssh/id_rsa</code>等),\n则可以用以下命令指定: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/filename hapo@websever1</span><br></pre></td></tr></table></figure>\n另外可以使用以下命令查看密钥和公钥对应的指纹: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename</span><br><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename.pub</span><br></pre></td></tr></table></figure> <span id=\"more\"></span>\n# ssh配置文件\n可以在<code>~/.ssh/config</code>中写如下命令简化<code>ssh</code>登陆时所需参数:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host hapo</span><br><span class=\"line\">    HostName ip</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    User hapo</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">    ServerAliveInterval 60 <span class=\"comment\"># 每60秒发送一次空请求</span></span><br><span class=\"line\">    ServerAliveCountMax 10 <span class=\"comment\"># 断开时重新连接的次数</span></span><br></pre></td></tr></table></figure></p>\n<h1\nid=\"使用ssh-agent和ssh-add\">使用<code>ssh-agent</code>和<code>ssh-add</code></h1>\n<p><code>ssh-agent</code>可以记录密钥的指纹,\n并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。\n启动<code>ssh-agent</code>的命令为 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure>\n接下里就可以使用<code>ssh-add</code>添加密钥指纹 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add <span class=\"comment\">#添加默认的密钥指纹</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_1 <span class=\"comment\">#指定密钥的指纹</span></span><br></pre></td></tr></table></figure>\n可以用以下命令查看添加过的密钥指纹 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -L</span><br></pre></td></tr></table></figure>\n可以用以下命令修改添加过的密钥指纹 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -D <span class=\"comment\"># 删除ssh-agent中的所有密钥指纹</span></span><br><span class=\"line\">ssh-add -d key_file <span class=\"comment\"># 删除指定密钥指纹</span></span><br></pre></td></tr></table></figure> 另外,\n杀掉现在正在运行的<code>ssh-agent</code>的命令为 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -k</span><br></pre></td></tr></table></figure> #\n<code>oathtool</code> <code>oathtool</code>可以用于生成二次验证,\n其使用命令行是 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oathtool -b --totp &lt;identity&gt;</span><br></pre></td></tr></table></figure>\n<code>&lt;identity&gt;</code>为用于生成二次验证的身份码。</p>\n<h1 id=\"sshpass\"><code>sshpass</code></h1>\n<p><code>sshpass</code>可以用于在命令行输入密码, 命令行如下:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -p &lt;password&gt; &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure> 通过结合<code>oathtool</code>, 可以实现免二次验证:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/bin/bash</span></span><br><span class=\"line\">totp=`oathtool -b --totp &lt;identity&gt;`</span><br><span class=\"line\">sshpass -p <span class=\"string\">&quot;&lt;password&gt; <span class=\"variable\">$totp</span>&quot;</span> &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"expect\"><code>expect</code></h1>\n<p><code>expect</code>命令可以用于与终端进行交互,\n<code>expect</code>使用的是tcl语言,\n这里不准备说明语法，只说明对应的一些用法</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"密钥登陆\">密钥登陆</h1>\n<p>linux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥,\n生成密钥的命令为: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure> 其中需要输入文件名和key的类型。<br />\n使用<code>ssh-copy-id</code>命令可以将<code>filename.pub</code>公钥分发给远程主机:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id hapo@webserver1</span><br></pre></td></tr></table></figure> 以上命令会将默认公钥分发过去, 也可以使用 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1</span><br></pre></td></tr></table></figure>\n指定需要分发的公钥。<br />\n此时就能不需要密码登陆远程服务器,\n若密钥名字不是默认的名字(<code>~/.ssh/id_rsa</code>等),\n则可以用以下命令指定: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/filename hapo@websever1</span><br></pre></td></tr></table></figure>\n另外可以使用以下命令查看密钥和公钥对应的指纹: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename</span><br><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename.pub</span><br></pre></td></tr></table></figure>","more":"# ssh配置文件\n可以在<code>~/.ssh/config</code>中写如下命令简化<code>ssh</code>登陆时所需参数:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host hapo</span><br><span class=\"line\">    HostName ip</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    User hapo</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">    ServerAliveInterval 60 <span class=\"comment\"># 每60秒发送一次空请求</span></span><br><span class=\"line\">    ServerAliveCountMax 10 <span class=\"comment\"># 断开时重新连接的次数</span></span><br></pre></td></tr></table></figure></p>\n<h1\nid=\"使用ssh-agent和ssh-add\">使用<code>ssh-agent</code>和<code>ssh-add</code></h1>\n<p><code>ssh-agent</code>可以记录密钥的指纹,\n并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。\n启动<code>ssh-agent</code>的命令为 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure>\n接下里就可以使用<code>ssh-add</code>添加密钥指纹 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add <span class=\"comment\">#添加默认的密钥指纹</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_1 <span class=\"comment\">#指定密钥的指纹</span></span><br></pre></td></tr></table></figure>\n可以用以下命令查看添加过的密钥指纹 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -L</span><br></pre></td></tr></table></figure>\n可以用以下命令修改添加过的密钥指纹 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -D <span class=\"comment\"># 删除ssh-agent中的所有密钥指纹</span></span><br><span class=\"line\">ssh-add -d key_file <span class=\"comment\"># 删除指定密钥指纹</span></span><br></pre></td></tr></table></figure> 另外,\n杀掉现在正在运行的<code>ssh-agent</code>的命令为 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -k</span><br></pre></td></tr></table></figure> #\n<code>oathtool</code> <code>oathtool</code>可以用于生成二次验证,\n其使用命令行是 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oathtool -b --totp &lt;identity&gt;</span><br></pre></td></tr></table></figure>\n<code>&lt;identity&gt;</code>为用于生成二次验证的身份码。</p>\n<h1 id=\"sshpass\"><code>sshpass</code></h1>\n<p><code>sshpass</code>可以用于在命令行输入密码, 命令行如下:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -p &lt;password&gt; &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure> 通过结合<code>oathtool</code>, 可以实现免二次验证:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/bin/bash</span></span><br><span class=\"line\">totp=`oathtool -b --totp &lt;identity&gt;`</span><br><span class=\"line\">sshpass -p <span class=\"string\">&quot;&lt;password&gt; <span class=\"variable\">$totp</span>&quot;</span> &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"expect\"><code>expect</code></h1>\n<p><code>expect</code>命令可以用于与终端进行交互,\n<code>expect</code>使用的是tcl语言,\n这里不准备说明语法，只说明对应的一些用法</p>"},{"title":"安装amber22的坑","date":"2023-04-18T12:49:10.000Z","_content":"amber22已经把Amber部分开源了, 再加上最近需要使用amber, 所以将amber的安装研究了下, 经过两天的debug, 终于可以在集群上安装起来.\n\n## 最基本的安装过程\n\namber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹, 并且amber22已经不需要再分开编译serial, mpi, cuda版本, 只要开启了相应的选项就能都编译出来. 在`/path/to/amber22_src/build`中有`run_make`和`configure_make.py`两个文件. 其中, `run_make`写了基本的编译命令, 你需要对自己需要的选项进行修改从编译需要的版本, 而`configure_make.py`则是一个`python`脚本, 可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure. 当编译出现问题时, 可以用`clean_build`清理掉生成的文件.\n\n最基本的安装命令是\n\n```bash\n./run_make\nmake install\nsource /path/to/amber/amber.sh\n```\n\n如果amber源文件夹为`/path/to/amber22_src`, 则默认安装好的文件夹在`/path/to/amber`.\n<!--more-->\n\n## 配置python\n\namber22的一些程序需要python环境, 有很多方法可以python环境.\n\n### 1\n\namber22默认会下载miniconda, 这样可以搭建出amber22适配的环境. 安装完成后会生成一个`amber.python`软连接, 这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网, 此时可以如下操作: (1) 在`amber22_src/build`下新建文件夹`CMakeFiles/miniconda/download/`, 下载好`Miniconda3-latest-Linux-x86_64.sh`放入该文件夹中, 之后cmake会认为该文件已下载好, 从而跳过下载过程. (2) 修改`amber22_src/cmake`文件夹下的`UseMiniconda.cmake`文件, 修改91行\n\n```cmake\n91  set(INSTALLER_URL \"http://repo.continuum.io/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n例如修改成如下\n\n```cmake\n91  set(INSTALLER_URL \"http://mirrors.nju.edu.cn/anaconda/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网, 因此我们可以配置成内网的镜像. 可以修改家目录下的`.condarc`文件\n\n```json\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirror.nju.edu.cn/anaconda/pkgs/main\n  - https://mirror.nju.edu.cn/anaconda/pkgs/r\n  - https://mirror.nju.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirror.nju.edu.cn/anaconda/cloud\n  msys2: https://mirror.nju.edu.cn/anaconda/cloud\n  bioconda: https://mirror.nju.edu.cn/anaconda/cloud\n  menpo: https://mirror.nju.edu.cn/anaconda/cloud\n  pytorch: https://mirror.nju.edu.cn/anaconda/cloud\n  simpleitk: https://mirror.nju.edu.cn/anaconda/cloud\n```\n\n以及配置pip\n\n```bash\npip config set global.index-url https://mirror.nju.edu.cn/pypi/web/simple/\n```\n\n此时会在家目录下生成如下配置文件`～/.config/pip/pip.conf`, 其中内容为\n\n```json\n[global]\nindex-url = https://mirror.nju.edu.cn/pypi/web/simple/\n\n```\n\n这样后使用miniconda的python环境就可以顺利安装了.\n\n### 2\n\n如果已经在本地装过anaconda, 那么我们就可以用anaconda生成一个安装amber22的本地环境, 这样可以和已经安装过的python库同时在一个环境下使用. 使用本地python环境需要设置如下的选项`-DDOWNLOAD_MINICONDA=FALSE`(不下载miniconda)和`-DUSE_CONDA_LIBS=TRUE`(使用conda的python库). 可以用以下命令生成一个新的环境.\n\n```bash\nconda create -n amber python=3.10\nconda activate amber\n```\n\namber22的安装需要一些python库\n\n```conda\nconda install numpy\nconda install scipy\nconda install matplotlib\nconda install setuptools\nconda install thinker\n```\n\n有的python库可能已经自带. 经过以上的配置, amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.\n\n## 其余的坑\n\n### Boost\n\namber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装, 或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译. 如果你确定系统中的版本可用, 那么可以设置`-DFORCE_EXTERNAL_LIBS='boost'`. amber22要编译自己的boost库需要zlib和bzip2, 其中zlib的缺失会在`run_make`的过程中检查到, 而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失, 那么可以使用anaconda安装库.  \n\n```bash\nconda install zlib #zlib 在前面的配置环境的时候已经安装了.\nconda install bzip2\n```\n\n### libSM\n\n在集群上, libSM库存在问题, 这会导致xaLeap编译出问题, 这时候我们可以使用anaconda安装该库文件.\n\n```bash\nconda install -c conda-forge xorg-libsm\n```\n\n并且设置如下两个变量： `-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include`和`-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so`\n\n并且设置`LD_LIBRARY_PATH`用于链接`libuuid.so`\n\n```bash\nexport LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:$LD_LIBRARY_PATH\n```\n\n> 这里实际上是系统的libsm库和uuid库的匹配有问题, 使用conda安装了libsm库后会下载uuid库, 而设置了`-DX11_SM_INCLUDE`、`-DX11_SM_LIB`和`LD_LIBRARY_PATH`后会使用anaconda下的libsm库并且会优先查找`/path/toanaconda3/env/amber/lib`下的uuid库. 通过使用`objdump -d /usr/lib64/libuuid.so.1`发现其中的函数名为`uuid_generate@@UUID_1.0`而不是`uuid_generate@UUID_1.0`.\n>\n> <font color='salmon'>更简单的方法是设置`-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/`来让cmake自动查找libsm库和uuid库, 这样就不用设置`-DX11_SM_LIB`和`-DX11_SM_INCLUDE_PATH`了, 也不需要设置系统的`LD_LIBRARY_PATH`.</font>\n>\n>> 实际上经过测试, 只设置了`-DX11_SM_INCLUDE`和`-DX11_SM_LIB`依旧会使用`/usr/lib64/libSM.so.1`.\n>>\n>> 只设置`LD_LIBRARY_PATH`也无法通过编译\n\n### 一些额外的选项\n\n1. `-DTRUST_SYSTEM_LIBS`: 相信系统的库文件, 开启后会将某些库会使用系统中自带的(例如boost), 开启命令`-DTRUST_SYSTEM_LIBS=TRUE`\n2. `-DDISABLE_TOOLS`: 关闭一些工具的编译, 例如`-DDISABLE_TOOLS=cpptraj`\n3. `-DFORCE_DISABLE_LIBS`: 关闭某些库文件, 使用`;`分隔开(注意用引号`'`引起来, 以防和bash冲突), 例如`-DFORCE_DISABLE_LIBS=boost`\n4. `-DFORCE_INTERNAL_LIBS`: 强制某些库文件使用内部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n5. `-DFORCE_EXTERNAL_LIBS`: 强制某些库文件使用外部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n\n### CUDA与INTEL编译器版本问题\n\n`run_cmake`会检查编译器的版本和CUDA版本, 如果版本不适配则会配置不通过. 但是当你使用intel编译器时, 它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本. 为了解决这个问题我们可以修改`/path/to/amber22_src/cmake/CudaConfig.cmake`文件的112行\n\n```cmake\n111             CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 12\n112             AND CUDA_VERSION VERSION_GREATER 11.6\n```\n\n将cuda的上限版本(11.6)调低即可, 我一般调至11.0.\n","source":"_posts/安装amber22的坑.md","raw":"---\ntitle: 安装amber22的坑\ndate: 2023-04-18 20:49:10\ncategories:\n    - 分子模拟\ntags:\n    - 软件安装\n---\namber22已经把Amber部分开源了, 再加上最近需要使用amber, 所以将amber的安装研究了下, 经过两天的debug, 终于可以在集群上安装起来.\n\n## 最基本的安装过程\n\namber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹, 并且amber22已经不需要再分开编译serial, mpi, cuda版本, 只要开启了相应的选项就能都编译出来. 在`/path/to/amber22_src/build`中有`run_make`和`configure_make.py`两个文件. 其中, `run_make`写了基本的编译命令, 你需要对自己需要的选项进行修改从编译需要的版本, 而`configure_make.py`则是一个`python`脚本, 可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure. 当编译出现问题时, 可以用`clean_build`清理掉生成的文件.\n\n最基本的安装命令是\n\n```bash\n./run_make\nmake install\nsource /path/to/amber/amber.sh\n```\n\n如果amber源文件夹为`/path/to/amber22_src`, 则默认安装好的文件夹在`/path/to/amber`.\n<!--more-->\n\n## 配置python\n\namber22的一些程序需要python环境, 有很多方法可以python环境.\n\n### 1\n\namber22默认会下载miniconda, 这样可以搭建出amber22适配的环境. 安装完成后会生成一个`amber.python`软连接, 这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网, 此时可以如下操作: (1) 在`amber22_src/build`下新建文件夹`CMakeFiles/miniconda/download/`, 下载好`Miniconda3-latest-Linux-x86_64.sh`放入该文件夹中, 之后cmake会认为该文件已下载好, 从而跳过下载过程. (2) 修改`amber22_src/cmake`文件夹下的`UseMiniconda.cmake`文件, 修改91行\n\n```cmake\n91  set(INSTALLER_URL \"http://repo.continuum.io/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n例如修改成如下\n\n```cmake\n91  set(INSTALLER_URL \"http://mirrors.nju.edu.cn/anaconda/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网, 因此我们可以配置成内网的镜像. 可以修改家目录下的`.condarc`文件\n\n```json\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirror.nju.edu.cn/anaconda/pkgs/main\n  - https://mirror.nju.edu.cn/anaconda/pkgs/r\n  - https://mirror.nju.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirror.nju.edu.cn/anaconda/cloud\n  msys2: https://mirror.nju.edu.cn/anaconda/cloud\n  bioconda: https://mirror.nju.edu.cn/anaconda/cloud\n  menpo: https://mirror.nju.edu.cn/anaconda/cloud\n  pytorch: https://mirror.nju.edu.cn/anaconda/cloud\n  simpleitk: https://mirror.nju.edu.cn/anaconda/cloud\n```\n\n以及配置pip\n\n```bash\npip config set global.index-url https://mirror.nju.edu.cn/pypi/web/simple/\n```\n\n此时会在家目录下生成如下配置文件`～/.config/pip/pip.conf`, 其中内容为\n\n```json\n[global]\nindex-url = https://mirror.nju.edu.cn/pypi/web/simple/\n\n```\n\n这样后使用miniconda的python环境就可以顺利安装了.\n\n### 2\n\n如果已经在本地装过anaconda, 那么我们就可以用anaconda生成一个安装amber22的本地环境, 这样可以和已经安装过的python库同时在一个环境下使用. 使用本地python环境需要设置如下的选项`-DDOWNLOAD_MINICONDA=FALSE`(不下载miniconda)和`-DUSE_CONDA_LIBS=TRUE`(使用conda的python库). 可以用以下命令生成一个新的环境.\n\n```bash\nconda create -n amber python=3.10\nconda activate amber\n```\n\namber22的安装需要一些python库\n\n```conda\nconda install numpy\nconda install scipy\nconda install matplotlib\nconda install setuptools\nconda install thinker\n```\n\n有的python库可能已经自带. 经过以上的配置, amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.\n\n## 其余的坑\n\n### Boost\n\namber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装, 或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译. 如果你确定系统中的版本可用, 那么可以设置`-DFORCE_EXTERNAL_LIBS='boost'`. amber22要编译自己的boost库需要zlib和bzip2, 其中zlib的缺失会在`run_make`的过程中检查到, 而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失, 那么可以使用anaconda安装库.  \n\n```bash\nconda install zlib #zlib 在前面的配置环境的时候已经安装了.\nconda install bzip2\n```\n\n### libSM\n\n在集群上, libSM库存在问题, 这会导致xaLeap编译出问题, 这时候我们可以使用anaconda安装该库文件.\n\n```bash\nconda install -c conda-forge xorg-libsm\n```\n\n并且设置如下两个变量： `-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include`和`-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so`\n\n并且设置`LD_LIBRARY_PATH`用于链接`libuuid.so`\n\n```bash\nexport LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:$LD_LIBRARY_PATH\n```\n\n> 这里实际上是系统的libsm库和uuid库的匹配有问题, 使用conda安装了libsm库后会下载uuid库, 而设置了`-DX11_SM_INCLUDE`、`-DX11_SM_LIB`和`LD_LIBRARY_PATH`后会使用anaconda下的libsm库并且会优先查找`/path/toanaconda3/env/amber/lib`下的uuid库. 通过使用`objdump -d /usr/lib64/libuuid.so.1`发现其中的函数名为`uuid_generate@@UUID_1.0`而不是`uuid_generate@UUID_1.0`.\n>\n> <font color='salmon'>更简单的方法是设置`-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/`来让cmake自动查找libsm库和uuid库, 这样就不用设置`-DX11_SM_LIB`和`-DX11_SM_INCLUDE_PATH`了, 也不需要设置系统的`LD_LIBRARY_PATH`.</font>\n>\n>> 实际上经过测试, 只设置了`-DX11_SM_INCLUDE`和`-DX11_SM_LIB`依旧会使用`/usr/lib64/libSM.so.1`.\n>>\n>> 只设置`LD_LIBRARY_PATH`也无法通过编译\n\n### 一些额外的选项\n\n1. `-DTRUST_SYSTEM_LIBS`: 相信系统的库文件, 开启后会将某些库会使用系统中自带的(例如boost), 开启命令`-DTRUST_SYSTEM_LIBS=TRUE`\n2. `-DDISABLE_TOOLS`: 关闭一些工具的编译, 例如`-DDISABLE_TOOLS=cpptraj`\n3. `-DFORCE_DISABLE_LIBS`: 关闭某些库文件, 使用`;`分隔开(注意用引号`'`引起来, 以防和bash冲突), 例如`-DFORCE_DISABLE_LIBS=boost`\n4. `-DFORCE_INTERNAL_LIBS`: 强制某些库文件使用内部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n5. `-DFORCE_EXTERNAL_LIBS`: 强制某些库文件使用外部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n\n### CUDA与INTEL编译器版本问题\n\n`run_cmake`会检查编译器的版本和CUDA版本, 如果版本不适配则会配置不通过. 但是当你使用intel编译器时, 它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本. 为了解决这个问题我们可以修改`/path/to/amber22_src/cmake/CudaConfig.cmake`文件的112行\n\n```cmake\n111             CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 12\n112             AND CUDA_VERSION VERSION_GREATER 11.6\n```\n\n将cuda的上限版本(11.6)调低即可, 我一般调至11.0.\n","slug":"安装amber22的坑","published":1,"updated":"2023-04-29T06:11:36.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhj8prdy0001maqh5emd47we","content":"<p>amber22已经把Amber部分开源了, 再加上最近需要使用amber,\n所以将amber的安装研究了下, 经过两天的debug,\n终于可以在集群上安装起来.</p>\n<h2 id=\"最基本的安装过程\">最基本的安装过程</h2>\n<p>amber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹,\n并且amber22已经不需要再分开编译serial, mpi, cuda版本,\n只要开启了相应的选项就能都编译出来.\n在<code>/path/to/amber22_src/build</code>中有<code>run_make</code>和<code>configure_make.py</code>两个文件.\n其中, <code>run_make</code>写了基本的编译命令,\n你需要对自己需要的选项进行修改从编译需要的版本,\n而<code>configure_make.py</code>则是一个<code>python</code>脚本,\n可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure.\n当编译出现问题时, 可以用<code>clean_build</code>清理掉生成的文件.</p>\n<p>最基本的安装命令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./run_make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">source</span> /path/to/amber/amber.sh</span><br></pre></td></tr></table></figure>\n<p>如果amber源文件夹为<code>/path/to/amber22_src</code>,\n则默认安装好的文件夹在<code>/path/to/amber</code>. <span id=\"more\"></span></p>\n<h2 id=\"配置python\">配置python</h2>\n<p>amber22的一些程序需要python环境, 有很多方法可以python环境.</p>\n<h3 id=\"section\">1</h3>\n<p>amber22默认会下载miniconda, 这样可以搭建出amber22适配的环境.\n安装完成后会生成一个<code>amber.python</code>软连接,\n这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网,\n此时可以如下操作: (1)\n在<code>amber22_src/build</code>下新建文件夹<code>CMakeFiles/miniconda/download/</code>,\n下载好<code>Miniconda3-latest-Linux-x86_64.sh</code>放入该文件夹中,\n之后cmake会认为该文件已下载好, 从而跳过下载过程. (2)\n修改<code>amber22_src/cmake</code>文件夹下的<code>UseMiniconda.cmake</code>文件,\n修改91行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://repo.continuum.io/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>例如修改成如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://mirrors.nju.edu.cn/anaconda/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网,\n因此我们可以配置成内网的镜像.\n可以修改家目录下的<code>.condarc</code>文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">default_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/main</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/r</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/msys2</span></span><br><span class=\"line\">custom_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  conda-forge<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  msys2<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  bioconda<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  menpo<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  pytorch<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  simpleitk<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br></pre></td></tr></table></figure>\n<p>以及配置pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://mirror.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>\n<p>此时会在家目录下生成如下配置文件<code>～/.config/pip/pip.conf</code>,\n其中内容为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span>global<span class=\"punctuation\">]</span></span><br><span class=\"line\">index-url = https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/pypi/web/simple/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样后使用miniconda的python环境就可以顺利安装了.</p>\n<h3 id=\"section-1\">2</h3>\n<p>如果已经在本地装过anaconda,\n那么我们就可以用anaconda生成一个安装amber22的本地环境,\n这样可以和已经安装过的python库同时在一个环境下使用.\n使用本地python环境需要设置如下的选项<code>-DDOWNLOAD_MINICONDA=FALSE</code>(不下载miniconda)和<code>-DUSE_CONDA_LIBS=TRUE</code>(使用conda的python库).\n可以用以下命令生成一个新的环境.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n amber python=3.10</span><br><span class=\"line\">conda activate amber</span><br></pre></td></tr></table></figure>\n<p>amber22的安装需要一些python库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy</span><br><span class=\"line\">conda install scipy</span><br><span class=\"line\">conda install matplotlib</span><br><span class=\"line\">conda install setuptools</span><br><span class=\"line\">conda install thinker</span><br></pre></td></tr></table></figure>\n<p>有的python库可能已经自带. 经过以上的配置,\namber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.</p>\n<h2 id=\"其余的坑\">其余的坑</h2>\n<h3 id=\"boost\">Boost</h3>\n<p>amber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装,\n或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译.\n如果你确定系统中的版本可用,\n那么可以设置<code>-DFORCE_EXTERNAL_LIBS='boost'</code>.\namber22要编译自己的boost库需要zlib和bzip2,\n其中zlib的缺失会在<code>run_make</code>的过程中检查到,\n而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失,\n那么可以使用anaconda安装库.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install zlib <span class=\"comment\">#zlib 在前面的配置环境的时候已经安装了.</span></span><br><span class=\"line\">conda install bzip2</span><br></pre></td></tr></table></figure>\n<h3 id=\"libsm\">libSM</h3>\n<p>在集群上, libSM库存在问题, 这会导致xaLeap编译出问题,\n这时候我们可以使用anaconda安装该库文件.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c conda-forge xorg-libsm</span><br></pre></td></tr></table></figure>\n<p>并且设置如下两个变量：\n<code>-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include</code>和<code>-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so</code></p>\n<p>并且设置<code>LD_LIBRARY_PATH</code>用于链接<code>libuuid.so</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里实际上是系统的libsm库和uuid库的匹配有问题,\n使用conda安装了libsm库后会下载uuid库,\n而设置了<code>-DX11_SM_INCLUDE</code>、<code>-DX11_SM_LIB</code>和<code>LD_LIBRARY_PATH</code>后会使用anaconda下的libsm库并且会优先查找<code>/path/toanaconda3/env/amber/lib</code>下的uuid库.\n通过使用<code>objdump -d /usr/lib64/libuuid.so.1</code>发现其中的函数名为<code>uuid_generate@@UUID_1.0</code>而不是<code>uuid_generate@UUID_1.0</code>.</p>\n<p><font color='salmon'>更简单的方法是设置<code>-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/</code>来让cmake自动查找libsm库和uuid库,\n这样就不用设置<code>-DX11_SM_LIB</code>和<code>-DX11_SM_INCLUDE_PATH</code>了,\n也不需要设置系统的<code>LD_LIBRARY_PATH</code>.</font></p>\n<blockquote>\n<p>实际上经过测试,\n只设置了<code>-DX11_SM_INCLUDE</code>和<code>-DX11_SM_LIB</code>依旧会使用<code>/usr/lib64/libSM.so.1</code>.</p>\n<p>只设置<code>LD_LIBRARY_PATH</code>也无法通过编译</p>\n</blockquote>\n</blockquote>\n<h3 id=\"一些额外的选项\">一些额外的选项</h3>\n<ol type=\"1\">\n<li><code>-DTRUST_SYSTEM_LIBS</code>: 相信系统的库文件,\n开启后会将某些库会使用系统中自带的(例如boost),\n开启命令<code>-DTRUST_SYSTEM_LIBS=TRUE</code></li>\n<li><code>-DDISABLE_TOOLS</code>: 关闭一些工具的编译,\n例如<code>-DDISABLE_TOOLS=cpptraj</code></li>\n<li><code>-DFORCE_DISABLE_LIBS</code>: 关闭某些库文件,\n使用<code>;</code>分隔开(注意用引号<code>'</code>引起来,\n以防和bash冲突), 例如<code>-DFORCE_DISABLE_LIBS=boost</code></li>\n<li><code>-DFORCE_INTERNAL_LIBS</code>: 强制某些库文件使用内部编译,\n例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n<li><code>-DFORCE_EXTERNAL_LIBS</code>: 强制某些库文件使用外部编译,\n例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n</ol>\n<h3 id=\"cuda与intel编译器版本问题\">CUDA与INTEL编译器版本问题</h3>\n<p><code>run_cmake</code>会检查编译器的版本和CUDA版本,\n如果版本不适配则会配置不通过. 但是当你使用intel编译器时,\n它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本.\n为了解决这个问题我们可以修改<code>/path/to/amber22_src/cmake/CudaConfig.cmake</code>文件的112行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">111</span>             CMAKE_CXX_COMPILER_VERSION <span class=\"keyword\">VERSION_GREATER_EQUAL</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">112</span>             <span class=\"keyword\">AND</span> CUDA_VERSION <span class=\"keyword\">VERSION_GREATER</span> <span class=\"number\">11.6</span></span><br></pre></td></tr></table></figure>\n<p>将cuda的上限版本(11.6)调低即可, 我一般调至11.0.</p>\n","site":{"data":{}},"excerpt":"<p>amber22已经把Amber部分开源了, 再加上最近需要使用amber,\n所以将amber的安装研究了下, 经过两天的debug,\n终于可以在集群上安装起来.</p>\n<h2 id=\"最基本的安装过程\">最基本的安装过程</h2>\n<p>amber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹,\n并且amber22已经不需要再分开编译serial, mpi, cuda版本,\n只要开启了相应的选项就能都编译出来.\n在<code>/path/to/amber22_src/build</code>中有<code>run_make</code>和<code>configure_make.py</code>两个文件.\n其中, <code>run_make</code>写了基本的编译命令,\n你需要对自己需要的选项进行修改从编译需要的版本,\n而<code>configure_make.py</code>则是一个<code>python</code>脚本,\n可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure.\n当编译出现问题时, 可以用<code>clean_build</code>清理掉生成的文件.</p>\n<p>最基本的安装命令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./run_make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">source</span> /path/to/amber/amber.sh</span><br></pre></td></tr></table></figure>\n<p>如果amber源文件夹为<code>/path/to/amber22_src</code>,\n则默认安装好的文件夹在<code>/path/to/amber</code>.","more":"</p>\n<h2 id=\"配置python\">配置python</h2>\n<p>amber22的一些程序需要python环境, 有很多方法可以python环境.</p>\n<h3 id=\"section\">1</h3>\n<p>amber22默认会下载miniconda, 这样可以搭建出amber22适配的环境.\n安装完成后会生成一个<code>amber.python</code>软连接,\n这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网,\n此时可以如下操作: (1)\n在<code>amber22_src/build</code>下新建文件夹<code>CMakeFiles/miniconda/download/</code>,\n下载好<code>Miniconda3-latest-Linux-x86_64.sh</code>放入该文件夹中,\n之后cmake会认为该文件已下载好, 从而跳过下载过程. (2)\n修改<code>amber22_src/cmake</code>文件夹下的<code>UseMiniconda.cmake</code>文件,\n修改91行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://repo.continuum.io/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>例如修改成如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://mirrors.nju.edu.cn/anaconda/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网,\n因此我们可以配置成内网的镜像.\n可以修改家目录下的<code>.condarc</code>文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">default_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/main</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/r</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/msys2</span></span><br><span class=\"line\">custom_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  conda-forge<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  msys2<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  bioconda<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  menpo<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  pytorch<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  simpleitk<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br></pre></td></tr></table></figure>\n<p>以及配置pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://mirror.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>\n<p>此时会在家目录下生成如下配置文件<code>～/.config/pip/pip.conf</code>,\n其中内容为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span>global<span class=\"punctuation\">]</span></span><br><span class=\"line\">index-url = https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/pypi/web/simple/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样后使用miniconda的python环境就可以顺利安装了.</p>\n<h3 id=\"section-1\">2</h3>\n<p>如果已经在本地装过anaconda,\n那么我们就可以用anaconda生成一个安装amber22的本地环境,\n这样可以和已经安装过的python库同时在一个环境下使用.\n使用本地python环境需要设置如下的选项<code>-DDOWNLOAD_MINICONDA=FALSE</code>(不下载miniconda)和<code>-DUSE_CONDA_LIBS=TRUE</code>(使用conda的python库).\n可以用以下命令生成一个新的环境.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n amber python=3.10</span><br><span class=\"line\">conda activate amber</span><br></pre></td></tr></table></figure>\n<p>amber22的安装需要一些python库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy</span><br><span class=\"line\">conda install scipy</span><br><span class=\"line\">conda install matplotlib</span><br><span class=\"line\">conda install setuptools</span><br><span class=\"line\">conda install thinker</span><br></pre></td></tr></table></figure>\n<p>有的python库可能已经自带. 经过以上的配置,\namber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.</p>\n<h2 id=\"其余的坑\">其余的坑</h2>\n<h3 id=\"boost\">Boost</h3>\n<p>amber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装,\n或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译.\n如果你确定系统中的版本可用,\n那么可以设置<code>-DFORCE_EXTERNAL_LIBS='boost'</code>.\namber22要编译自己的boost库需要zlib和bzip2,\n其中zlib的缺失会在<code>run_make</code>的过程中检查到,\n而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失,\n那么可以使用anaconda安装库.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install zlib <span class=\"comment\">#zlib 在前面的配置环境的时候已经安装了.</span></span><br><span class=\"line\">conda install bzip2</span><br></pre></td></tr></table></figure>\n<h3 id=\"libsm\">libSM</h3>\n<p>在集群上, libSM库存在问题, 这会导致xaLeap编译出问题,\n这时候我们可以使用anaconda安装该库文件.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c conda-forge xorg-libsm</span><br></pre></td></tr></table></figure>\n<p>并且设置如下两个变量：\n<code>-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include</code>和<code>-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so</code></p>\n<p>并且设置<code>LD_LIBRARY_PATH</code>用于链接<code>libuuid.so</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里实际上是系统的libsm库和uuid库的匹配有问题,\n使用conda安装了libsm库后会下载uuid库,\n而设置了<code>-DX11_SM_INCLUDE</code>、<code>-DX11_SM_LIB</code>和<code>LD_LIBRARY_PATH</code>后会使用anaconda下的libsm库并且会优先查找<code>/path/toanaconda3/env/amber/lib</code>下的uuid库.\n通过使用<code>objdump -d /usr/lib64/libuuid.so.1</code>发现其中的函数名为<code>uuid_generate@@UUID_1.0</code>而不是<code>uuid_generate@UUID_1.0</code>.</p>\n<p><font color='salmon'>更简单的方法是设置<code>-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/</code>来让cmake自动查找libsm库和uuid库,\n这样就不用设置<code>-DX11_SM_LIB</code>和<code>-DX11_SM_INCLUDE_PATH</code>了,\n也不需要设置系统的<code>LD_LIBRARY_PATH</code>.</font></p>\n<blockquote>\n<p>实际上经过测试,\n只设置了<code>-DX11_SM_INCLUDE</code>和<code>-DX11_SM_LIB</code>依旧会使用<code>/usr/lib64/libSM.so.1</code>.</p>\n<p>只设置<code>LD_LIBRARY_PATH</code>也无法通过编译</p>\n</blockquote>\n</blockquote>\n<h3 id=\"一些额外的选项\">一些额外的选项</h3>\n<ol type=\"1\">\n<li><code>-DTRUST_SYSTEM_LIBS</code>: 相信系统的库文件,\n开启后会将某些库会使用系统中自带的(例如boost),\n开启命令<code>-DTRUST_SYSTEM_LIBS=TRUE</code></li>\n<li><code>-DDISABLE_TOOLS</code>: 关闭一些工具的编译,\n例如<code>-DDISABLE_TOOLS=cpptraj</code></li>\n<li><code>-DFORCE_DISABLE_LIBS</code>: 关闭某些库文件,\n使用<code>;</code>分隔开(注意用引号<code>'</code>引起来,\n以防和bash冲突), 例如<code>-DFORCE_DISABLE_LIBS=boost</code></li>\n<li><code>-DFORCE_INTERNAL_LIBS</code>: 强制某些库文件使用内部编译,\n例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n<li><code>-DFORCE_EXTERNAL_LIBS</code>: 强制某些库文件使用外部编译,\n例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n</ol>\n<h3 id=\"cuda与intel编译器版本问题\">CUDA与INTEL编译器版本问题</h3>\n<p><code>run_cmake</code>会检查编译器的版本和CUDA版本,\n如果版本不适配则会配置不通过. 但是当你使用intel编译器时,\n它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本.\n为了解决这个问题我们可以修改<code>/path/to/amber22_src/cmake/CudaConfig.cmake</code>文件的112行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">111</span>             CMAKE_CXX_COMPILER_VERSION <span class=\"keyword\">VERSION_GREATER_EQUAL</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">112</span>             <span class=\"keyword\">AND</span> CUDA_VERSION <span class=\"keyword\">VERSION_GREATER</span> <span class=\"number\">11.6</span></span><br></pre></td></tr></table></figure>\n<p>将cuda的上限版本(11.6)调低即可, 我一般调至11.0.</p>"},{"title":"计算机系统基础习题","date":"2023-01-28T14:13:09.000Z","mathjax":true,"_content":"# 第一章\n## 1.   \n**中央处理器(CPU)**: 控制部件、运算部件和各类寄存器互连组成的电路(Central Processing Unit)。  \n**算数逻辑部件(ALU)**: 用来进行算术逻辑运算的部件(Arithmetic Logic Unit)。  \n**通用寄存器**: 用于临时存放从主存取来的数据或运算的结果。  \n**程序计数器(PC)**: 用于CPU自动按序读取主存中的指令, 在执行当前指令过程中, 会自动计算出下一条指令地址并送到PC中保存。  \n**指令寄存器**: 保存从主存中取出的指令的寄存器。  \n**控制器**:  用于自动逐条取出指令并译码的部件。   \n**主存储器**:  用来存放指令和数据。  \n**总线**:  连接不同部件进行信息传输的介质。\n<!--more-->  \n**主存地址寄存器(MAR)**: CPU送到地址线的主存地址先存放在主存地址寄存器(MAR)。   \n**主存数据寄存器(MDR)**: 发送到或从数据线取来的信息存放在主存数据寄存器(MDR)中。 \n**指令操作码**: 指出指令的操作类型。 \n**微操作**: 组成指令的若干个操作。  \n**机器指令**: 计算机能理解和执行的由0和1组成的指令。  \n**高级程序设计语言**: 面向算法设计的、较接近于日常英语书面语言的程序设计语言。  \n**汇编语言**: 用简短的英文符号和机器指令建立对应关系，以方便程序员编写和阅读程序的机器语言的符号表示语言。  \n**机器语言**: 使用特定计算机规定的指令格式而形成的0/1序列。   \n**机器级语言**: 汇编语言和机器语言。  \n**源程序**: 被翻译程序翻译的语言。  \n**目标程序**: 翻译程序翻译生成的语言。  \n**编译程序**: 实现将高级语言源程序翻译成汇编语言或机器语言目标程序的程序。  \n**解释程序**: 实现将源程序中的语句按其执行顺序逐条翻译成机器指令并立即执行的程序。  \n**汇编程序**: 实现将汇编语言源程序翻译成机器语言目标程序的程序。  \n**语言处理系统**: 提供程序编辑器和各类翻译转换软件的工具包。  \n**设备控制器**: I/O控制器或I/O控制器。  \n**最终用户**: 使用应用软件完成特定任务的计算机用户。  \n**系统管理员**: 利用操作系统、数据库管理系统等软件提供的功能对系统进行配置、管理和维护，以建立高效合理的系统环境供计算机用户使用的操作人员。  \n**应用程序员**: 使用高级编程语言编制应用软件的程序员。  \n**系统程序员**: 设计和开发系统软件的程序员。  \n**指令集体系结构(ISA)**: 介于软件和硬件之间的接口。  \n**微体系结构**:  ISA具体实现的组织。  \n**透明**: 对实际存在的事物或概念感受不到。  \n**响应时间**: 从作业提交开始到作业完成所用的时间。  \n**吞吐率**: 在单位时间内所完成的工作量。  \n**用户CPU时间**: 真正用于运行用户程序代码的时间。  \n**系统CPU时间**: 执行用户程序而需要CPU运行操作系统程序的时间。  \n**系统性能**: 系统的响应时间。  \n**CPU性能**: 用户CPU时间。  \n**时钟周期**: CPU的主脉冲信号的宽度。  \n**主频**: CPU中的主脉冲信号的时钟频率。  \n**CPI**: 一条指令所需的时钟周期数。  \n**基准程序**: 专门用来进行性能评价的一组程序。  \n**SPEC基准程序集**: 由Sun、MIPS、HP、Apollo、DEC五家公司提出的基准程序集。  \n**SPEC比值**: 测试程序在Sun SPARCstation上运行的执行时间除以该程序在测试机器上的执行时间所得到的比值。  \n**MIPS**: 平均每秒执行多少百万条指令。  \n**峰值MIPS**: 选取一组指令组合，使得得到的平均CPI最次，由此得到的MIPS。  \n**相对MIPS**: 根据某个公认的参考机型来定义的相应MIPS值。  \n**MFLOPS(GFLOPS、TFLOPS、PFLOPS、EFLOPS)**: 每秒所执行的浮点运算由多少百万次。  \n\n## 2.  \n(1)冯·诺依曼计算机由运算器、控制器、存储器、输入设备、输出设备5个基本部件组成。控制器应能自动执行指令；运算器应能进行算术运算，也能进行逻辑运算；存储器不仅能存放数据，也能存放指令；操作人员可以通过输入/输出设备使用计算机。  \n(2)**存储程序**方式的基本思想是: 必须将实现编好的程序和原始数据送入主存中后才能执行程序，以蛋程序被启动执行，计算机能在不需操作人员干预下自动完成逐条指令取出和执行任务。  \n(3)一条指令的执行过程包含取指令，指令译码，PC增量，取操作数并执行，送结果这些过程。  \n(4)计算机系统的层次结构按照应用(问题)，算法，编程(语言)，操作系统/虚拟机，指令集体系结构(ISA)，微体系结构，功能部件，电路，器件划分。  \n(5)计算机系统的用户可以分为最终用户，系统管理员，应用程序员，系统程序员划分。最终用户工作在应用程序层，应用程序员工作在编译程序和汇编程序层次，系统管理员工作在操作系统层次，系统程序员工作在汇编程序和指令集体系结构层次。  \n(6)程序的CPI和程序中各种指令的比例以及指令的CPI有关。  \n(7)因为不同的机器的指令集不同，而且指令的功能也不同同样的指令条数所完成的功能可能完全不同，并且不同的机器的CPI和时钟周期也不同，同一条指令在不同机器上所用的时间不同。  \n\n## 3.  \n计算机将程序中的一条条指令读入主存中，通过控制器控制指令的读取，通过运算器进行运算，接着再执行下一条指令。  \n\n## 4.  \n熟悉的部分是操作系统，编译语言和应用程序，对计算机指令集体系结构，数字设计和电路设计不熟悉，想要更进一步了解计算机指令集体系结构。  \n\n## 5.  \n| 主存地址 | 主存单元内容 | 内容说明(Ii表示第i条指令) | 指令的符号表示 |\n| ---- | ---- | ---- | ---- |\n| 0 | 1110 1001 | I1: R[0] &larr; M[9] | load  r0, 9# |\n| 1 | 0000 0100 | I2: R[1] &larr; R[0] | mov   r1, r0 |\n| 2 | 1110 1000 | I3: R[0] &larr; M[8] | load  r0, 8# |\n| 3 | 0010 0001 | I4: R[0] &larr; R[0]-R[1]; op=0010; 减操作| sub r0, r1|\n| 4 | 0000 0100 | I5: R[1] &larr; R[0] | mov   r1, r0 |\n| 5 | 1110 1001 | I6: R[0] &larr; M[9] | load  r0, 9# |\n| 6 | 0011 0001 | I7: R[0] &larr; R[0]*R[1]; op=0011; 乘操作| mul r0, r1|\n| 7 | 1111 1010 | I8: M[10] &larr; R[0] | store 10#, r0 |\n| 8 | 0001 0000 | 操作数x, 值为16 | |\n| 9 | 0010 0001 | 操作数y, 值为33 | |\n| 10 | 0000 0000 | 结果z, 初始值为0 | |\n\n| |I1:1110 1001|I2:0000 0100|I3:1110 1000|I4:0010 0001|I5:0000 0100|I6:1110 1001|I7:0011 0001|I8:1111 1010|\n|----|----|----|----|----|----|----|----|----|\n|取指令|IR&larr;M[0000]|IR&larr;M[0001]|IR&larr;M[0010]|IR&larr;M[0011]|IR&larr;M[0100]|IR&larr;M[0101]|IR&larr;M[0110]|IR&larr;M[0111]|\n|指令译码|op=1110,取数|op=0000,传送|op=1110,取数|op=0010,减|op=0000,传送|op=1110,取数|op=0011,乘|op=1111,存数|\n|PC增量|PC&larr;0000+1|PC&larr;0001+1|PC&larr;0010+1|PC&larr;0011+1|PC&larr;0100+1|PC&larr;0101+1|PC&larr;0110+1|PC&larr;0111+1|\n|取数并执行|MDR&larr;M[1001]|A&larr;R[0],mov|MDR&larr;M[1000]|A&larr;R[0],B&larr;R[1],sub|A&larr;R[0],mov|MDR&larr;M[1001]|A&larr;R[0],B&larr;R[1],mul|MDR&larr;R[0]|\n|送结果|R[0]&larr;MDR|R[1]&larr;F|R[0]&larr;MDR|R[0]&larr;F|R[1]&larr;F|R[0]&larr;MDR|R[0]&larr;F|M[1010]&larr;MDR|\n|执行结果|R[0]=33|R[1]=33|R[0]=16|R[0]=16-33=-17|R[1]=-17|R[0]=33|R[0]=-561|M[10]=-561|\n\n## 6.\n(1)对于P1，M2更快，快2倍；对于P2，M1更快，快两倍。  \n(2)在M1上执行P1和P2的速度分别是$\\frac{200\\times 10^6 I}{10 s} = 20$MIPS和$\\frac{300\\times 10^3 I}{3\\times 10^{-3} s} = 100$MIPS。在M2上的执行速度分别为$\\frac{150\\times 10^{6} I}{5 s} = 30$MIPS和$\\frac{420\\times 10^3}{6\\times10^{-3}} = 70$MIPS。对于P2, M1更快, 快$10/7$倍。  \n(3)$$CPI = \\frac{10\\times800\\times10^6}{200\\times10^6} = 40$$  \n$$CPI = \\frac{5\\times1200\\times10^6}{150\\times10^6} = 40$$  \n在M1和M2上执行P1时的平均时钟周期(CPI)都是40。\n(4)应该选择M2, 因为M2性价比更高。  \n(5)应该选择M2， 因为P2程序的执行时间可以忽略不计。  \n\n## 7.  \n(1)M1的峰值MIPS为1000MIPS, M2的峰值MIPS为750MIPS。  \n(2)M1更快，快19/18倍, 在M1和M2上执行程序P时的平均时钟周期数CPI各是12/5和19/5。  \n\n## 8.\n对于程序P来说, M2更快, 快4/3倍。  \n\n## 9.\nP在M上的执行时间为$\\frac{8\\times 10^9 \\times 1.25}{4\\times10^9} = 2.5$s。P占用的CPU时间的百分比是62.5%。  \n\n## 10.\nS1和S2各有10和8条。CPI分别为$\\frac{1\\times5+2\\times2+3\\times2+4\\times1}{10} = 1.9$和$\\frac{1\\times1+2\\times1+3\\times1+4\\times5}{8} = 3.25$。时钟周期数各为19和26。执行时间各为38ns和52ns。  \n\n## 11.\n$$原时钟周期 = 1.2\\times10^9 \\times 12$$\n$$现时钟周期 = 1.2\\times10^9 \\times 10$$\n因此被替换的指令条数为$\\frac{原时钟周期-现时钟周期}{5-3} = 8\\times10^8$  \n\n## 12.\n浮点数指令如何改进都不可能减半。访存指令的CPI要从4变成1。执行时间会变为原来的59/90。  \n","source":"_posts/计算机系统基础第一章习题.md","raw":"---\ntitle: 计算机系统基础习题\ndate: 2023-01-28 22:13:09\nmathjax: true\ncategories:\n    - 计算机\ntags:\n    - 计算机系统基础\n---\n# 第一章\n## 1.   \n**中央处理器(CPU)**: 控制部件、运算部件和各类寄存器互连组成的电路(Central Processing Unit)。  \n**算数逻辑部件(ALU)**: 用来进行算术逻辑运算的部件(Arithmetic Logic Unit)。  \n**通用寄存器**: 用于临时存放从主存取来的数据或运算的结果。  \n**程序计数器(PC)**: 用于CPU自动按序读取主存中的指令, 在执行当前指令过程中, 会自动计算出下一条指令地址并送到PC中保存。  \n**指令寄存器**: 保存从主存中取出的指令的寄存器。  \n**控制器**:  用于自动逐条取出指令并译码的部件。   \n**主存储器**:  用来存放指令和数据。  \n**总线**:  连接不同部件进行信息传输的介质。\n<!--more-->  \n**主存地址寄存器(MAR)**: CPU送到地址线的主存地址先存放在主存地址寄存器(MAR)。   \n**主存数据寄存器(MDR)**: 发送到或从数据线取来的信息存放在主存数据寄存器(MDR)中。 \n**指令操作码**: 指出指令的操作类型。 \n**微操作**: 组成指令的若干个操作。  \n**机器指令**: 计算机能理解和执行的由0和1组成的指令。  \n**高级程序设计语言**: 面向算法设计的、较接近于日常英语书面语言的程序设计语言。  \n**汇编语言**: 用简短的英文符号和机器指令建立对应关系，以方便程序员编写和阅读程序的机器语言的符号表示语言。  \n**机器语言**: 使用特定计算机规定的指令格式而形成的0/1序列。   \n**机器级语言**: 汇编语言和机器语言。  \n**源程序**: 被翻译程序翻译的语言。  \n**目标程序**: 翻译程序翻译生成的语言。  \n**编译程序**: 实现将高级语言源程序翻译成汇编语言或机器语言目标程序的程序。  \n**解释程序**: 实现将源程序中的语句按其执行顺序逐条翻译成机器指令并立即执行的程序。  \n**汇编程序**: 实现将汇编语言源程序翻译成机器语言目标程序的程序。  \n**语言处理系统**: 提供程序编辑器和各类翻译转换软件的工具包。  \n**设备控制器**: I/O控制器或I/O控制器。  \n**最终用户**: 使用应用软件完成特定任务的计算机用户。  \n**系统管理员**: 利用操作系统、数据库管理系统等软件提供的功能对系统进行配置、管理和维护，以建立高效合理的系统环境供计算机用户使用的操作人员。  \n**应用程序员**: 使用高级编程语言编制应用软件的程序员。  \n**系统程序员**: 设计和开发系统软件的程序员。  \n**指令集体系结构(ISA)**: 介于软件和硬件之间的接口。  \n**微体系结构**:  ISA具体实现的组织。  \n**透明**: 对实际存在的事物或概念感受不到。  \n**响应时间**: 从作业提交开始到作业完成所用的时间。  \n**吞吐率**: 在单位时间内所完成的工作量。  \n**用户CPU时间**: 真正用于运行用户程序代码的时间。  \n**系统CPU时间**: 执行用户程序而需要CPU运行操作系统程序的时间。  \n**系统性能**: 系统的响应时间。  \n**CPU性能**: 用户CPU时间。  \n**时钟周期**: CPU的主脉冲信号的宽度。  \n**主频**: CPU中的主脉冲信号的时钟频率。  \n**CPI**: 一条指令所需的时钟周期数。  \n**基准程序**: 专门用来进行性能评价的一组程序。  \n**SPEC基准程序集**: 由Sun、MIPS、HP、Apollo、DEC五家公司提出的基准程序集。  \n**SPEC比值**: 测试程序在Sun SPARCstation上运行的执行时间除以该程序在测试机器上的执行时间所得到的比值。  \n**MIPS**: 平均每秒执行多少百万条指令。  \n**峰值MIPS**: 选取一组指令组合，使得得到的平均CPI最次，由此得到的MIPS。  \n**相对MIPS**: 根据某个公认的参考机型来定义的相应MIPS值。  \n**MFLOPS(GFLOPS、TFLOPS、PFLOPS、EFLOPS)**: 每秒所执行的浮点运算由多少百万次。  \n\n## 2.  \n(1)冯·诺依曼计算机由运算器、控制器、存储器、输入设备、输出设备5个基本部件组成。控制器应能自动执行指令；运算器应能进行算术运算，也能进行逻辑运算；存储器不仅能存放数据，也能存放指令；操作人员可以通过输入/输出设备使用计算机。  \n(2)**存储程序**方式的基本思想是: 必须将实现编好的程序和原始数据送入主存中后才能执行程序，以蛋程序被启动执行，计算机能在不需操作人员干预下自动完成逐条指令取出和执行任务。  \n(3)一条指令的执行过程包含取指令，指令译码，PC增量，取操作数并执行，送结果这些过程。  \n(4)计算机系统的层次结构按照应用(问题)，算法，编程(语言)，操作系统/虚拟机，指令集体系结构(ISA)，微体系结构，功能部件，电路，器件划分。  \n(5)计算机系统的用户可以分为最终用户，系统管理员，应用程序员，系统程序员划分。最终用户工作在应用程序层，应用程序员工作在编译程序和汇编程序层次，系统管理员工作在操作系统层次，系统程序员工作在汇编程序和指令集体系结构层次。  \n(6)程序的CPI和程序中各种指令的比例以及指令的CPI有关。  \n(7)因为不同的机器的指令集不同，而且指令的功能也不同同样的指令条数所完成的功能可能完全不同，并且不同的机器的CPI和时钟周期也不同，同一条指令在不同机器上所用的时间不同。  \n\n## 3.  \n计算机将程序中的一条条指令读入主存中，通过控制器控制指令的读取，通过运算器进行运算，接着再执行下一条指令。  \n\n## 4.  \n熟悉的部分是操作系统，编译语言和应用程序，对计算机指令集体系结构，数字设计和电路设计不熟悉，想要更进一步了解计算机指令集体系结构。  \n\n## 5.  \n| 主存地址 | 主存单元内容 | 内容说明(Ii表示第i条指令) | 指令的符号表示 |\n| ---- | ---- | ---- | ---- |\n| 0 | 1110 1001 | I1: R[0] &larr; M[9] | load  r0, 9# |\n| 1 | 0000 0100 | I2: R[1] &larr; R[0] | mov   r1, r0 |\n| 2 | 1110 1000 | I3: R[0] &larr; M[8] | load  r0, 8# |\n| 3 | 0010 0001 | I4: R[0] &larr; R[0]-R[1]; op=0010; 减操作| sub r0, r1|\n| 4 | 0000 0100 | I5: R[1] &larr; R[0] | mov   r1, r0 |\n| 5 | 1110 1001 | I6: R[0] &larr; M[9] | load  r0, 9# |\n| 6 | 0011 0001 | I7: R[0] &larr; R[0]*R[1]; op=0011; 乘操作| mul r0, r1|\n| 7 | 1111 1010 | I8: M[10] &larr; R[0] | store 10#, r0 |\n| 8 | 0001 0000 | 操作数x, 值为16 | |\n| 9 | 0010 0001 | 操作数y, 值为33 | |\n| 10 | 0000 0000 | 结果z, 初始值为0 | |\n\n| |I1:1110 1001|I2:0000 0100|I3:1110 1000|I4:0010 0001|I5:0000 0100|I6:1110 1001|I7:0011 0001|I8:1111 1010|\n|----|----|----|----|----|----|----|----|----|\n|取指令|IR&larr;M[0000]|IR&larr;M[0001]|IR&larr;M[0010]|IR&larr;M[0011]|IR&larr;M[0100]|IR&larr;M[0101]|IR&larr;M[0110]|IR&larr;M[0111]|\n|指令译码|op=1110,取数|op=0000,传送|op=1110,取数|op=0010,减|op=0000,传送|op=1110,取数|op=0011,乘|op=1111,存数|\n|PC增量|PC&larr;0000+1|PC&larr;0001+1|PC&larr;0010+1|PC&larr;0011+1|PC&larr;0100+1|PC&larr;0101+1|PC&larr;0110+1|PC&larr;0111+1|\n|取数并执行|MDR&larr;M[1001]|A&larr;R[0],mov|MDR&larr;M[1000]|A&larr;R[0],B&larr;R[1],sub|A&larr;R[0],mov|MDR&larr;M[1001]|A&larr;R[0],B&larr;R[1],mul|MDR&larr;R[0]|\n|送结果|R[0]&larr;MDR|R[1]&larr;F|R[0]&larr;MDR|R[0]&larr;F|R[1]&larr;F|R[0]&larr;MDR|R[0]&larr;F|M[1010]&larr;MDR|\n|执行结果|R[0]=33|R[1]=33|R[0]=16|R[0]=16-33=-17|R[1]=-17|R[0]=33|R[0]=-561|M[10]=-561|\n\n## 6.\n(1)对于P1，M2更快，快2倍；对于P2，M1更快，快两倍。  \n(2)在M1上执行P1和P2的速度分别是$\\frac{200\\times 10^6 I}{10 s} = 20$MIPS和$\\frac{300\\times 10^3 I}{3\\times 10^{-3} s} = 100$MIPS。在M2上的执行速度分别为$\\frac{150\\times 10^{6} I}{5 s} = 30$MIPS和$\\frac{420\\times 10^3}{6\\times10^{-3}} = 70$MIPS。对于P2, M1更快, 快$10/7$倍。  \n(3)$$CPI = \\frac{10\\times800\\times10^6}{200\\times10^6} = 40$$  \n$$CPI = \\frac{5\\times1200\\times10^6}{150\\times10^6} = 40$$  \n在M1和M2上执行P1时的平均时钟周期(CPI)都是40。\n(4)应该选择M2, 因为M2性价比更高。  \n(5)应该选择M2， 因为P2程序的执行时间可以忽略不计。  \n\n## 7.  \n(1)M1的峰值MIPS为1000MIPS, M2的峰值MIPS为750MIPS。  \n(2)M1更快，快19/18倍, 在M1和M2上执行程序P时的平均时钟周期数CPI各是12/5和19/5。  \n\n## 8.\n对于程序P来说, M2更快, 快4/3倍。  \n\n## 9.\nP在M上的执行时间为$\\frac{8\\times 10^9 \\times 1.25}{4\\times10^9} = 2.5$s。P占用的CPU时间的百分比是62.5%。  \n\n## 10.\nS1和S2各有10和8条。CPI分别为$\\frac{1\\times5+2\\times2+3\\times2+4\\times1}{10} = 1.9$和$\\frac{1\\times1+2\\times1+3\\times1+4\\times5}{8} = 3.25$。时钟周期数各为19和26。执行时间各为38ns和52ns。  \n\n## 11.\n$$原时钟周期 = 1.2\\times10^9 \\times 12$$\n$$现时钟周期 = 1.2\\times10^9 \\times 10$$\n因此被替换的指令条数为$\\frac{原时钟周期-现时钟周期}{5-3} = 8\\times10^8$  \n\n## 12.\n浮点数指令如何改进都不可能减半。访存指令的CPI要从4变成1。执行时间会变为原来的59/90。  \n","slug":"计算机系统基础第一章习题","published":1,"updated":"2023-05-04T03:45:02.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhj8pre40003maqh7hsa95h8","content":"<h1 id=\"第一章\">第一章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>中央处理器(CPU)</strong>:\n控制部件、运算部件和各类寄存器互连组成的电路(Central Processing\nUnit)。<br>\n<strong>算数逻辑部件(ALU)</strong>:\n用来进行算术逻辑运算的部件(Arithmetic Logic Unit)。<br>\n<strong>通用寄存器</strong>:\n用于临时存放从主存取来的数据或运算的结果。<br>\n<strong>程序计数器(PC)</strong>: 用于CPU自动按序读取主存中的指令,\n在执行当前指令过程中, 会自动计算出下一条指令地址并送到PC中保存。<br>\n<strong>指令寄存器</strong>: 保存从主存中取出的指令的寄存器。<br>\n<strong>控制器</strong>: 用于自动逐条取出指令并译码的部件。<br>\n<strong>主存储器</strong>: 用来存放指令和数据。<br>\n<strong>总线</strong>: 连接不同部件进行信息传输的介质。\n<span id=\"more\"></span><br>\n<strong>主存地址寄存器(MAR)</strong>:\nCPU送到地址线的主存地址先存放在主存地址寄存器(MAR)。<br>\n<strong>主存数据寄存器(MDR)</strong>:\n发送到或从数据线取来的信息存放在主存数据寄存器(MDR)中。\n<strong>指令操作码</strong>: 指出指令的操作类型。\n<strong>微操作</strong>: 组成指令的若干个操作。<br>\n<strong>机器指令</strong>: 计算机能理解和执行的由0和1组成的指令。<br>\n<strong>高级程序设计语言</strong>:\n面向算法设计的、较接近于日常英语书面语言的程序设计语言。<br>\n<strong>汇编语言</strong>:\n用简短的英文符号和机器指令建立对应关系，以方便程序员编写和阅读程序的机器语言的符号表示语言。<br>\n<strong>机器语言</strong>:\n使用特定计算机规定的指令格式而形成的0/1序列。<br>\n<strong>机器级语言</strong>: 汇编语言和机器语言。<br>\n<strong>源程序</strong>: 被翻译程序翻译的语言。<br>\n<strong>目标程序</strong>: 翻译程序翻译生成的语言。<br>\n<strong>编译程序</strong>:\n实现将高级语言源程序翻译成汇编语言或机器语言目标程序的程序。<br>\n<strong>解释程序</strong>:\n实现将源程序中的语句按其执行顺序逐条翻译成机器指令并立即执行的程序。<br>\n<strong>汇编程序</strong>:\n实现将汇编语言源程序翻译成机器语言目标程序的程序。<br>\n<strong>语言处理系统</strong>:\n提供程序编辑器和各类翻译转换软件的工具包。<br>\n<strong>设备控制器</strong>: I/O控制器或I/O控制器。<br>\n<strong>最终用户</strong>: 使用应用软件完成特定任务的计算机用户。<br>\n<strong>系统管理员</strong>:\n利用操作系统、数据库管理系统等软件提供的功能对系统进行配置、管理和维护，以建立高效合理的系统环境供计算机用户使用的操作人员。<br>\n<strong>应用程序员</strong>:\n使用高级编程语言编制应用软件的程序员。<br>\n<strong>系统程序员</strong>: 设计和开发系统软件的程序员。<br>\n<strong>指令集体系结构(ISA)</strong>: 介于软件和硬件之间的接口。<br>\n<strong>微体系结构</strong>: ISA具体实现的组织。<br>\n<strong>透明</strong>: 对实际存在的事物或概念感受不到。<br>\n<strong>响应时间</strong>: 从作业提交开始到作业完成所用的时间。<br>\n<strong>吞吐率</strong>: 在单位时间内所完成的工作量。<br>\n<strong>用户CPU时间</strong>: 真正用于运行用户程序代码的时间。<br>\n<strong>系统CPU时间</strong>:\n执行用户程序而需要CPU运行操作系统程序的时间。<br>\n<strong>系统性能</strong>: 系统的响应时间。<br>\n<strong>CPU性能</strong>: 用户CPU时间。<br>\n<strong>时钟周期</strong>: CPU的主脉冲信号的宽度。<br>\n<strong>主频</strong>: CPU中的主脉冲信号的时钟频率。<br>\n<strong>CPI</strong>: 一条指令所需的时钟周期数。<br>\n<strong>基准程序</strong>: 专门用来进行性能评价的一组程序。<br>\n<strong>SPEC基准程序集</strong>:\n由Sun、MIPS、HP、Apollo、DEC五家公司提出的基准程序集。<br>\n<strong>SPEC比值</strong>: 测试程序在Sun\nSPARCstation上运行的执行时间除以该程序在测试机器上的执行时间所得到的比值。<br>\n<strong>MIPS</strong>: 平均每秒执行多少百万条指令。<br>\n<strong>峰值MIPS</strong>:\n选取一组指令组合，使得得到的平均CPI最次，由此得到的MIPS。<br>\n<strong>相对MIPS</strong>:\n根据某个公认的参考机型来定义的相应MIPS值。<br>\n<strong>MFLOPS(GFLOPS、TFLOPS、PFLOPS、EFLOPS)</strong>:\n每秒所执行的浮点运算由多少百万次。</p>\n<h2 id=\"section-1\">2.</h2>\n<p>(1)冯·诺依曼计算机由运算器、控制器、存储器、输入设备、输出设备5个基本部件组成。控制器应能自动执行指令；运算器应能进行算术运算，也能进行逻辑运算；存储器不仅能存放数据，也能存放指令；操作人员可以通过输入/输出设备使用计算机。<br>\n(2)<strong>存储程序</strong>方式的基本思想是:\n必须将实现编好的程序和原始数据送入主存中后才能执行程序，以蛋程序被启动执行，计算机能在不需操作人员干预下自动完成逐条指令取出和执行任务。<br>\n(3)一条指令的执行过程包含取指令，指令译码，PC增量，取操作数并执行，送结果这些过程。<br>\n(4)计算机系统的层次结构按照应用(问题)，算法，编程(语言)，操作系统/虚拟机，指令集体系结构(ISA)，微体系结构，功能部件，电路，器件划分。<br>\n(5)计算机系统的用户可以分为最终用户，系统管理员，应用程序员，系统程序员划分。最终用户工作在应用程序层，应用程序员工作在编译程序和汇编程序层次，系统管理员工作在操作系统层次，系统程序员工作在汇编程序和指令集体系结构层次。<br>\n(6)程序的CPI和程序中各种指令的比例以及指令的CPI有关。<br>\n(7)因为不同的机器的指令集不同，而且指令的功能也不同同样的指令条数所完成的功能可能完全不同，并且不同的机器的CPI和时钟周期也不同，同一条指令在不同机器上所用的时间不同。</p>\n<h2 id=\"section-2\">3.</h2>\n<p>计算机将程序中的一条条指令读入主存中，通过控制器控制指令的读取，通过运算器进行运算，接着再执行下一条指令。</p>\n<h2 id=\"section-3\">4.</h2>\n<p>熟悉的部分是操作系统，编译语言和应用程序，对计算机指令集体系结构，数字设计和电路设计不熟悉，想要更进一步了解计算机指令集体系结构。</p>\n<h2 id=\"section-4\">5.</h2>\n<table>\n<colgroup>\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>主存地址</th>\n<th>主存单元内容</th>\n<th>内容说明(Ii表示第i条指令)</th>\n<th>指令的符号表示</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0</td>\n<td>1110 1001</td>\n<td>I1: R[0] ← M[9]</td>\n<td>load r0, 9#</td>\n</tr>\n<tr class=\"even\">\n<td>1</td>\n<td>0000 0100</td>\n<td>I2: R[1] ← R[0]</td>\n<td>mov r1, r0</td>\n</tr>\n<tr class=\"odd\">\n<td>2</td>\n<td>1110 1000</td>\n<td>I3: R[0] ← M[8]</td>\n<td>load r0, 8#</td>\n</tr>\n<tr class=\"even\">\n<td>3</td>\n<td>0010 0001</td>\n<td>I4: R[0] ← R[0]-R[1]; op=0010; 减操作</td>\n<td>sub r0, r1</td>\n</tr>\n<tr class=\"odd\">\n<td>4</td>\n<td>0000 0100</td>\n<td>I5: R[1] ← R[0]</td>\n<td>mov r1, r0</td>\n</tr>\n<tr class=\"even\">\n<td>5</td>\n<td>1110 1001</td>\n<td>I6: R[0] ← M[9]</td>\n<td>load r0, 9#</td>\n</tr>\n<tr class=\"odd\">\n<td>6</td>\n<td>0011 0001</td>\n<td>I7: R[0] ← R[0]*R[1]; op=0011; 乘操作</td>\n<td>mul r0, r1</td>\n</tr>\n<tr class=\"even\">\n<td>7</td>\n<td>1111 1010</td>\n<td>I8: M[10] ← R[0]</td>\n<td>store 10#, r0</td>\n</tr>\n<tr class=\"odd\">\n<td>8</td>\n<td>0001 0000</td>\n<td>操作数x, 值为16</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>9</td>\n<td>0010 0001</td>\n<td>操作数y, 值为33</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>10</td>\n<td>0000 0000</td>\n<td>结果z, 初始值为0</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th></th>\n<th>I1:1110 1001</th>\n<th>I2:0000 0100</th>\n<th>I3:1110 1000</th>\n<th>I4:0010 0001</th>\n<th>I5:0000 0100</th>\n<th>I6:1110 1001</th>\n<th>I7:0011 0001</th>\n<th>I8:1111 1010</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>取指令</td>\n<td>IR←M[0000]</td>\n<td>IR←M[0001]</td>\n<td>IR←M[0010]</td>\n<td>IR←M[0011]</td>\n<td>IR←M[0100]</td>\n<td>IR←M[0101]</td>\n<td>IR←M[0110]</td>\n<td>IR←M[0111]</td>\n</tr>\n<tr class=\"even\">\n<td>指令译码</td>\n<td>op=1110,取数</td>\n<td>op=0000,传送</td>\n<td>op=1110,取数</td>\n<td>op=0010,减</td>\n<td>op=0000,传送</td>\n<td>op=1110,取数</td>\n<td>op=0011,乘</td>\n<td>op=1111,存数</td>\n</tr>\n<tr class=\"odd\">\n<td>PC增量</td>\n<td>PC←0000+1</td>\n<td>PC←0001+1</td>\n<td>PC←0010+1</td>\n<td>PC←0011+1</td>\n<td>PC←0100+1</td>\n<td>PC←0101+1</td>\n<td>PC←0110+1</td>\n<td>PC←0111+1</td>\n</tr>\n<tr class=\"even\">\n<td>取数并执行</td>\n<td>MDR←M[1001]</td>\n<td>A←R[0],mov</td>\n<td>MDR←M[1000]</td>\n<td>A←R[0],B←R[1],sub</td>\n<td>A←R[0],mov</td>\n<td>MDR←M[1001]</td>\n<td>A←R[0],B←R[1],mul</td>\n<td>MDR←R[0]</td>\n</tr>\n<tr class=\"odd\">\n<td>送结果</td>\n<td>R[0]←MDR</td>\n<td>R[1]←F</td>\n<td>R[0]←MDR</td>\n<td>R[0]←F</td>\n<td>R[1]←F</td>\n<td>R[0]←MDR</td>\n<td>R[0]←F</td>\n<td>M[1010]←MDR</td>\n</tr>\n<tr class=\"even\">\n<td>执行结果</td>\n<td>R[0]=33</td>\n<td>R[1]=33</td>\n<td>R[0]=16</td>\n<td>R[0]=16-33=-17</td>\n<td>R[1]=-17</td>\n<td>R[0]=33</td>\n<td>R[0]=-561</td>\n<td>M[10]=-561</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-5\">6.</h2>\n<p>(1)对于P1，M2更快，快2倍；对于P2，M1更快，快两倍。<br>\n(2)在M1上执行P1和P2的速度分别是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.024ex\" height=\"3.089ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.9 5756.5 1365.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3714.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(1192.1,-345) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><rect width=\"3183\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3700.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4756.5,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span>MIPS和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.054ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.155ex\" height=\"3.327ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.4 6256.5 1470.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3714.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(391.4,-450.4) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(3264.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><rect width=\"3183\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3700.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4756.5,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g></g></g></svg></mjx-container></span>MIPS。在M2上的执行速度分别为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.024ex\" height=\"3.089ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.9 5756.5 1365.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(3714.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(1368.9,-345) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><rect width=\"3183\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3700.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4756.5,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span>MIPS和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.054ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.218ex\" height=\"3.327ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.4 5400.1 1470.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(379.1,-450.4) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g><rect width=\"2826.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3344.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4400.1,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span>MIPS。对于P2, M1更快, 快<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1000,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(1500,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g></g></svg></mjx-container></span>倍。<br>\n(3)<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.914ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.289ex\" height=\"5.398ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1540 12503.6 2386\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1511,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2292.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3348.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1222.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2222.4,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3944.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4944.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(1331.2,-824)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2722.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><rect width=\"6581.4\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(10447.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11503.6,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span><br>\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.914ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.289ex\" height=\"5.398ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1540 12503.6 2386\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1511,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2292.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3348.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1722.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3944.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4944.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(1331.2,-824)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2722.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><rect width=\"6581.4\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(10447.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11503.6,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span><br>\n在M1和M2上执行P1时的平均时钟周期(CPI)都是40。 (4)应该选择M2,\n因为M2性价比更高。<br>\n(5)应该选择M2， 因为P2程序的执行时间可以忽略不计。</p>\n<h2 id=\"section-6\">7.</h2>\n<p>(1)M1的峰值MIPS为1000MIPS, M2的峰值MIPS为750MIPS。<br>\n(2)M1更快，快19/18倍,\n在M1和M2上执行程序P时的平均时钟周期数CPI各是12/5和19/5。</p>\n<h2 id=\"section-7\">8.</h2>\n<p>对于程序P来说, M2更快, 快4/3倍。</p>\n<h2 id=\"section-8\">9.</h2>\n<p>P在M上的执行时间为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.055ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.336ex\" height=\"3.329ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.9 6778.4 1471.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2714.6,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3492.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(1123.7,-450.9) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g><rect width=\"3926.8\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(4444.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5500.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g></g></g></svg></mjx-container></span>s。P占用的CPU时间的百分比是62.5%。</p>\n<h2 id=\"section-9\">10.</h2>\n<p>S1和S2各有10和8条。CPI分别为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.016ex\" height=\"2.799ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -876.7 9730.9 1237.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,398) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1278,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1778,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2556,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3056,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3834,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4334,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5112,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5612,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6390,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6890,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7668,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8168,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8946,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(3206.1,-345) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><rect width=\"6879.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(7397.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8452.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(778,0)\"></path></g></g></g></svg></mjx-container></span>和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.147ex\" height=\"2.799ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -876.7 10230.9 1237.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,398) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1278,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1778,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2556,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3056,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3834,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4334,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5112,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5612,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6390,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6890,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7668,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8168,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8946,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(3382.9,-345) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><rect width=\"6879.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(7397.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8452.9,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g></g></g></svg></mjx-container></span>。时钟周期数各为19和26。执行时间各为38ns和52ns。</p>\n<h2 id=\"section-10\">11.</h2>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.265ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 12493 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">原</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g><g data-mml-node=\"mo\" transform=\"translate(5277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6333.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7833.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8834,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,413) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(10492.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11493,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span> <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.265ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 12493 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">现</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g><g data-mml-node=\"mo\" transform=\"translate(5277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6333.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7833.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8834,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,413) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(10492.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11493,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span> 因此被替换的指令条数为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.912ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.402ex\" height=\"3.201ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1011.8 12553.8 1414.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,481.4) scale(0.707)\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">原</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g><g data-mml-node=\"mo\" transform=\"translate(5000,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">现</text></g><g data-mml-node=\"mi\" transform=\"translate(6778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(7778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(8778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(9778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g></g><g data-mml-node=\"mrow\" transform=\"translate(3402,-345) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1278,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><rect width=\"7821.2\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(8339,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(9394.8,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10117,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(11117.2,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"section-11\">12.</h2>\n<p>浮点数指令如何改进都不可能减半。访存指令的CPI要从4变成1。执行时间会变为原来的59/90。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"第一章\">第一章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>中央处理器(CPU)</strong>:\n控制部件、运算部件和各类寄存器互连组成的电路(Central Processing\nUnit)。<br>\n<strong>算数逻辑部件(ALU)</strong>:\n用来进行算术逻辑运算的部件(Arithmetic Logic Unit)。<br>\n<strong>通用寄存器</strong>:\n用于临时存放从主存取来的数据或运算的结果。<br>\n<strong>程序计数器(PC)</strong>: 用于CPU自动按序读取主存中的指令,\n在执行当前指令过程中, 会自动计算出下一条指令地址并送到PC中保存。<br>\n<strong>指令寄存器</strong>: 保存从主存中取出的指令的寄存器。<br>\n<strong>控制器</strong>: 用于自动逐条取出指令并译码的部件。<br>\n<strong>主存储器</strong>: 用来存放指令和数据。<br>\n<strong>总线</strong>: 连接不同部件进行信息传输的介质。","more":"<br>\n<strong>主存地址寄存器(MAR)</strong>:\nCPU送到地址线的主存地址先存放在主存地址寄存器(MAR)。<br>\n<strong>主存数据寄存器(MDR)</strong>:\n发送到或从数据线取来的信息存放在主存数据寄存器(MDR)中。\n<strong>指令操作码</strong>: 指出指令的操作类型。\n<strong>微操作</strong>: 组成指令的若干个操作。<br>\n<strong>机器指令</strong>: 计算机能理解和执行的由0和1组成的指令。<br>\n<strong>高级程序设计语言</strong>:\n面向算法设计的、较接近于日常英语书面语言的程序设计语言。<br>\n<strong>汇编语言</strong>:\n用简短的英文符号和机器指令建立对应关系，以方便程序员编写和阅读程序的机器语言的符号表示语言。<br>\n<strong>机器语言</strong>:\n使用特定计算机规定的指令格式而形成的0/1序列。<br>\n<strong>机器级语言</strong>: 汇编语言和机器语言。<br>\n<strong>源程序</strong>: 被翻译程序翻译的语言。<br>\n<strong>目标程序</strong>: 翻译程序翻译生成的语言。<br>\n<strong>编译程序</strong>:\n实现将高级语言源程序翻译成汇编语言或机器语言目标程序的程序。<br>\n<strong>解释程序</strong>:\n实现将源程序中的语句按其执行顺序逐条翻译成机器指令并立即执行的程序。<br>\n<strong>汇编程序</strong>:\n实现将汇编语言源程序翻译成机器语言目标程序的程序。<br>\n<strong>语言处理系统</strong>:\n提供程序编辑器和各类翻译转换软件的工具包。<br>\n<strong>设备控制器</strong>: I/O控制器或I/O控制器。<br>\n<strong>最终用户</strong>: 使用应用软件完成特定任务的计算机用户。<br>\n<strong>系统管理员</strong>:\n利用操作系统、数据库管理系统等软件提供的功能对系统进行配置、管理和维护，以建立高效合理的系统环境供计算机用户使用的操作人员。<br>\n<strong>应用程序员</strong>:\n使用高级编程语言编制应用软件的程序员。<br>\n<strong>系统程序员</strong>: 设计和开发系统软件的程序员。<br>\n<strong>指令集体系结构(ISA)</strong>: 介于软件和硬件之间的接口。<br>\n<strong>微体系结构</strong>: ISA具体实现的组织。<br>\n<strong>透明</strong>: 对实际存在的事物或概念感受不到。<br>\n<strong>响应时间</strong>: 从作业提交开始到作业完成所用的时间。<br>\n<strong>吞吐率</strong>: 在单位时间内所完成的工作量。<br>\n<strong>用户CPU时间</strong>: 真正用于运行用户程序代码的时间。<br>\n<strong>系统CPU时间</strong>:\n执行用户程序而需要CPU运行操作系统程序的时间。<br>\n<strong>系统性能</strong>: 系统的响应时间。<br>\n<strong>CPU性能</strong>: 用户CPU时间。<br>\n<strong>时钟周期</strong>: CPU的主脉冲信号的宽度。<br>\n<strong>主频</strong>: CPU中的主脉冲信号的时钟频率。<br>\n<strong>CPI</strong>: 一条指令所需的时钟周期数。<br>\n<strong>基准程序</strong>: 专门用来进行性能评价的一组程序。<br>\n<strong>SPEC基准程序集</strong>:\n由Sun、MIPS、HP、Apollo、DEC五家公司提出的基准程序集。<br>\n<strong>SPEC比值</strong>: 测试程序在Sun\nSPARCstation上运行的执行时间除以该程序在测试机器上的执行时间所得到的比值。<br>\n<strong>MIPS</strong>: 平均每秒执行多少百万条指令。<br>\n<strong>峰值MIPS</strong>:\n选取一组指令组合，使得得到的平均CPI最次，由此得到的MIPS。<br>\n<strong>相对MIPS</strong>:\n根据某个公认的参考机型来定义的相应MIPS值。<br>\n<strong>MFLOPS(GFLOPS、TFLOPS、PFLOPS、EFLOPS)</strong>:\n每秒所执行的浮点运算由多少百万次。</p>\n<h2 id=\"section-1\">2.</h2>\n<p>(1)冯·诺依曼计算机由运算器、控制器、存储器、输入设备、输出设备5个基本部件组成。控制器应能自动执行指令；运算器应能进行算术运算，也能进行逻辑运算；存储器不仅能存放数据，也能存放指令；操作人员可以通过输入/输出设备使用计算机。<br>\n(2)<strong>存储程序</strong>方式的基本思想是:\n必须将实现编好的程序和原始数据送入主存中后才能执行程序，以蛋程序被启动执行，计算机能在不需操作人员干预下自动完成逐条指令取出和执行任务。<br>\n(3)一条指令的执行过程包含取指令，指令译码，PC增量，取操作数并执行，送结果这些过程。<br>\n(4)计算机系统的层次结构按照应用(问题)，算法，编程(语言)，操作系统/虚拟机，指令集体系结构(ISA)，微体系结构，功能部件，电路，器件划分。<br>\n(5)计算机系统的用户可以分为最终用户，系统管理员，应用程序员，系统程序员划分。最终用户工作在应用程序层，应用程序员工作在编译程序和汇编程序层次，系统管理员工作在操作系统层次，系统程序员工作在汇编程序和指令集体系结构层次。<br>\n(6)程序的CPI和程序中各种指令的比例以及指令的CPI有关。<br>\n(7)因为不同的机器的指令集不同，而且指令的功能也不同同样的指令条数所完成的功能可能完全不同，并且不同的机器的CPI和时钟周期也不同，同一条指令在不同机器上所用的时间不同。</p>\n<h2 id=\"section-2\">3.</h2>\n<p>计算机将程序中的一条条指令读入主存中，通过控制器控制指令的读取，通过运算器进行运算，接着再执行下一条指令。</p>\n<h2 id=\"section-3\">4.</h2>\n<p>熟悉的部分是操作系统，编译语言和应用程序，对计算机指令集体系结构，数字设计和电路设计不熟悉，想要更进一步了解计算机指令集体系结构。</p>\n<h2 id=\"section-4\">5.</h2>\n<table>\n<colgroup>\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>主存地址</th>\n<th>主存单元内容</th>\n<th>内容说明(Ii表示第i条指令)</th>\n<th>指令的符号表示</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0</td>\n<td>1110 1001</td>\n<td>I1: R[0] ← M[9]</td>\n<td>load r0, 9#</td>\n</tr>\n<tr class=\"even\">\n<td>1</td>\n<td>0000 0100</td>\n<td>I2: R[1] ← R[0]</td>\n<td>mov r1, r0</td>\n</tr>\n<tr class=\"odd\">\n<td>2</td>\n<td>1110 1000</td>\n<td>I3: R[0] ← M[8]</td>\n<td>load r0, 8#</td>\n</tr>\n<tr class=\"even\">\n<td>3</td>\n<td>0010 0001</td>\n<td>I4: R[0] ← R[0]-R[1]; op=0010; 减操作</td>\n<td>sub r0, r1</td>\n</tr>\n<tr class=\"odd\">\n<td>4</td>\n<td>0000 0100</td>\n<td>I5: R[1] ← R[0]</td>\n<td>mov r1, r0</td>\n</tr>\n<tr class=\"even\">\n<td>5</td>\n<td>1110 1001</td>\n<td>I6: R[0] ← M[9]</td>\n<td>load r0, 9#</td>\n</tr>\n<tr class=\"odd\">\n<td>6</td>\n<td>0011 0001</td>\n<td>I7: R[0] ← R[0]*R[1]; op=0011; 乘操作</td>\n<td>mul r0, r1</td>\n</tr>\n<tr class=\"even\">\n<td>7</td>\n<td>1111 1010</td>\n<td>I8: M[10] ← R[0]</td>\n<td>store 10#, r0</td>\n</tr>\n<tr class=\"odd\">\n<td>8</td>\n<td>0001 0000</td>\n<td>操作数x, 值为16</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>9</td>\n<td>0010 0001</td>\n<td>操作数y, 值为33</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>10</td>\n<td>0000 0000</td>\n<td>结果z, 初始值为0</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n<col style=\"width: 11%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th></th>\n<th>I1:1110 1001</th>\n<th>I2:0000 0100</th>\n<th>I3:1110 1000</th>\n<th>I4:0010 0001</th>\n<th>I5:0000 0100</th>\n<th>I6:1110 1001</th>\n<th>I7:0011 0001</th>\n<th>I8:1111 1010</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>取指令</td>\n<td>IR←M[0000]</td>\n<td>IR←M[0001]</td>\n<td>IR←M[0010]</td>\n<td>IR←M[0011]</td>\n<td>IR←M[0100]</td>\n<td>IR←M[0101]</td>\n<td>IR←M[0110]</td>\n<td>IR←M[0111]</td>\n</tr>\n<tr class=\"even\">\n<td>指令译码</td>\n<td>op=1110,取数</td>\n<td>op=0000,传送</td>\n<td>op=1110,取数</td>\n<td>op=0010,减</td>\n<td>op=0000,传送</td>\n<td>op=1110,取数</td>\n<td>op=0011,乘</td>\n<td>op=1111,存数</td>\n</tr>\n<tr class=\"odd\">\n<td>PC增量</td>\n<td>PC←0000+1</td>\n<td>PC←0001+1</td>\n<td>PC←0010+1</td>\n<td>PC←0011+1</td>\n<td>PC←0100+1</td>\n<td>PC←0101+1</td>\n<td>PC←0110+1</td>\n<td>PC←0111+1</td>\n</tr>\n<tr class=\"even\">\n<td>取数并执行</td>\n<td>MDR←M[1001]</td>\n<td>A←R[0],mov</td>\n<td>MDR←M[1000]</td>\n<td>A←R[0],B←R[1],sub</td>\n<td>A←R[0],mov</td>\n<td>MDR←M[1001]</td>\n<td>A←R[0],B←R[1],mul</td>\n<td>MDR←R[0]</td>\n</tr>\n<tr class=\"odd\">\n<td>送结果</td>\n<td>R[0]←MDR</td>\n<td>R[1]←F</td>\n<td>R[0]←MDR</td>\n<td>R[0]←F</td>\n<td>R[1]←F</td>\n<td>R[0]←MDR</td>\n<td>R[0]←F</td>\n<td>M[1010]←MDR</td>\n</tr>\n<tr class=\"even\">\n<td>执行结果</td>\n<td>R[0]=33</td>\n<td>R[1]=33</td>\n<td>R[0]=16</td>\n<td>R[0]=16-33=-17</td>\n<td>R[1]=-17</td>\n<td>R[0]=33</td>\n<td>R[0]=-561</td>\n<td>M[10]=-561</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-5\">6.</h2>\n<p>(1)对于P1，M2更快，快2倍；对于P2，M1更快，快两倍。<br>\n(2)在M1上执行P1和P2的速度分别是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.024ex\" height=\"3.089ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.9 5756.5 1365.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3714.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(1192.1,-345) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><rect width=\"3183\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3700.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4756.5,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span>MIPS和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.054ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.155ex\" height=\"3.327ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.4 6256.5 1470.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><g data-mml-node=\"mi\" transform=\"translate(3714.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(391.4,-450.4) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(3264.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><rect width=\"3183\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3700.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4756.5,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g></g></g></svg></mjx-container></span>MIPS。在M2上的执行速度分别为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.024ex\" height=\"3.089ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.9 5756.5 1365.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><g data-mml-node=\"mi\" transform=\"translate(3714.6,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(1368.9,-345) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(500,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><rect width=\"3183\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3700.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4756.5,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span>MIPS和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.054ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.218ex\" height=\"3.327ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.4 5400.1 1470.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(379.1,-450.4) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g><rect width=\"2826.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(3344.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4400.1,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span>MIPS。对于P2, M1更快, 快<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.525ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2000 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1000,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(1500,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g></g></svg></mjx-container></span>倍。<br>\n(3)<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.914ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.289ex\" height=\"5.398ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1540 12503.6 2386\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1511,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2292.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3348.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1222.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2222.4,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3944.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4944.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(1331.2,-824)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2722.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><rect width=\"6581.4\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(10447.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11503.6,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span><br>\n<span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.914ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.289ex\" height=\"5.398ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1540 12503.6 2386\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1511,0)\"><path data-c=\"1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2292.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(3348.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1722.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1500,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3944.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4944.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(1331.2,-824)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2722.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g><rect width=\"6581.4\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(10447.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11503.6,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span><br>\n在M1和M2上执行P1时的平均时钟周期(CPI)都是40。 (4)应该选择M2,\n因为M2性价比更高。<br>\n(5)应该选择M2， 因为P2程序的执行时间可以忽略不计。</p>\n<h2 id=\"section-6\">7.</h2>\n<p>(1)M1的峰值MIPS为1000MIPS, M2的峰值MIPS为750MIPS。<br>\n(2)M1更快，快19/18倍,\n在M1和M2上执行程序P时的平均时钟周期数CPI各是12/5和19/5。</p>\n<h2 id=\"section-7\">8.</h2>\n<p>对于程序P来说, M2更快, 快4/3倍。</p>\n<h2 id=\"section-8\">9.</h2>\n<p>P在M上的执行时间为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.055ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.336ex\" height=\"3.329ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1004.9 6778.4 1471.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,394) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2714.6,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3492.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g></g><g data-mml-node=\"mrow\" transform=\"translate(1123.7,-450.9) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1278,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></g><rect width=\"3926.8\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(4444.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5500.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g></g></g></svg></mjx-container></span>s。P占用的CPU时间的百分比是62.5%。</p>\n<h2 id=\"section-9\">10.</h2>\n<p>S1和S2各有10和8条。CPI分别为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.016ex\" height=\"2.799ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -876.7 9730.9 1237.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,398) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1278,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1778,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2556,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3056,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3834,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4334,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5112,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5612,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6390,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6890,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7668,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8168,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8946,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(3206.1,-345) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><rect width=\"6879.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(7397.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8452.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(778,0)\"></path></g></g></g></svg></mjx-container></span>和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.147ex\" height=\"2.799ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -876.7 10230.9 1237.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,398) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1278,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1778,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2556,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3056,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3834,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4334,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5112,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5612,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6390,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6890,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7668,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8168,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8946,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(3382.9,-345) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><rect width=\"6879.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(7397.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8452.9,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g></g></g></svg></mjx-container></span>。时钟周期数各为19和26。执行时间各为38ns和52ns。</p>\n<h2 id=\"section-10\">11.</h2>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.265ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 12493 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">原</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g><g data-mml-node=\"mo\" transform=\"translate(5277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6333.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7833.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8834,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,413) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(10492.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11493,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span> <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.265ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 12493 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">现</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g><g data-mml-node=\"mo\" transform=\"translate(5277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6333.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7833.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8834,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,413) scale(0.707)\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(10492.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11493,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></span> 因此被替换的指令条数为<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.912ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.402ex\" height=\"3.201ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1011.8 12553.8 1414.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,481.4) scale(0.707)\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">原</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(3000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(4000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g><g data-mml-node=\"mo\" transform=\"translate(5000,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">现</text></g><g data-mml-node=\"mi\" transform=\"translate(6778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">时</text></g><g data-mml-node=\"mi\" transform=\"translate(7778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">钟</text></g><g data-mml-node=\"mi\" transform=\"translate(8778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">周</text></g><g data-mml-node=\"mi\" transform=\"translate(9778,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">期</text></g></g><g data-mml-node=\"mrow\" transform=\"translate(3402,-345) scale(0.707)\"><g data-mml-node=\"mn\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1278,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g><rect width=\"7821.2\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(8339,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(9394.8,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10117,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(11117.2,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"section-11\">12.</h2>\n<p>浮点数指令如何改进都不可能减半。访存指令的CPI要从4变成1。执行时间会变为原来的59/90。</p>"},{"title":"计算机系统基础第三章习题","date":"2023-05-04T03:38:26.000Z","mathjax":true,"_content":"\n# 第三章\n## 1.\n**机器语言程序**: 由若干条机器指令组成的序列  \n**机器指令**: 介于微指令和伪指令之间的指令, 处于硬件和软件的交界面  \n**汇编语言**: 与机器语言一一对应的符号化表示语言  \n**汇编指令**: 用若干个助记符表表示的与机器指令一一对应的指令  \n**汇编语言程序**: 用汇编语言编写的程序  \n**汇编助记符**: 用来表示指令操作码的容易记忆的英文单词或缩写, 用来表示操作数或地址码的标号、变量名称、寄存器名称、常数等  \n**汇编程序**: 用来将汇编语言源程序中的汇编指令翻译成机器指令的程序  \n**反汇编程序**: 机器指令反过来翻译成汇编指令的程序  \n<!--more-->  \n**机器级代码**: 由机器指令和汇编指令组成的代码  \n**通用寄存器**: 没有专门用途的可以存放各类定点操作数的寄存器  \n**变址寄存器**: ESI  \n**基址寄存器**: EBP  \n**栈指针寄存器**: ESP  \n**指令指针寄存器**: EIP  \n**标志寄存器**: EFLAGS  \n**条件标志(条件码)**: 用来存放运行的状态信息, 由硬件自动设定  \n**寻址方式**: 根据指令给定信息得到操作数或操作数地址的方式  \n**立即寻址**: 指令中直接给出操作数  \n**寄存器寻址**: 指令中给出操作数所存放的寄存器的编号  \n**相对寻址**: 计算的是转移目标指令的线性地址  \n**存储器操作数**: 操作数在存储器单元中  \n**实地址模式**: 最大寻址空间为1MB, 存储管理采用分段方式, 每段的最大地址空间为64KB  \n**保护模式**: 为了实现在多任务方式下对不同任务使用的虚拟存储空间进行完全隔离, 以保护不同任务之间不会相互破坏各自的代码和数据  \n有效地址: 给出了操作数所在段的段内偏移地址  \n**比例变址**: 变址值等于变址寄存器内容乘以比例系数  \n**非比例变址**: 变址值就是变址寄存器的内容  \n**比例系数(比例因子)**: 操作数的字节个数  \n**MMX指令**: 每个MMX寄存器实际上是对应80位浮点数据寄存器中64位尾数所占的位  \n**SSE指令集**: 采用SIMD技术的指令集  \n**SIMD**: 单指令多数据, 实现单条指令同时并行处理多个数据元素的功能  \n**多媒体扩展通用寄存器**: 8个128位的SSE指令专用寄存器XMM0~XMM7  \n**栈**: 栈是一种采用\"先进后出\"方式访问的一块存储区  \n**调用者保存寄存器**: 在过程P调用过程Q时, Q可以直接使用这三个寄存器, 不用将它们的值保存到栈中  \n**被调用者保存寄存器**: Q必须将它们的值保存到栈中再使用它们, 并在返回P之前先恢复它们的值  \n**帧指针寄存器**: EBP  \n**当前栈帧**: 帧指针EBP和栈指针ESP指向区间之间的区域  \n**按值传递参数**: 形参是基本类型变量名  \n**按地址传递参数**: 形参是指针类型变量或构造类型变量名  \n**嵌套调用**: 某个函数调用另一个函数  \n**递归调用**: 某个函数调用自己本身  \n**缓冲区溢出**: 超越数组存储区范围的访问  \n**缓冲区溢出攻击**: 利用缓冲区溢出漏洞所进行的攻击行为  \n**栈随机化**: 程序加载的栈空间的起始位置随机变化的技术  \n**金丝雀值**: 在函数的准备阶段, 在其栈帧中的缓冲区底部与保存的寄存器状态之间加入一个随机生存的特定值  \n\n## 2.\n\n1. 机器指令通常由主操作码(OP)、ModR/M、SIM、位移和立即数. 主操作码表示进行的操作, Mod和R/M表示另一操作数的寻址方式. SIB确定比例因子、变址寄存器和基值寄存器. 位移字段给出位移量, 立即数字段用于给出指令中的一个源操作数.\n2. 预处理---编译---汇编---链接\n3. 仅NOT指令不影响条件标志符, 其他指令执行后, OF=CF=0, 而ZF和SF则根据运算结果来设置: 若结果为全0，则ZF=1; 若最高位为1, 则SF=1. 移位可能改变CF、OF、SF和ZF. \n4. 条件转移指令以条件标志位的逻辑运算结果作为转移依据. 例如\n```C\ncmpl %eax %adx\njge label\n```\n5. 调用指令是一种无条件转移指令, 它们都能改变程序执行顺序, CALL指令在跳转到被调用过程执行之前先要把返回地址压栈.\n6. 按值传递会把参数的值压入栈中, 而按地址传递则会将值的地址压入栈中.\n7. 递归调用的执行一直要等到满足跳出过程的条件才结束, 在这之前递归调用的非静态局部变量会一直保存在栈中, 直到过程执行结束才会释放. 同时, 每增加一次过程调用, 就要增加许多条包含在准备阶段和结束阶段的额外指令, 这些指令的执行实际开销对程序的性能影响很大. \n8. 因为由于字宽的存储器限制, 为了避免由于多次访存带来指令执行效率的降低, 编译器会进行对齐.\n9. 对数组的引用没有边界约束.\n\n## 3.\n(1) movw, 基址加比例变址加位移, 寄存器寻址\n(2) movb, 寄存器寻址, 基址加位移\n(3) addl, 比例变址加位移, 寄存器寻址\n(4) orb, 基址寻址, 寄存器寻址\n(5) pushl, 立即数寻址\n(6) movl, 立即数寻址, 寄存器寻址\n(7) testw, 寄存器寻址, 寄存器寻址\n(8) leal, 基址加变址加位移, 寄存器寻址\n\n## 4.\n(1) 立即数寻址前要加%, `movl $0xFF, (%eax)`\n(2) 操作数和寄存器的长度不符, `movw %ax, 12(%ebp)`\n(3) 操作数2不能是立即数, `addl $0xF0, %ecx`\n(4) 立即数长度超出操作数长度, `orl $0xFFFF0, ($ebx)`\n(5) 基址寄存器需要时通用寄存器, `addb $0xF8, ($edi)`\n(6) 两个操作数长度不匹配, `movl %ebx, %eax`\n(7) 不存在esx寄存器, `addl %esi, %eax`\n(8) 缺失变址寄存器, `movw 8(%ebp), %ax`\n\n## 5.\n| src_type | dst_type | 机器级表示 |\n| ---- | ---- | ---- |\n| char | int  | `movsbl %al, (%edx)` |\n| int  | char | `movb %al, (%edx)` |\n| int  | unsigned | `movl %eax, (%edx)` |\n| short | int | `movswl %ax, (%edx)` |\n| unsigned char | unsigned | `movzbl %al, (%adx)` |\n| char | unsigned | `movsbl %al, (%adx)` |\n| int  | int  | `movl %eax, (%adx)` |\n\n## 6.\n(1) zptr对应的实参储存在`16(%ebp)`, yptr对应的实参储存在`12(%ebp)`, xptr对应实参储存在`8(%ebp)`\n(2) \n```C\nvoid func(int *xptr, int *yptr, int *zptr)\n{\n  int temp1 = *xptr, temp2 = *yptr, temp3 = *zptr;\n  *yptr = temp1;\n  *zptr = temp2;\n  *xptr = temp3;\n}\n```\n\n## 7.\n(1) `x`\n(2) `x + y + 4`\n(3) `x + 8 * y`\n(4) `x + 2 * y + 12`\n(5) `4 * x`\n(6) `x + y`\n\n## 8.\n(1) `%edx`, `0x00000070`, `OF = 0, SF = 0, ZF = 0, CF = 0`\n(2) `%ecx`, `0x80000008`, `OF = 1, SF = 1, ZF = 0, CF = 0`\n(3) `%bx`,  `0xff00`,     `OF = 0, SF = 1, ZF = 0, CF = 0`\n(4) None, `OF = 0, SF = 1, ZF = 0, CF = 0`\n(5) `%ecx`, `0x11e25500`, `OF = 1, SF = 0, ZF = 0, CF = 1`\n(6) `%eax`, `0x00930000`, `OF = 1, SF = 0, ZF = 0, CF = 1`\n(7) `%cx`, `0xf`, `OF = 0, SF = 0, ZF = 0`\n\n## 9.\n```assembly\nmovl 12(%ebp), %ecx # R[ecx]<--M[R[ebp]+12], 即R[ecx]=y\nsall $8, %ecx       # R[ecx]<--R[ecx]<<8, 即R[ecx]=y<<8\nmovl 8(%ebp), %eax  # R[eax]<--M[R[ebx]+8], 即R[eax]=x\nmovl 20(%ebp), %edx # R[edx]<--M[R[ebx]+20], 即R[edx]=k\nimull %edx, %eax    # R[eax]<--R[eax]*R[edx], 即R[eax]=k*x\nmovl 16(%ebp), %edx # R[edx]<--M[R[ebp]+16], 即R[edx]=z\nandl $66520, %edx   # R[edx]<--R[edx]&0xfff0, 即R[edx]=z&0xfff0\naddl %ecx, %edx     # R[edx]<--R[edx]+R[ecx], 即R[edx]=(y<<8)+(z&0xfff0)\nsubl %adx, %eax     # R[eax]<--R[eax]-R[edx], 即R[eax]=(k*x)-((y<<8)+(z&0xfff0))\n```\n\n```C\nint operate(int x, int y, int z, int k)\n{\n  int v = (k*x)-((y<<8)+(z&0xfff0));\n  return v;\n}\n```\n\n## 10.\n```assembly\nmovl 12(%ebp), %eax # R[eax]<--M[R[ebp]+12], 即R[eax]=x\nmovl 29(%ebp), %ecx # R[ecx]<--M[R[ebp]+20], 即将y的高32位赋值给R[ecx]\nimull %eax, %ecx    # R[ecx]<--R[ecx]*R[eax], 即将y的高32位乘以x\nmull 16(%ebp)       # 将y的低32位乘以x, 将低32位储存在R[eax], 将高32位储存在R[edx]\nleal (%ecx, %edx), %edx # R[edx]<--R[ecx]+R[edx], 即将结果的高32位相加\nmovl 8(%ebp), %ecx  # R[ecx]<--M[R[ebp]+8], 即将d传入R[ecx]\nmovl %eax, (%ecx)   # M[R[ecx]]<--R[eax], 即将结果的低32位传入d指向的位置的底32位\nmovl %edx, 4(%ecx)  # M[R[ecx]+4]<--R[edx], 即将结果的高32位传入d指向的位置的高32位\n```\nnum_type是`unsigned long long int`\n\n## 11.\n(1) `0x8048394`, `0x804838e+5+1e`\n(2) `0x8048386`, 指令中的`00 ao 04 08`直接指定了地址, `01`指定了立即数\n(3) `0x80492cc`\n(4) `0x8048196`\n\n## 12.\n(1)\n```assembly\nmovb 8(%ebp), %dl # R[dl]<--M[R[ebp]+8], 即R[dl]=x\nmovl 12(%ebp), %eax # R[eax]<--M[R[ebp]+12], 即R[eax]=p\ntestl %eax, %eax # 判断p是否为0\nje .L1 # ZF=0时跳转到.L1\ntestb $0x80, $dl # 判断x是否小于0\nje .L1 # ZF=0时跳转到.L1\naddb %dl, (%eax) # M[R[eax]]<--M[R[eax]]+R[dl]\n.L1\n```\n因为if中有两条判断指令\n(2)\n```C\nif(!p)\n  goto false_label;\nif(x>=0)\n  goto false_label;\n*p += x;\nfalse_label:\n```\n\n## 13.\n```C\nint func(int x, int y)\n{\n  int z = x;\n  if (z <= -100){\n    if (y > z)\n      z = z + y;\n    else\n      z = z - y;\n\n  } else if (1)\n    z = z < 16 ? z * y : z & y;\n  return z;\n}\n```\n\n## 14.\n(1)\n```assembly\nmovw 8(%ebp), %bx # R[bx]<--M[R[ebp]+8], R[bx]=x\nmovw 12(%ebp), %si # R[si]<--M[R[ebp]+12], R[si]=y\nmovw 16(%ebp), %cx # R[cx]<--M[R[ebp]+16], R[cx]=k\n.L1:\nmovw %si, %dx # R[dx]<--R[si], R[dx]=y\nmovw %dx, %ax # R[ax]<--R[dx], R[ax]=y\nsarw $15, %dx # 将R[dx]的值算数右移15位\nidiv %cx # R[dx]和R[ax]表示的值除以R[cx](k), 商储存在R[ax], 余数储存在R[dx]中\nimulw %dx, %bx # R[bx]<--R[dx]*R[bx]\ndecw %cx # R[cx]<--R[cx]-1\ntestw %cx, %cx # 判断R[cx]是否大于0\njle .L2 # 若SF!=OF或ZF=0则跳转到.L2\ncmpw %cx, %si # 比较R[si](y)和R[cx](k)的大小\njg .L1 # 若y>k时, 跳转到.L1\n.L2:\nmovswl %bx, %eax # 将R[bx]中的按符号扩展到R[eax]中\n```\n\n(2) bx, si是被调用者保存寄存器, eax, cx, dx是调用者保存寄存器, bx, si必须保存到栈中\n(3) 因为idiv的操作数是16位数, 则除数保存在dx-ax中, DX寄存器算数右移15位是为了进行符号扩展\n\n## 15.\n```C\nint f1(unsigned x)\n{\n  int y = 0;\n  while (x != 0){\n    y ^= x;\n    x >>= 1;\n  }\n  return 1 && y;\n}\n```\n判断x二进制表示中1的奇偶个数, 奇为1, 偶为0\n\n## 16.\n函数sw中的switch共有6个分支, 处理.L7时取值为3,9, 处理.L2时为4,5, 处理.L3时为6, 处理.L4时为7, 处理.L5时为8, 处理.L6时为10. 标号为3,9,或者大于10时执行default语句. 4,5会执行同一标号, 3,9和大于10会执行同一标号.\n\n## 17.\n```C\nunsigned int test(char a, unsigned short b, unsigned short c, short *p)\n{\n  *p = a;\n  return b*c;\n}\n```\n\n## 18.\n(1) `0xbc00001c`, `0xbc00001c`, `0xbc000030`\n(2) `0xbc00001c`, `0xbbfffff4`, `0xbc000020`\n(3) y变量在`-8(%ebp)`, x变量在`-4(%ebp)`\n(4)\n|地址| 内容|\n|----|----|\n| 0xbc000020 | funct返回地址 |\n| 0xbc00001c(ebp) | 0xbc000030 |\n| 0xbc000018 | x = 0x16  |\n| 0xbc000014 | y = 0x100 |\n| 0xbc000010 ||\n| 0xbc00000c ||\n| 0xbc000008 ||\n| 0xbc000004 ||\n| 0xbc000000 ||\n| 0xbbfffffc | &y |\n| 0xbbfffff8 | &x |\n| 0xbbfffff4(esp) | 0x804c000 |\n\n## 19.\n```C\nint refunc(unsigned x) {\n  if (x == 0)\n    return 0;\n  unsigned nx = x / 2;\n  int rv = refunc(nx);\n  return nv + (1 & x);\n}\n```\n统计x二进制表示中1的个数. \n\n## 20.\n|数组|元素大小(B)|数组大小(B)|起始地址|元素i的地址|\n| ---- | ---- | ---- | ---- | ---- |\n| char A[10] | 10 | 10 | &A[0] | &A[0]+i|\n| int B[100] | 100 | 400 | & B[0] | &B[0]+4*i|\n| short \\*C[5] | 5 | 20 | &C[0] | &C[0]+4*i |\n| short \\*\\*D[6] | 6 | 24 | &D[0] | &D[0]+4*i|\n| long double E[10] | 10 | 120 | &E[0] | &E[0]+12*i|\n| long double \\*F[10] | 10 | 40 | &F[0] | &F[0]+4*i|\n\n## 21.\n|表达式|类型|值|汇编代码|\n|----|----|----|----|\n|S|short \\*|A~S~|`leal (%edx), %eax` |\n|S+i|short \\*|A~S~+2*i| `leal (%edx, %ecx, 2), %eax` |\n|S[i]|short|M[A~S~+2*i]| `movw (%edx, %ecx, 2), %ax` |\n|&S[10]|short \\*|A~S~+20| `leal 20(%edx), %eax` |\n|&S[i+2]|short \\*|A~S~+2+i+4| `leal 4(%edx, %ecx, 2), %eax` |\n|&S[i]-S|int|i| `movl %ecx, %eax` |\n|S[4*i+4]|short|M[A~S~+8*i+8]| `movw 8(%edx, %ecx, 8), %eax` |\n|\\*(S+i-2)|short|M[A~S~+2*i-4]| `movw -4(%edx, %ecx, 2), %eax` |\n\n## 22.\nM = 7, N = 5\n\n## 23.\nL = 18, M = 7, N = 9\n\n## 24.\n(1) M = 19, M储存在edi中, j储存在ecx中\n(2) \n```C\nfor(; j < M; i++) {\n    t = a[i][j];\n    a[i][j] = a[j][i]\n    a[j][i] = t;\n}\n```\n\n## 25.\n(1) 16, 成员p的偏移是0, s.x的偏移是4, s.y的偏移是8, next的偏移是12\n(2) \n```C\nvoid np_init(struct node *np)\n{\n    np->s.x = np->s.y;\n    np->p = &(np->s.x);\n    np->next = np;\n}\n```\n\n## 26.\n|表达式EXPR|TYPE类型|汇编指令序列|\n|----|----|----|\n|uptr->s1.x|int| `movl (%eax), %eax`<br/>`movl %eax, (%edx)`|\n|uptr->s1.y|short|`movw 4(%eax), %ax`<br/>`movw %ax, (%edx)`|\n|&uptr->s1.z|short *|`leal 6(%eax), %eax`<br/>`movl %eax, (%edx)`|\n|uptr->s2.a|short *|`movl %eax, (%edx)`|\n|uptr->s2.a[uptr->s2.b]|short|`movl 4(%eax), %ecx`<br/>`movw (%eax, %ecx, 2), %cx`<br>`movw %cx, (%edx)`|\n|*uptr->s2.p|char|`movb 8(%eax), %al`<br/>`movb %al, (%edx)`|\n\n## 27.\n(1) s的偏移量是0, c的偏移量是2, i的偏移量是4, d的偏移量是8, 结构体总大小是12, 结构起始位置的对其要求是4的倍数.\n(2) i的偏移量是0, s的偏移量是4, c的偏移量是6, d的偏移量是7, 结构体总大小是8, 结构起始位置的对齐要求是4的倍数.\n(3) c的偏移量是0, s的偏移量是2, i的偏移量是4, d的偏移量是8, 结构体总大小是12, 结构起始位置的对齐要求是4的倍数.\n(4) s的偏移量是0, c的偏移量是6, 结构体总大小是8, 结构起始位置的对齐要求是2的倍数.\n(5) c的偏移量是0, s的偏移量是4, i的偏移量是8, d的偏移量是12, e的偏移量是16, 结构体总大小是24, 结构起始位置的对齐要求是4的倍数.\n(6) c的偏移量是0, s的偏移量是36, d的偏移量是40, 结构体总大小是44, 结构起始位置的对齐要求是4的倍数.\n\n## 28.\nc的偏移量是0, d的偏移量是8, i的偏移量是16, s的偏移量是20, p的偏移量是24, l的偏移量是28, g的偏移量是32, v的偏移量是40. 结构体总大小为48. 如下调整可以使得占用空间最小:\n```C\nstruct {\n    double d;\n    long long g;\n    int i;\n    char *p;\n    long l;\n    void *v;\n    short s;\n    char c;\n} test;\n``` \n\n## 29.\n(1)\n|地址|内容|\n|----|----|\n|0xbffc07f0|0x80485c8(返回地址)|\n|0xbffc07ec(EBP)|0xbffc0800(EBP旧值)|\n|0xbffc07e8|0x8(EDI旧值)|\n|0xbffc07e4|0x10(ESI旧值)|\n|0xbffc07e0|0x5(EBX旧值)|\n|0xbffc07dc||\n|0xbffc07d8|(buf)|\n|0xbffc07d4||\n|0xbffc07d0||\n|0xbffc07cc||\n|0xbffc07c8||\n|0xbffc07c4(ESP)|gets参数入口|\n\n(2)\n|地址|内容|\n|----|----|\n|0xbffc07f0|0x000D3938(返回地址)|\n|0xbffc07ec(EBP)|0x37363534(EBP旧值)|\n|0xbffc07e8|0x33323130(EDI旧值)|\n|0xbffc07e4|0x46454443(ESI旧值)|\n|0xbffc07e0|0x42413938(EBX旧值)|\n|0xbffc07dc|0x37363534|\n|0xbffc07d8|0x33323130(buf)|\n|0xbffc07d4||\n|0xbffc07d0||\n|0xbffc07cc||\n|0xbffc07c8||\n|0xbffc07c4(ESP)|gets参数入口|\n\n(3)\n正确返回地址是: `0x80485c8`\n得到了`0x000d3938`\n\n(4)\nEBP, EDI, ESI, EBX被破坏\n\n(5)\nmalloc申请的长度应该为`strlen(buf)+1`, 最后应该赋值`result[strlen(buf)]=\\0`, 应该检查result是否为`NULL`\n\n## 30.\n```C\nabc(int c, long long int *a, int *b);\nabc(unsigned int c, long long int *a, int *b);\nabc(int c, unsigned long long int *a, int *b);\nabc(unsigned int c, unsigned long long int *a, int *b);\n```\n\n## 31.\n(1)\n```assembly\nmovl 8(%ebp), %edx # R[edx]<--M[R[ebp]+8], 即R[edx]=x\nmovl 12(%ebp), %ecx # R[ecx]<--M[R[ebp]+12], 即R[ecx]=k\nmovl $255, %esi # R[esi] = 255, R[esi] = val\nmovl $-2147483648, %edi # R[edi] = -2147483648, R[edi] = i\n.L3:\nmovl %edi, %eax # R[eax]<--R[edi], R[eax] = i\nandl %edx, %eax # R[eax]<--R[edx]&R[eax], R[eax]=x&i\nxorl %eax, %esi # R[esi]<--R[eax]^R[esi]\nmovl %ecx, %ebx # R[ebx]<--R[ecx], R[ebx]=k\nshrl %bl, %edi # R[edi]<--R[edi]>>R[bl]\ntest1 %edi, %edi # 判断R[edi]是否为0\njne .L3\nmovl %esi, %eax # R[eax]<--R[esi]\n```\n\n(2)\nx存放在EDX, k存放在ECX, val存放在ESI, i存放在EDI.\n(3)\nval=255, i=-2147483648\n(4)\n终止的条件是`i = 0`, i的修改`i = ((unsigned) i) >> (char) k`\n(5)\n```C\nint lproc(int x, int k)\n{\n    int val = 255;\n    int i;\n    for (i = -2147483648; i != 0; i = ((unsigned) i) >> (char) k) {\n        val ^= (x & i);\n    }\n    return val;\n}\n```\n\n## 32.\nLEN = 7\n```C\ntypedef struct {\n    int idx;\n    int a[6];\n}\n```\n\n## 33.\n(1) n1.ptr的偏移量是0, n1.data1的偏移量是4, n2.data2的偏移量是0, n2.next的偏移量是4\n(2) node类型总大小占8字节\n(3)\n```C\nvoid chain_proc(union node *uptr) {\n    uptr->data1 = *(uptr->n2.next->n1.ptr) - uptr->data2;\n}\n```\n## 34.\n(1) tptr通过RDI传递\n(2)\n```C\nlong trace(tree_ptr tptr)\n{\n    long int val = 0;\n    while (tptr != NULL)\n    {\n        val = tptr->val;\n        tptr = tptr->left;\n    }\n    return val;\n}\n```\n(3)\n取出二叉树最左的叶子的值.\n\n## 35.\n(1) 第6行将a的值解释成double型打印, 第7行将a的值按指转化为double型再打印\n(2) 略\n(3) 每次的结果不一致\n(4) 略\n(5) 略\n(6) 第6行对应于`movsd  -0x18(%rbp),%xmm0`, 第7行对应于`cvtsi2sd %eax,%xmm0`\n(7) 略","source":"_posts/计算机系统基础第三章习题.md","raw":"---\ntitle: 计算机系统基础第三章习题\ndate: 2023-05-04 11:38:26\nmathjax: true\ncategories:\n    - 计算机\ntags:\n    - 计算机系统基础\n---\n\n# 第三章\n## 1.\n**机器语言程序**: 由若干条机器指令组成的序列  \n**机器指令**: 介于微指令和伪指令之间的指令, 处于硬件和软件的交界面  \n**汇编语言**: 与机器语言一一对应的符号化表示语言  \n**汇编指令**: 用若干个助记符表表示的与机器指令一一对应的指令  \n**汇编语言程序**: 用汇编语言编写的程序  \n**汇编助记符**: 用来表示指令操作码的容易记忆的英文单词或缩写, 用来表示操作数或地址码的标号、变量名称、寄存器名称、常数等  \n**汇编程序**: 用来将汇编语言源程序中的汇编指令翻译成机器指令的程序  \n**反汇编程序**: 机器指令反过来翻译成汇编指令的程序  \n<!--more-->  \n**机器级代码**: 由机器指令和汇编指令组成的代码  \n**通用寄存器**: 没有专门用途的可以存放各类定点操作数的寄存器  \n**变址寄存器**: ESI  \n**基址寄存器**: EBP  \n**栈指针寄存器**: ESP  \n**指令指针寄存器**: EIP  \n**标志寄存器**: EFLAGS  \n**条件标志(条件码)**: 用来存放运行的状态信息, 由硬件自动设定  \n**寻址方式**: 根据指令给定信息得到操作数或操作数地址的方式  \n**立即寻址**: 指令中直接给出操作数  \n**寄存器寻址**: 指令中给出操作数所存放的寄存器的编号  \n**相对寻址**: 计算的是转移目标指令的线性地址  \n**存储器操作数**: 操作数在存储器单元中  \n**实地址模式**: 最大寻址空间为1MB, 存储管理采用分段方式, 每段的最大地址空间为64KB  \n**保护模式**: 为了实现在多任务方式下对不同任务使用的虚拟存储空间进行完全隔离, 以保护不同任务之间不会相互破坏各自的代码和数据  \n有效地址: 给出了操作数所在段的段内偏移地址  \n**比例变址**: 变址值等于变址寄存器内容乘以比例系数  \n**非比例变址**: 变址值就是变址寄存器的内容  \n**比例系数(比例因子)**: 操作数的字节个数  \n**MMX指令**: 每个MMX寄存器实际上是对应80位浮点数据寄存器中64位尾数所占的位  \n**SSE指令集**: 采用SIMD技术的指令集  \n**SIMD**: 单指令多数据, 实现单条指令同时并行处理多个数据元素的功能  \n**多媒体扩展通用寄存器**: 8个128位的SSE指令专用寄存器XMM0~XMM7  \n**栈**: 栈是一种采用\"先进后出\"方式访问的一块存储区  \n**调用者保存寄存器**: 在过程P调用过程Q时, Q可以直接使用这三个寄存器, 不用将它们的值保存到栈中  \n**被调用者保存寄存器**: Q必须将它们的值保存到栈中再使用它们, 并在返回P之前先恢复它们的值  \n**帧指针寄存器**: EBP  \n**当前栈帧**: 帧指针EBP和栈指针ESP指向区间之间的区域  \n**按值传递参数**: 形参是基本类型变量名  \n**按地址传递参数**: 形参是指针类型变量或构造类型变量名  \n**嵌套调用**: 某个函数调用另一个函数  \n**递归调用**: 某个函数调用自己本身  \n**缓冲区溢出**: 超越数组存储区范围的访问  \n**缓冲区溢出攻击**: 利用缓冲区溢出漏洞所进行的攻击行为  \n**栈随机化**: 程序加载的栈空间的起始位置随机变化的技术  \n**金丝雀值**: 在函数的准备阶段, 在其栈帧中的缓冲区底部与保存的寄存器状态之间加入一个随机生存的特定值  \n\n## 2.\n\n1. 机器指令通常由主操作码(OP)、ModR/M、SIM、位移和立即数. 主操作码表示进行的操作, Mod和R/M表示另一操作数的寻址方式. SIB确定比例因子、变址寄存器和基值寄存器. 位移字段给出位移量, 立即数字段用于给出指令中的一个源操作数.\n2. 预处理---编译---汇编---链接\n3. 仅NOT指令不影响条件标志符, 其他指令执行后, OF=CF=0, 而ZF和SF则根据运算结果来设置: 若结果为全0，则ZF=1; 若最高位为1, 则SF=1. 移位可能改变CF、OF、SF和ZF. \n4. 条件转移指令以条件标志位的逻辑运算结果作为转移依据. 例如\n```C\ncmpl %eax %adx\njge label\n```\n5. 调用指令是一种无条件转移指令, 它们都能改变程序执行顺序, CALL指令在跳转到被调用过程执行之前先要把返回地址压栈.\n6. 按值传递会把参数的值压入栈中, 而按地址传递则会将值的地址压入栈中.\n7. 递归调用的执行一直要等到满足跳出过程的条件才结束, 在这之前递归调用的非静态局部变量会一直保存在栈中, 直到过程执行结束才会释放. 同时, 每增加一次过程调用, 就要增加许多条包含在准备阶段和结束阶段的额外指令, 这些指令的执行实际开销对程序的性能影响很大. \n8. 因为由于字宽的存储器限制, 为了避免由于多次访存带来指令执行效率的降低, 编译器会进行对齐.\n9. 对数组的引用没有边界约束.\n\n## 3.\n(1) movw, 基址加比例变址加位移, 寄存器寻址\n(2) movb, 寄存器寻址, 基址加位移\n(3) addl, 比例变址加位移, 寄存器寻址\n(4) orb, 基址寻址, 寄存器寻址\n(5) pushl, 立即数寻址\n(6) movl, 立即数寻址, 寄存器寻址\n(7) testw, 寄存器寻址, 寄存器寻址\n(8) leal, 基址加变址加位移, 寄存器寻址\n\n## 4.\n(1) 立即数寻址前要加%, `movl $0xFF, (%eax)`\n(2) 操作数和寄存器的长度不符, `movw %ax, 12(%ebp)`\n(3) 操作数2不能是立即数, `addl $0xF0, %ecx`\n(4) 立即数长度超出操作数长度, `orl $0xFFFF0, ($ebx)`\n(5) 基址寄存器需要时通用寄存器, `addb $0xF8, ($edi)`\n(6) 两个操作数长度不匹配, `movl %ebx, %eax`\n(7) 不存在esx寄存器, `addl %esi, %eax`\n(8) 缺失变址寄存器, `movw 8(%ebp), %ax`\n\n## 5.\n| src_type | dst_type | 机器级表示 |\n| ---- | ---- | ---- |\n| char | int  | `movsbl %al, (%edx)` |\n| int  | char | `movb %al, (%edx)` |\n| int  | unsigned | `movl %eax, (%edx)` |\n| short | int | `movswl %ax, (%edx)` |\n| unsigned char | unsigned | `movzbl %al, (%adx)` |\n| char | unsigned | `movsbl %al, (%adx)` |\n| int  | int  | `movl %eax, (%adx)` |\n\n## 6.\n(1) zptr对应的实参储存在`16(%ebp)`, yptr对应的实参储存在`12(%ebp)`, xptr对应实参储存在`8(%ebp)`\n(2) \n```C\nvoid func(int *xptr, int *yptr, int *zptr)\n{\n  int temp1 = *xptr, temp2 = *yptr, temp3 = *zptr;\n  *yptr = temp1;\n  *zptr = temp2;\n  *xptr = temp3;\n}\n```\n\n## 7.\n(1) `x`\n(2) `x + y + 4`\n(3) `x + 8 * y`\n(4) `x + 2 * y + 12`\n(5) `4 * x`\n(6) `x + y`\n\n## 8.\n(1) `%edx`, `0x00000070`, `OF = 0, SF = 0, ZF = 0, CF = 0`\n(2) `%ecx`, `0x80000008`, `OF = 1, SF = 1, ZF = 0, CF = 0`\n(3) `%bx`,  `0xff00`,     `OF = 0, SF = 1, ZF = 0, CF = 0`\n(4) None, `OF = 0, SF = 1, ZF = 0, CF = 0`\n(5) `%ecx`, `0x11e25500`, `OF = 1, SF = 0, ZF = 0, CF = 1`\n(6) `%eax`, `0x00930000`, `OF = 1, SF = 0, ZF = 0, CF = 1`\n(7) `%cx`, `0xf`, `OF = 0, SF = 0, ZF = 0`\n\n## 9.\n```assembly\nmovl 12(%ebp), %ecx # R[ecx]<--M[R[ebp]+12], 即R[ecx]=y\nsall $8, %ecx       # R[ecx]<--R[ecx]<<8, 即R[ecx]=y<<8\nmovl 8(%ebp), %eax  # R[eax]<--M[R[ebx]+8], 即R[eax]=x\nmovl 20(%ebp), %edx # R[edx]<--M[R[ebx]+20], 即R[edx]=k\nimull %edx, %eax    # R[eax]<--R[eax]*R[edx], 即R[eax]=k*x\nmovl 16(%ebp), %edx # R[edx]<--M[R[ebp]+16], 即R[edx]=z\nandl $66520, %edx   # R[edx]<--R[edx]&0xfff0, 即R[edx]=z&0xfff0\naddl %ecx, %edx     # R[edx]<--R[edx]+R[ecx], 即R[edx]=(y<<8)+(z&0xfff0)\nsubl %adx, %eax     # R[eax]<--R[eax]-R[edx], 即R[eax]=(k*x)-((y<<8)+(z&0xfff0))\n```\n\n```C\nint operate(int x, int y, int z, int k)\n{\n  int v = (k*x)-((y<<8)+(z&0xfff0));\n  return v;\n}\n```\n\n## 10.\n```assembly\nmovl 12(%ebp), %eax # R[eax]<--M[R[ebp]+12], 即R[eax]=x\nmovl 29(%ebp), %ecx # R[ecx]<--M[R[ebp]+20], 即将y的高32位赋值给R[ecx]\nimull %eax, %ecx    # R[ecx]<--R[ecx]*R[eax], 即将y的高32位乘以x\nmull 16(%ebp)       # 将y的低32位乘以x, 将低32位储存在R[eax], 将高32位储存在R[edx]\nleal (%ecx, %edx), %edx # R[edx]<--R[ecx]+R[edx], 即将结果的高32位相加\nmovl 8(%ebp), %ecx  # R[ecx]<--M[R[ebp]+8], 即将d传入R[ecx]\nmovl %eax, (%ecx)   # M[R[ecx]]<--R[eax], 即将结果的低32位传入d指向的位置的底32位\nmovl %edx, 4(%ecx)  # M[R[ecx]+4]<--R[edx], 即将结果的高32位传入d指向的位置的高32位\n```\nnum_type是`unsigned long long int`\n\n## 11.\n(1) `0x8048394`, `0x804838e+5+1e`\n(2) `0x8048386`, 指令中的`00 ao 04 08`直接指定了地址, `01`指定了立即数\n(3) `0x80492cc`\n(4) `0x8048196`\n\n## 12.\n(1)\n```assembly\nmovb 8(%ebp), %dl # R[dl]<--M[R[ebp]+8], 即R[dl]=x\nmovl 12(%ebp), %eax # R[eax]<--M[R[ebp]+12], 即R[eax]=p\ntestl %eax, %eax # 判断p是否为0\nje .L1 # ZF=0时跳转到.L1\ntestb $0x80, $dl # 判断x是否小于0\nje .L1 # ZF=0时跳转到.L1\naddb %dl, (%eax) # M[R[eax]]<--M[R[eax]]+R[dl]\n.L1\n```\n因为if中有两条判断指令\n(2)\n```C\nif(!p)\n  goto false_label;\nif(x>=0)\n  goto false_label;\n*p += x;\nfalse_label:\n```\n\n## 13.\n```C\nint func(int x, int y)\n{\n  int z = x;\n  if (z <= -100){\n    if (y > z)\n      z = z + y;\n    else\n      z = z - y;\n\n  } else if (1)\n    z = z < 16 ? z * y : z & y;\n  return z;\n}\n```\n\n## 14.\n(1)\n```assembly\nmovw 8(%ebp), %bx # R[bx]<--M[R[ebp]+8], R[bx]=x\nmovw 12(%ebp), %si # R[si]<--M[R[ebp]+12], R[si]=y\nmovw 16(%ebp), %cx # R[cx]<--M[R[ebp]+16], R[cx]=k\n.L1:\nmovw %si, %dx # R[dx]<--R[si], R[dx]=y\nmovw %dx, %ax # R[ax]<--R[dx], R[ax]=y\nsarw $15, %dx # 将R[dx]的值算数右移15位\nidiv %cx # R[dx]和R[ax]表示的值除以R[cx](k), 商储存在R[ax], 余数储存在R[dx]中\nimulw %dx, %bx # R[bx]<--R[dx]*R[bx]\ndecw %cx # R[cx]<--R[cx]-1\ntestw %cx, %cx # 判断R[cx]是否大于0\njle .L2 # 若SF!=OF或ZF=0则跳转到.L2\ncmpw %cx, %si # 比较R[si](y)和R[cx](k)的大小\njg .L1 # 若y>k时, 跳转到.L1\n.L2:\nmovswl %bx, %eax # 将R[bx]中的按符号扩展到R[eax]中\n```\n\n(2) bx, si是被调用者保存寄存器, eax, cx, dx是调用者保存寄存器, bx, si必须保存到栈中\n(3) 因为idiv的操作数是16位数, 则除数保存在dx-ax中, DX寄存器算数右移15位是为了进行符号扩展\n\n## 15.\n```C\nint f1(unsigned x)\n{\n  int y = 0;\n  while (x != 0){\n    y ^= x;\n    x >>= 1;\n  }\n  return 1 && y;\n}\n```\n判断x二进制表示中1的奇偶个数, 奇为1, 偶为0\n\n## 16.\n函数sw中的switch共有6个分支, 处理.L7时取值为3,9, 处理.L2时为4,5, 处理.L3时为6, 处理.L4时为7, 处理.L5时为8, 处理.L6时为10. 标号为3,9,或者大于10时执行default语句. 4,5会执行同一标号, 3,9和大于10会执行同一标号.\n\n## 17.\n```C\nunsigned int test(char a, unsigned short b, unsigned short c, short *p)\n{\n  *p = a;\n  return b*c;\n}\n```\n\n## 18.\n(1) `0xbc00001c`, `0xbc00001c`, `0xbc000030`\n(2) `0xbc00001c`, `0xbbfffff4`, `0xbc000020`\n(3) y变量在`-8(%ebp)`, x变量在`-4(%ebp)`\n(4)\n|地址| 内容|\n|----|----|\n| 0xbc000020 | funct返回地址 |\n| 0xbc00001c(ebp) | 0xbc000030 |\n| 0xbc000018 | x = 0x16  |\n| 0xbc000014 | y = 0x100 |\n| 0xbc000010 ||\n| 0xbc00000c ||\n| 0xbc000008 ||\n| 0xbc000004 ||\n| 0xbc000000 ||\n| 0xbbfffffc | &y |\n| 0xbbfffff8 | &x |\n| 0xbbfffff4(esp) | 0x804c000 |\n\n## 19.\n```C\nint refunc(unsigned x) {\n  if (x == 0)\n    return 0;\n  unsigned nx = x / 2;\n  int rv = refunc(nx);\n  return nv + (1 & x);\n}\n```\n统计x二进制表示中1的个数. \n\n## 20.\n|数组|元素大小(B)|数组大小(B)|起始地址|元素i的地址|\n| ---- | ---- | ---- | ---- | ---- |\n| char A[10] | 10 | 10 | &A[0] | &A[0]+i|\n| int B[100] | 100 | 400 | & B[0] | &B[0]+4*i|\n| short \\*C[5] | 5 | 20 | &C[0] | &C[0]+4*i |\n| short \\*\\*D[6] | 6 | 24 | &D[0] | &D[0]+4*i|\n| long double E[10] | 10 | 120 | &E[0] | &E[0]+12*i|\n| long double \\*F[10] | 10 | 40 | &F[0] | &F[0]+4*i|\n\n## 21.\n|表达式|类型|值|汇编代码|\n|----|----|----|----|\n|S|short \\*|A~S~|`leal (%edx), %eax` |\n|S+i|short \\*|A~S~+2*i| `leal (%edx, %ecx, 2), %eax` |\n|S[i]|short|M[A~S~+2*i]| `movw (%edx, %ecx, 2), %ax` |\n|&S[10]|short \\*|A~S~+20| `leal 20(%edx), %eax` |\n|&S[i+2]|short \\*|A~S~+2+i+4| `leal 4(%edx, %ecx, 2), %eax` |\n|&S[i]-S|int|i| `movl %ecx, %eax` |\n|S[4*i+4]|short|M[A~S~+8*i+8]| `movw 8(%edx, %ecx, 8), %eax` |\n|\\*(S+i-2)|short|M[A~S~+2*i-4]| `movw -4(%edx, %ecx, 2), %eax` |\n\n## 22.\nM = 7, N = 5\n\n## 23.\nL = 18, M = 7, N = 9\n\n## 24.\n(1) M = 19, M储存在edi中, j储存在ecx中\n(2) \n```C\nfor(; j < M; i++) {\n    t = a[i][j];\n    a[i][j] = a[j][i]\n    a[j][i] = t;\n}\n```\n\n## 25.\n(1) 16, 成员p的偏移是0, s.x的偏移是4, s.y的偏移是8, next的偏移是12\n(2) \n```C\nvoid np_init(struct node *np)\n{\n    np->s.x = np->s.y;\n    np->p = &(np->s.x);\n    np->next = np;\n}\n```\n\n## 26.\n|表达式EXPR|TYPE类型|汇编指令序列|\n|----|----|----|\n|uptr->s1.x|int| `movl (%eax), %eax`<br/>`movl %eax, (%edx)`|\n|uptr->s1.y|short|`movw 4(%eax), %ax`<br/>`movw %ax, (%edx)`|\n|&uptr->s1.z|short *|`leal 6(%eax), %eax`<br/>`movl %eax, (%edx)`|\n|uptr->s2.a|short *|`movl %eax, (%edx)`|\n|uptr->s2.a[uptr->s2.b]|short|`movl 4(%eax), %ecx`<br/>`movw (%eax, %ecx, 2), %cx`<br>`movw %cx, (%edx)`|\n|*uptr->s2.p|char|`movb 8(%eax), %al`<br/>`movb %al, (%edx)`|\n\n## 27.\n(1) s的偏移量是0, c的偏移量是2, i的偏移量是4, d的偏移量是8, 结构体总大小是12, 结构起始位置的对其要求是4的倍数.\n(2) i的偏移量是0, s的偏移量是4, c的偏移量是6, d的偏移量是7, 结构体总大小是8, 结构起始位置的对齐要求是4的倍数.\n(3) c的偏移量是0, s的偏移量是2, i的偏移量是4, d的偏移量是8, 结构体总大小是12, 结构起始位置的对齐要求是4的倍数.\n(4) s的偏移量是0, c的偏移量是6, 结构体总大小是8, 结构起始位置的对齐要求是2的倍数.\n(5) c的偏移量是0, s的偏移量是4, i的偏移量是8, d的偏移量是12, e的偏移量是16, 结构体总大小是24, 结构起始位置的对齐要求是4的倍数.\n(6) c的偏移量是0, s的偏移量是36, d的偏移量是40, 结构体总大小是44, 结构起始位置的对齐要求是4的倍数.\n\n## 28.\nc的偏移量是0, d的偏移量是8, i的偏移量是16, s的偏移量是20, p的偏移量是24, l的偏移量是28, g的偏移量是32, v的偏移量是40. 结构体总大小为48. 如下调整可以使得占用空间最小:\n```C\nstruct {\n    double d;\n    long long g;\n    int i;\n    char *p;\n    long l;\n    void *v;\n    short s;\n    char c;\n} test;\n``` \n\n## 29.\n(1)\n|地址|内容|\n|----|----|\n|0xbffc07f0|0x80485c8(返回地址)|\n|0xbffc07ec(EBP)|0xbffc0800(EBP旧值)|\n|0xbffc07e8|0x8(EDI旧值)|\n|0xbffc07e4|0x10(ESI旧值)|\n|0xbffc07e0|0x5(EBX旧值)|\n|0xbffc07dc||\n|0xbffc07d8|(buf)|\n|0xbffc07d4||\n|0xbffc07d0||\n|0xbffc07cc||\n|0xbffc07c8||\n|0xbffc07c4(ESP)|gets参数入口|\n\n(2)\n|地址|内容|\n|----|----|\n|0xbffc07f0|0x000D3938(返回地址)|\n|0xbffc07ec(EBP)|0x37363534(EBP旧值)|\n|0xbffc07e8|0x33323130(EDI旧值)|\n|0xbffc07e4|0x46454443(ESI旧值)|\n|0xbffc07e0|0x42413938(EBX旧值)|\n|0xbffc07dc|0x37363534|\n|0xbffc07d8|0x33323130(buf)|\n|0xbffc07d4||\n|0xbffc07d0||\n|0xbffc07cc||\n|0xbffc07c8||\n|0xbffc07c4(ESP)|gets参数入口|\n\n(3)\n正确返回地址是: `0x80485c8`\n得到了`0x000d3938`\n\n(4)\nEBP, EDI, ESI, EBX被破坏\n\n(5)\nmalloc申请的长度应该为`strlen(buf)+1`, 最后应该赋值`result[strlen(buf)]=\\0`, 应该检查result是否为`NULL`\n\n## 30.\n```C\nabc(int c, long long int *a, int *b);\nabc(unsigned int c, long long int *a, int *b);\nabc(int c, unsigned long long int *a, int *b);\nabc(unsigned int c, unsigned long long int *a, int *b);\n```\n\n## 31.\n(1)\n```assembly\nmovl 8(%ebp), %edx # R[edx]<--M[R[ebp]+8], 即R[edx]=x\nmovl 12(%ebp), %ecx # R[ecx]<--M[R[ebp]+12], 即R[ecx]=k\nmovl $255, %esi # R[esi] = 255, R[esi] = val\nmovl $-2147483648, %edi # R[edi] = -2147483648, R[edi] = i\n.L3:\nmovl %edi, %eax # R[eax]<--R[edi], R[eax] = i\nandl %edx, %eax # R[eax]<--R[edx]&R[eax], R[eax]=x&i\nxorl %eax, %esi # R[esi]<--R[eax]^R[esi]\nmovl %ecx, %ebx # R[ebx]<--R[ecx], R[ebx]=k\nshrl %bl, %edi # R[edi]<--R[edi]>>R[bl]\ntest1 %edi, %edi # 判断R[edi]是否为0\njne .L3\nmovl %esi, %eax # R[eax]<--R[esi]\n```\n\n(2)\nx存放在EDX, k存放在ECX, val存放在ESI, i存放在EDI.\n(3)\nval=255, i=-2147483648\n(4)\n终止的条件是`i = 0`, i的修改`i = ((unsigned) i) >> (char) k`\n(5)\n```C\nint lproc(int x, int k)\n{\n    int val = 255;\n    int i;\n    for (i = -2147483648; i != 0; i = ((unsigned) i) >> (char) k) {\n        val ^= (x & i);\n    }\n    return val;\n}\n```\n\n## 32.\nLEN = 7\n```C\ntypedef struct {\n    int idx;\n    int a[6];\n}\n```\n\n## 33.\n(1) n1.ptr的偏移量是0, n1.data1的偏移量是4, n2.data2的偏移量是0, n2.next的偏移量是4\n(2) node类型总大小占8字节\n(3)\n```C\nvoid chain_proc(union node *uptr) {\n    uptr->data1 = *(uptr->n2.next->n1.ptr) - uptr->data2;\n}\n```\n## 34.\n(1) tptr通过RDI传递\n(2)\n```C\nlong trace(tree_ptr tptr)\n{\n    long int val = 0;\n    while (tptr != NULL)\n    {\n        val = tptr->val;\n        tptr = tptr->left;\n    }\n    return val;\n}\n```\n(3)\n取出二叉树最左的叶子的值.\n\n## 35.\n(1) 第6行将a的值解释成double型打印, 第7行将a的值按指转化为double型再打印\n(2) 略\n(3) 每次的结果不一致\n(4) 略\n(5) 略\n(6) 第6行对应于`movsd  -0x18(%rbp),%xmm0`, 第7行对应于`cvtsi2sd %eax,%xmm0`\n(7) 略","slug":"计算机系统基础第三章习题","published":1,"updated":"2023-05-11T14:37:14.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhj8pre50004maqh4p7bhgur","content":"<h1 id=\"第三章\">第三章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>机器语言程序</strong>: 由若干条机器指令组成的序列<br>\n<strong>机器指令</strong>: 介于微指令和伪指令之间的指令,\n处于硬件和软件的交界面<br>\n<strong>汇编语言</strong>: 与机器语言一一对应的符号化表示语言<br>\n<strong>汇编指令</strong>:\n用若干个助记符表表示的与机器指令一一对应的指令<br>\n<strong>汇编语言程序</strong>: 用汇编语言编写的程序<br>\n<strong>汇编助记符</strong>:\n用来表示指令操作码的容易记忆的英文单词或缩写,\n用来表示操作数或地址码的标号、变量名称、寄存器名称、常数等<br>\n<strong>汇编程序</strong>:\n用来将汇编语言源程序中的汇编指令翻译成机器指令的程序<br>\n<strong>反汇编程序</strong>: 机器指令反过来翻译成汇编指令的程序<br>\n<span id=\"more\"></span><br>\n<strong>机器级代码</strong>: 由机器指令和汇编指令组成的代码<br>\n<strong>通用寄存器</strong>:\n没有专门用途的可以存放各类定点操作数的寄存器<br>\n<strong>变址寄存器</strong>: ESI<br>\n<strong>基址寄存器</strong>: EBP<br>\n<strong>栈指针寄存器</strong>: ESP<br>\n<strong>指令指针寄存器</strong>: EIP<br>\n<strong>标志寄存器</strong>: EFLAGS<br>\n<strong>条件标志(条件码)</strong>: 用来存放运行的状态信息,\n由硬件自动设定<br>\n<strong>寻址方式</strong>:\n根据指令给定信息得到操作数或操作数地址的方式<br>\n<strong>立即寻址</strong>: 指令中直接给出操作数<br>\n<strong>寄存器寻址</strong>: 指令中给出操作数所存放的寄存器的编号<br>\n<strong>相对寻址</strong>: 计算的是转移目标指令的线性地址<br>\n<strong>存储器操作数</strong>: 操作数在存储器单元中<br>\n<strong>实地址模式</strong>: 最大寻址空间为1MB, 存储管理采用分段方式,\n每段的最大地址空间为64KB<br>\n<strong>保护模式</strong>:\n为了实现在多任务方式下对不同任务使用的虚拟存储空间进行完全隔离,\n以保护不同任务之间不会相互破坏各自的代码和数据<br>\n有效地址: 给出了操作数所在段的段内偏移地址<br>\n<strong>比例变址</strong>: 变址值等于变址寄存器内容乘以比例系数<br>\n<strong>非比例变址</strong>: 变址值就是变址寄存器的内容<br>\n<strong>比例系数(比例因子)</strong>: 操作数的字节个数<br>\n<strong>MMX指令</strong>:\n每个MMX寄存器实际上是对应80位浮点数据寄存器中64位尾数所占的位<br>\n<strong>SSE指令集</strong>: 采用SIMD技术的指令集<br>\n<strong>SIMD</strong>: 单指令多数据,\n实现单条指令同时并行处理多个数据元素的功能<br>\n<strong>多媒体扩展通用寄存器</strong>:\n8个128位的SSE指令专用寄存器XMM0~XMM7<br>\n<strong>栈</strong>: 栈是一种采用\"先进后出\"方式访问的一块存储区<br>\n<strong>调用者保存寄存器</strong>: 在过程P调用过程Q时,\nQ可以直接使用这三个寄存器, 不用将它们的值保存到栈中<br>\n<strong>被调用者保存寄存器</strong>:\nQ必须将它们的值保存到栈中再使用它们, 并在返回P之前先恢复它们的值<br>\n<strong>帧指针寄存器</strong>: EBP<br>\n<strong>当前栈帧</strong>: 帧指针EBP和栈指针ESP指向区间之间的区域<br>\n<strong>按值传递参数</strong>: 形参是基本类型变量名<br>\n<strong>按地址传递参数</strong>:\n形参是指针类型变量或构造类型变量名<br>\n<strong>嵌套调用</strong>: 某个函数调用另一个函数<br>\n<strong>递归调用</strong>: 某个函数调用自己本身<br>\n<strong>缓冲区溢出</strong>: 超越数组存储区范围的访问<br>\n<strong>缓冲区溢出攻击</strong>:\n利用缓冲区溢出漏洞所进行的攻击行为<br>\n<strong>栈随机化</strong>:\n程序加载的栈空间的起始位置随机变化的技术<br>\n<strong>金丝雀值</strong>: 在函数的准备阶段,\n在其栈帧中的缓冲区底部与保存的寄存器状态之间加入一个随机生存的特定值</p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>机器指令通常由主操作码(OP)、ModR/M、SIM、位移和立即数.\n主操作码表示进行的操作, Mod和R/M表示另一操作数的寻址方式.\nSIB确定比例因子、变址寄存器和基值寄存器. 位移字段给出位移量,\n立即数字段用于给出指令中的一个源操作数.</li>\n<li>预处理---编译---汇编---链接</li>\n<li>仅NOT指令不影响条件标志符, 其他指令执行后, OF=CF=0,\n而ZF和SF则根据运算结果来设置: 若结果为全0，则ZF=1; 若最高位为1, 则SF=1.\n移位可能改变CF、OF、SF和ZF.</li>\n<li>条件转移指令以条件标志位的逻辑运算结果作为转移依据. 例如\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmpl %eax %adx</span><br><span class=\"line\">jge label</span><br></pre></td></tr></table></figure></li>\n<li>调用指令是一种无条件转移指令, 它们都能改变程序执行顺序,\nCALL指令在跳转到被调用过程执行之前先要把返回地址压栈.</li>\n<li>按值传递会把参数的值压入栈中,\n而按地址传递则会将值的地址压入栈中.</li>\n<li>递归调用的执行一直要等到满足跳出过程的条件才结束,\n在这之前递归调用的非静态局部变量会一直保存在栈中,\n直到过程执行结束才会释放. 同时, 每增加一次过程调用,\n就要增加许多条包含在准备阶段和结束阶段的额外指令,\n这些指令的执行实际开销对程序的性能影响很大.</li>\n<li>因为由于字宽的存储器限制,\n为了避免由于多次访存带来指令执行效率的降低, 编译器会进行对齐.</li>\n<li>对数组的引用没有边界约束.</li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<ol type=\"1\">\n<li>movw, 基址加比例变址加位移, 寄存器寻址</li>\n<li>movb, 寄存器寻址, 基址加位移</li>\n<li>addl, 比例变址加位移, 寄存器寻址</li>\n<li>orb, 基址寻址, 寄存器寻址</li>\n<li>pushl, 立即数寻址</li>\n<li>movl, 立即数寻址, 寄存器寻址</li>\n<li>testw, 寄存器寻址, 寄存器寻址</li>\n<li>leal, 基址加变址加位移, 寄存器寻址</li>\n</ol>\n<h2 id=\"section-3\">4.</h2>\n<ol type=\"1\">\n<li>立即数寻址前要加%, <code>movl $0xFF, (%eax)</code></li>\n<li>操作数和寄存器的长度不符, <code>movw %ax, 12(%ebp)</code></li>\n<li>操作数2不能是立即数, <code>addl $0xF0, %ecx</code></li>\n<li>立即数长度超出操作数长度, <code>orl $0xFFFF0, ($ebx)</code></li>\n<li>基址寄存器需要时通用寄存器, <code>addb $0xF8, ($edi)</code></li>\n<li>两个操作数长度不匹配, <code>movl %ebx, %eax</code></li>\n<li>不存在esx寄存器, <code>addl %esi, %eax</code></li>\n<li>缺失变址寄存器, <code>movw 8(%ebp), %ax</code></li>\n</ol>\n<h2 id=\"section-4\">5.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>src_type</th>\n<th>dst_type</th>\n<th>机器级表示</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>char</td>\n<td>int</td>\n<td><code>movsbl %al, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>int</td>\n<td>char</td>\n<td><code>movb %al, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>int</td>\n<td>unsigned</td>\n<td><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>short</td>\n<td>int</td>\n<td><code>movswl %ax, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>unsigned char</td>\n<td>unsigned</td>\n<td><code>movzbl %al, (%adx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>char</td>\n<td>unsigned</td>\n<td><code>movsbl %al, (%adx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>int</td>\n<td>int</td>\n<td><code>movl %eax, (%adx)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-5\">6.</h2>\n<ol type=\"1\">\n<li>zptr对应的实参储存在<code>16(%ebp)</code>,\nyptr对应的实参储存在<code>12(%ebp)</code>,\nxptr对应实参储存在<code>8(%ebp)</code></li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *xptr, <span class=\"type\">int</span> *yptr, <span class=\"type\">int</span> *zptr)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> temp1 = *xptr, temp2 = *yptr, temp3 = *zptr;</span><br><span class=\"line\">  *yptr = temp1;</span><br><span class=\"line\">  *zptr = temp2;</span><br><span class=\"line\">  *xptr = temp3;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<ol type=\"1\">\n<li><code>x</code></li>\n<li><code>x + y + 4</code></li>\n<li><code>x + 8 * y</code></li>\n<li><code>x + 2 * y + 12</code></li>\n<li><code>4 * x</code></li>\n<li><code>x + y</code></li>\n</ol>\n<h2 id=\"section-7\">8.</h2>\n<ol type=\"1\">\n<li><code>%edx</code>, <code>0x00000070</code>,\n<code>OF = 0, SF = 0, ZF = 0, CF = 0</code></li>\n<li><code>%ecx</code>, <code>0x80000008</code>,\n<code>OF = 1, SF = 1, ZF = 0, CF = 0</code></li>\n<li><code>%bx</code>, <code>0xff00</code>,\n<code>OF = 0, SF = 1, ZF = 0, CF = 0</code></li>\n<li>None, <code>OF = 0, SF = 1, ZF = 0, CF = 0</code></li>\n<li><code>%ecx</code>, <code>0x11e25500</code>,\n<code>OF = 1, SF = 0, ZF = 0, CF = 1</code></li>\n<li><code>%eax</code>, <code>0x00930000</code>,\n<code>OF = 1, SF = 0, ZF = 0, CF = 1</code></li>\n<li><code>%cx</code>, <code>0xf</code>,\n<code>OF = 0, SF = 0, ZF = 0</code></li>\n</ol>\n<h2 id=\"section-8\">9.</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl 12(%ebp), %ecx # R[ecx]&lt;--M[R[ebp]+12], 即R[ecx]=y</span><br><span class=\"line\">sall $8, %ecx       # R[ecx]&lt;--R[ecx]&lt;&lt;8, 即R[ecx]=y&lt;&lt;8</span><br><span class=\"line\">movl 8(%ebp), %eax  # R[eax]&lt;--M[R[ebx]+8], 即R[eax]=x</span><br><span class=\"line\">movl 20(%ebp), %edx # R[edx]&lt;--M[R[ebx]+20], 即R[edx]=k</span><br><span class=\"line\">imull %edx, %eax    # R[eax]&lt;--R[eax]*R[edx], 即R[eax]=k*x</span><br><span class=\"line\">movl 16(%ebp), %edx # R[edx]&lt;--M[R[ebp]+16], 即R[edx]=z</span><br><span class=\"line\">andl $66520, %edx   # R[edx]&lt;--R[edx]&amp;0xfff0, 即R[edx]=z&amp;0xfff0</span><br><span class=\"line\">addl %ecx, %edx     # R[edx]&lt;--R[edx]+R[ecx], 即R[edx]=(y&lt;&lt;8)+(z&amp;0xfff0)</span><br><span class=\"line\">subl %adx, %eax     # R[eax]&lt;--R[eax]-R[edx], 即R[eax]=(k*x)-((y&lt;&lt;8)+(z&amp;0xfff0))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">operate</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z, <span class=\"type\">int</span> k)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> v = (k*x)-((y&lt;&lt;<span class=\"number\">8</span>)+(z&amp;<span class=\"number\">0xfff0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-9\">10.</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl 12(%ebp), %eax # R[eax]&lt;--M[R[ebp]+12], 即R[eax]=x</span><br><span class=\"line\">movl 29(%ebp), %ecx # R[ecx]&lt;--M[R[ebp]+20], 即将y的高32位赋值给R[ecx]</span><br><span class=\"line\">imull %eax, %ecx    # R[ecx]&lt;--R[ecx]*R[eax], 即将y的高32位乘以x</span><br><span class=\"line\">mull 16(%ebp)       # 将y的低32位乘以x, 将低32位储存在R[eax], 将高32位储存在R[edx]</span><br><span class=\"line\">leal (%ecx, %edx), %edx # R[edx]&lt;--R[ecx]+R[edx], 即将结果的高32位相加</span><br><span class=\"line\">movl 8(%ebp), %ecx  # R[ecx]&lt;--M[R[ebp]+8], 即将d传入R[ecx]</span><br><span class=\"line\">movl %eax, (%ecx)   # M[R[ecx]]&lt;--R[eax], 即将结果的低32位传入d指向的位置的底32位</span><br><span class=\"line\">movl %edx, 4(%ecx)  # M[R[ecx]+4]&lt;--R[edx], 即将结果的高32位传入d指向的位置的高32位</span><br></pre></td></tr></table></figure>\n<p>num_type是<code>unsigned long long int</code></p>\n<h2 id=\"section-10\">11.</h2>\n<ol type=\"1\">\n<li><code>0x8048394</code>, <code>0x804838e+5+1e</code></li>\n<li><code>0x8048386</code>,\n指令中的<code>00 ao 04 08</code>直接指定了地址,\n<code>01</code>指定了立即数</li>\n<li><code>0x80492cc</code></li>\n<li><code>0x8048196</code></li>\n</ol>\n<h2 id=\"section-11\">12.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movb 8(%ebp), %dl # R[dl]&lt;--M[R[ebp]+8], 即R[dl]=x</span><br><span class=\"line\">movl 12(%ebp), %eax # R[eax]&lt;--M[R[ebp]+12], 即R[eax]=p</span><br><span class=\"line\">testl %eax, %eax # 判断p是否为0</span><br><span class=\"line\">je .L1 # ZF=0时跳转到.L1</span><br><span class=\"line\">testb $0x80, $dl # 判断x是否小于0</span><br><span class=\"line\">je .L1 # ZF=0时跳转到.L1</span><br><span class=\"line\">addb %dl, (%eax) # M[R[eax]]&lt;--M[R[eax]]+R[dl]</span><br><span class=\"line\">.L1</span><br></pre></td></tr></table></figure>\n因为if中有两条判断指令</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\">  <span class=\"keyword\">goto</span> false_label;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">goto</span> false_label;</span><br><span class=\"line\">*p += x;</span><br><span class=\"line\">false_label:</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-12\">13.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> z = x;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (z &lt;= <span class=\"number\">-100</span>){</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y &gt; z)</span><br><span class=\"line\">      z = z + y;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      z = z - y;</span><br><span class=\"line\"></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    z = z &lt; <span class=\"number\">16</span> ? z * y : z &amp; y;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-13\">14.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movw 8(%ebp), %bx # R[bx]&lt;--M[R[ebp]+8], R[bx]=x</span><br><span class=\"line\">movw 12(%ebp), %si # R[si]&lt;--M[R[ebp]+12], R[si]=y</span><br><span class=\"line\">movw 16(%ebp), %cx # R[cx]&lt;--M[R[ebp]+16], R[cx]=k</span><br><span class=\"line\">.L1:</span><br><span class=\"line\">movw %si, %dx # R[dx]&lt;--R[si], R[dx]=y</span><br><span class=\"line\">movw %dx, %ax # R[ax]&lt;--R[dx], R[ax]=y</span><br><span class=\"line\">sarw $15, %dx # 将R[dx]的值算数右移15位</span><br><span class=\"line\">idiv %cx # R[dx]和R[ax]表示的值除以R[cx](k), 商储存在R[ax], 余数储存在R[dx]中</span><br><span class=\"line\">imulw %dx, %bx # R[bx]&lt;--R[dx]*R[bx]</span><br><span class=\"line\">decw %cx # R[cx]&lt;--R[cx]-1</span><br><span class=\"line\">testw %cx, %cx # 判断R[cx]是否大于0</span><br><span class=\"line\">jle .L2 # 若SF!=OF或ZF=0则跳转到.L2</span><br><span class=\"line\">cmpw %cx, %si # 比较R[si](y)和R[cx](k)的大小</span><br><span class=\"line\">jg .L1 # 若y&gt;k时, 跳转到.L1</span><br><span class=\"line\">.L2:</span><br><span class=\"line\">movswl %bx, %eax # 将R[bx]中的按符号扩展到R[eax]中</span><br></pre></td></tr></table></figure></li>\n<li>bx, si是被调用者保存寄存器, eax, cx, dx是调用者保存寄存器, bx,\nsi必须保存到栈中</li>\n<li>因为idiv的操作数是16位数, 则除数保存在dx-ax中,\nDX寄存器算数右移15位是为了进行符号扩展</li>\n</ol>\n<h2 id=\"section-14\">15.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">f1</span><span class=\"params\">(<span class=\"type\">unsigned</span> x)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>){</span><br><span class=\"line\">    y ^= x;</span><br><span class=\"line\">    x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span> &amp;&amp; y;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>判断x二进制表示中1的奇偶个数, 奇为1, 偶为0</p>\n<h2 id=\"section-15\">16.</h2>\n<p>函数sw中的switch共有6个分支, 处理.L7时取值为3,9, 处理.L2时为4,5,\n处理.L3时为6, 处理.L4时为7, 处理.L5时为8, 处理.L6时为10.\n标号为3,9,或者大于10时执行default语句. 4,5会执行同一标号,\n3,9和大于10会执行同一标号.</p>\n<h2 id=\"section-16\">17.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">unsigned</span> <span class=\"type\">short</span> b, <span class=\"type\">unsigned</span> <span class=\"type\">short</span> c, <span class=\"type\">short</span> *p)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  *p = a;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b*c;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-17\">18.</h2>\n<ol type=\"1\">\n<li><code>0xbc00001c</code>, <code>0xbc00001c</code>,\n<code>0xbc000030</code></li>\n<li><code>0xbc00001c</code>, <code>0xbbfffff4</code>,\n<code>0xbc000020</code></li>\n<li>y变量在<code>-8(%ebp)</code>, x变量在<code>-4(%ebp)</code></li>\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>地址</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0xbc000020</td>\n<td>funct返回地址</td>\n</tr>\n<tr class=\"even\">\n<td>0xbc00001c(ebp)</td>\n<td>0xbc000030</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000018</td>\n<td>x = 0x16</td>\n</tr>\n<tr class=\"even\">\n<td>0xbc000014</td>\n<td>y = 0x100</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000010</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbc00000c</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000008</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbc000004</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000000</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbbfffffc</td>\n<td>&amp;y</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbbfffff8</td>\n<td>&amp;x</td>\n</tr>\n<tr class=\"even\">\n<td>0xbbfffff4(esp)</td>\n<td>0x804c000</td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<h2 id=\"section-18\">19.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">refunc</span><span class=\"params\">(<span class=\"type\">unsigned</span> x)</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> nx = x / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> rv = refunc(nx);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nv + (<span class=\"number\">1</span> &amp; x);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>统计x二进制表示中1的个数.</p>\n<h2 id=\"section-19\">20.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>数组</th>\n<th>元素大小(B)</th>\n<th>数组大小(B)</th>\n<th>起始地址</th>\n<th>元素i的地址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>char A[10]</td>\n<td>10</td>\n<td>10</td>\n<td>&amp;A[0]</td>\n<td>&amp;A[0]+i</td>\n</tr>\n<tr class=\"even\">\n<td>int B[100]</td>\n<td>100</td>\n<td>400</td>\n<td>&amp; B[0]</td>\n<td>&amp;B[0]+4*i</td>\n</tr>\n<tr class=\"odd\">\n<td>short *C[5]</td>\n<td>5</td>\n<td>20</td>\n<td>&amp;C[0]</td>\n<td>&amp;C[0]+4*i</td>\n</tr>\n<tr class=\"even\">\n<td>short **D[6]</td>\n<td>6</td>\n<td>24</td>\n<td>&amp;D[0]</td>\n<td>&amp;D[0]+4*i</td>\n</tr>\n<tr class=\"odd\">\n<td>long double E[10]</td>\n<td>10</td>\n<td>120</td>\n<td>&amp;E[0]</td>\n<td>&amp;E[0]+12*i</td>\n</tr>\n<tr class=\"even\">\n<td>long double *F[10]</td>\n<td>10</td>\n<td>40</td>\n<td>&amp;F[0]</td>\n<td>&amp;F[0]+4*i</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-20\">21.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>表达式</th>\n<th>类型</th>\n<th>值</th>\n<th>汇编代码</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>S</td>\n<td>short *</td>\n<td>A<sub>S</sub></td>\n<td><code>leal (%edx), %eax</code></td>\n</tr>\n<tr class=\"even\">\n<td>S+i</td>\n<td>short *</td>\n<td>A<sub>S</sub>+2*i</td>\n<td><code>leal (%edx, %ecx, 2), %eax</code></td>\n</tr>\n<tr class=\"odd\">\n<td>S[i]</td>\n<td>short</td>\n<td>M[A<sub>S</sub>+2*i]</td>\n<td><code>movw (%edx, %ecx, 2), %ax</code></td>\n</tr>\n<tr class=\"even\">\n<td>&amp;S[10]</td>\n<td>short *</td>\n<td>A<sub>S</sub>+20</td>\n<td><code>leal 20(%edx), %eax</code></td>\n</tr>\n<tr class=\"odd\">\n<td>&amp;S[i+2]</td>\n<td>short *</td>\n<td>A<sub>S</sub>+2+i+4</td>\n<td><code>leal 4(%edx, %ecx, 2), %eax</code></td>\n</tr>\n<tr class=\"even\">\n<td>&amp;S[i]-S</td>\n<td>int</td>\n<td>i</td>\n<td><code>movl %ecx, %eax</code></td>\n</tr>\n<tr class=\"odd\">\n<td>S[4*i+4]</td>\n<td>short</td>\n<td>M[A<sub>S</sub>+8*i+8]</td>\n<td><code>movw 8(%edx, %ecx, 8), %eax</code></td>\n</tr>\n<tr class=\"even\">\n<td>*(S+i-2)</td>\n<td>short</td>\n<td>M[A<sub>S</sub>+2*i-4]</td>\n<td><code>movw -4(%edx, %ecx, 2), %eax</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-21\">22.</h2>\n<p>M = 7, N = 5</p>\n<h2 id=\"section-22\">23.</h2>\n<p>L = 18, M = 7, N = 9</p>\n<h2 id=\"section-23\">24.</h2>\n<ol type=\"1\">\n<li>M = 19, M储存在edi中, j储存在ecx中</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(; j &lt; M; i++) {</span><br><span class=\"line\">    t = a[i][j];</span><br><span class=\"line\">    a[i][j] = a[j][i]</span><br><span class=\"line\">    a[j][i] = t;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-24\">25.</h2>\n<ol type=\"1\">\n<li>16, 成员p的偏移是0, s.x的偏移是4, s.y的偏移是8, next的偏移是12</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">np_init</span><span class=\"params\">(<span class=\"keyword\">struct</span> node *np)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    np-&gt;s.x = np-&gt;s.y;</span><br><span class=\"line\">    np-&gt;p = &amp;(np-&gt;s.x);</span><br><span class=\"line\">    np-&gt;next = np;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-25\">26.</h2>\n<table>\n<colgroup>\n<col style=\"width: 33%\">\n<col style=\"width: 33%\">\n<col style=\"width: 33%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>表达式EXPR</th>\n<th>TYPE类型</th>\n<th>汇编指令序列</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>uptr-&gt;s1.x</td>\n<td>int</td>\n<td><code>movl (%eax), %eax</code><br><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>uptr-&gt;s1.y</td>\n<td>short</td>\n<td><code>movw 4(%eax), %ax</code><br><code>movw %ax, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>&amp;uptr-&gt;s1.z</td>\n<td>short *</td>\n<td><code>leal 6(%eax), %eax</code><br><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>uptr-&gt;s2.a</td>\n<td>short *</td>\n<td><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>uptr-&gt;s2.a[uptr-&gt;s2.b]</td>\n<td>short</td>\n<td><code>movl 4(%eax), %ecx</code><br><code>movw (%eax, %ecx, 2), %cx</code><br><code>movw %cx, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>*uptr-&gt;s2.p</td>\n<td>char</td>\n<td><code>movb 8(%eax), %al</code><br><code>movb %al, (%edx)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-26\">27.</h2>\n<ol type=\"1\">\n<li>s的偏移量是0, c的偏移量是2, i的偏移量是4, d的偏移量是8,\n结构体总大小是12, 结构起始位置的对其要求是4的倍数.</li>\n<li>i的偏移量是0, s的偏移量是4, c的偏移量是6, d的偏移量是7,\n结构体总大小是8, 结构起始位置的对齐要求是4的倍数.</li>\n<li>c的偏移量是0, s的偏移量是2, i的偏移量是4, d的偏移量是8,\n结构体总大小是12, 结构起始位置的对齐要求是4的倍数.</li>\n<li>s的偏移量是0, c的偏移量是6, 结构体总大小是8,\n结构起始位置的对齐要求是2的倍数.</li>\n<li>c的偏移量是0, s的偏移量是4, i的偏移量是8, d的偏移量是12,\ne的偏移量是16, 结构体总大小是24, 结构起始位置的对齐要求是4的倍数.</li>\n<li>c的偏移量是0, s的偏移量是36, d的偏移量是40, 结构体总大小是44,\n结构起始位置的对齐要求是4的倍数.</li>\n</ol>\n<h2 id=\"section-27\">28.</h2>\n<p>c的偏移量是0, d的偏移量是8, i的偏移量是16, s的偏移量是20,\np的偏移量是24, l的偏移量是28, g的偏移量是32, v的偏移量是40.\n结构体总大小为48. 如下调整可以使得占用空间最小: <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> g;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\">    <span class=\"type\">long</span> l;</span><br><span class=\"line\">    <span class=\"type\">void</span> *v;</span><br><span class=\"line\">    <span class=\"type\">short</span> s;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">} test;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"section-28\">29.</h2>\n<ol type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>地址</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0xbffc07f0</td>\n<td>0x80485c8(返回地址)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07ec(EBP)</td>\n<td>0xbffc0800(EBP旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e8</td>\n<td>0x8(EDI旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07e4</td>\n<td>0x10(ESI旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e0</td>\n<td>0x5(EBX旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07dc</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d8</td>\n<td>(buf)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07d4</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d0</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07cc</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07c8</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07c4(ESP)</td>\n<td>gets参数入口</td>\n</tr>\n</tbody>\n</table></li>\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>地址</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0xbffc07f0</td>\n<td>0x000D3938(返回地址)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07ec(EBP)</td>\n<td>0x37363534(EBP旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e8</td>\n<td>0x33323130(EDI旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07e4</td>\n<td>0x46454443(ESI旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e0</td>\n<td>0x42413938(EBX旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07dc</td>\n<td>0x37363534</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d8</td>\n<td>0x33323130(buf)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07d4</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d0</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07cc</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07c8</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07c4(ESP)</td>\n<td>gets参数入口</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>正确返回地址是: <code>0x80485c8</code>\n得到了<code>0x000d3938</code></p></li>\n<li><p>EBP, EDI, ESI, EBX被破坏</p></li>\n<li><p>malloc申请的长度应该为<code>strlen(buf)+1</code>,\n最后应该赋值<code>result[strlen(buf)]=\\0</code>,\n应该检查result是否为<code>NULL</code></p></li>\n</ol>\n<h2 id=\"section-29\">30.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc(<span class=\"type\">int</span> c, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br><span class=\"line\">abc(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> c, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br><span class=\"line\">abc(<span class=\"type\">int</span> c, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br><span class=\"line\">abc(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> c, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-30\">31.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl 8(%ebp), %edx # R[edx]&lt;--M[R[ebp]+8], 即R[edx]=x</span><br><span class=\"line\">movl 12(%ebp), %ecx # R[ecx]&lt;--M[R[ebp]+12], 即R[ecx]=k</span><br><span class=\"line\">movl $255, %esi # R[esi] = 255, R[esi] = val</span><br><span class=\"line\">movl $-2147483648, %edi # R[edi] = -2147483648, R[edi] = i</span><br><span class=\"line\">.L3:</span><br><span class=\"line\">movl %edi, %eax # R[eax]&lt;--R[edi], R[eax] = i</span><br><span class=\"line\">andl %edx, %eax # R[eax]&lt;--R[edx]&amp;R[eax], R[eax]=x&amp;i</span><br><span class=\"line\">xorl %eax, %esi # R[esi]&lt;--R[eax]^R[esi]</span><br><span class=\"line\">movl %ecx, %ebx # R[ebx]&lt;--R[ecx], R[ebx]=k</span><br><span class=\"line\">shrl %bl, %edi # R[edi]&lt;--R[edi]&gt;&gt;R[bl]</span><br><span class=\"line\">test1 %edi, %edi # 判断R[edi]是否为0</span><br><span class=\"line\">jne .L3</span><br><span class=\"line\">movl %esi, %eax # R[eax]&lt;--R[esi]</span><br></pre></td></tr></table></figure></li>\n<li>x存放在EDX, k存放在ECX, val存放在ESI, i存放在EDI.</li>\n<li>val=255, i=-2147483648</li>\n<li>终止的条件是<code>i = 0</code>,\ni的修改<code>i = ((unsigned) i) &gt;&gt; (char) k</code></li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lproc</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> k)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">255</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">-2147483648</span>; i != <span class=\"number\">0</span>; i = ((<span class=\"type\">unsigned</span>) i) &gt;&gt; (<span class=\"type\">char</span>) k) {</span><br><span class=\"line\">        val ^= (x &amp; i);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-31\">32.</h2>\n<p>LEN = 7 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    <span class=\"type\">int</span> idx;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">6</span>];</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"section-32\">33.</h2>\n<ol type=\"1\">\n<li>n1.ptr的偏移量是0, n1.data1的偏移量是4, n2.data2的偏移量是0,\nn2.next的偏移量是4</li>\n<li>node类型总大小占8字节</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">chain_proc</span><span class=\"params\">(<span class=\"keyword\">union</span> node *uptr)</span> {</span><br><span class=\"line\">    uptr-&gt;data1 = *(uptr-&gt;n2.next-&gt;n1.ptr) - uptr-&gt;data2;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-33\">34.</h2></li>\n<li>tptr通过RDI传递</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">trace</span><span class=\"params\">(tree_ptr tptr)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tptr != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        val = tptr-&gt;val;</span><br><span class=\"line\">        tptr = tptr-&gt;left;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n<li>取出二叉树最左的叶子的值.</li>\n</ol>\n<h2 id=\"section-34\">35.</h2>\n<ol type=\"1\">\n<li>第6行将a的值解释成double型打印,\n第7行将a的值按指转化为double型再打印</li>\n<li>略</li>\n<li>每次的结果不一致</li>\n<li>略</li>\n<li>略</li>\n<li>第6行对应于<code>movsd  -0x18(%rbp),%xmm0</code>,\n第7行对应于<code>cvtsi2sd %eax,%xmm0</code></li>\n<li>略</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"第三章\">第三章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>机器语言程序</strong>: 由若干条机器指令组成的序列<br>\n<strong>机器指令</strong>: 介于微指令和伪指令之间的指令,\n处于硬件和软件的交界面<br>\n<strong>汇编语言</strong>: 与机器语言一一对应的符号化表示语言<br>\n<strong>汇编指令</strong>:\n用若干个助记符表表示的与机器指令一一对应的指令<br>\n<strong>汇编语言程序</strong>: 用汇编语言编写的程序<br>\n<strong>汇编助记符</strong>:\n用来表示指令操作码的容易记忆的英文单词或缩写,\n用来表示操作数或地址码的标号、变量名称、寄存器名称、常数等<br>\n<strong>汇编程序</strong>:\n用来将汇编语言源程序中的汇编指令翻译成机器指令的程序<br>\n<strong>反汇编程序</strong>: 机器指令反过来翻译成汇编指令的程序<br>","more":"<br>\n<strong>机器级代码</strong>: 由机器指令和汇编指令组成的代码<br>\n<strong>通用寄存器</strong>:\n没有专门用途的可以存放各类定点操作数的寄存器<br>\n<strong>变址寄存器</strong>: ESI<br>\n<strong>基址寄存器</strong>: EBP<br>\n<strong>栈指针寄存器</strong>: ESP<br>\n<strong>指令指针寄存器</strong>: EIP<br>\n<strong>标志寄存器</strong>: EFLAGS<br>\n<strong>条件标志(条件码)</strong>: 用来存放运行的状态信息,\n由硬件自动设定<br>\n<strong>寻址方式</strong>:\n根据指令给定信息得到操作数或操作数地址的方式<br>\n<strong>立即寻址</strong>: 指令中直接给出操作数<br>\n<strong>寄存器寻址</strong>: 指令中给出操作数所存放的寄存器的编号<br>\n<strong>相对寻址</strong>: 计算的是转移目标指令的线性地址<br>\n<strong>存储器操作数</strong>: 操作数在存储器单元中<br>\n<strong>实地址模式</strong>: 最大寻址空间为1MB, 存储管理采用分段方式,\n每段的最大地址空间为64KB<br>\n<strong>保护模式</strong>:\n为了实现在多任务方式下对不同任务使用的虚拟存储空间进行完全隔离,\n以保护不同任务之间不会相互破坏各自的代码和数据<br>\n有效地址: 给出了操作数所在段的段内偏移地址<br>\n<strong>比例变址</strong>: 变址值等于变址寄存器内容乘以比例系数<br>\n<strong>非比例变址</strong>: 变址值就是变址寄存器的内容<br>\n<strong>比例系数(比例因子)</strong>: 操作数的字节个数<br>\n<strong>MMX指令</strong>:\n每个MMX寄存器实际上是对应80位浮点数据寄存器中64位尾数所占的位<br>\n<strong>SSE指令集</strong>: 采用SIMD技术的指令集<br>\n<strong>SIMD</strong>: 单指令多数据,\n实现单条指令同时并行处理多个数据元素的功能<br>\n<strong>多媒体扩展通用寄存器</strong>:\n8个128位的SSE指令专用寄存器XMM0~XMM7<br>\n<strong>栈</strong>: 栈是一种采用\"先进后出\"方式访问的一块存储区<br>\n<strong>调用者保存寄存器</strong>: 在过程P调用过程Q时,\nQ可以直接使用这三个寄存器, 不用将它们的值保存到栈中<br>\n<strong>被调用者保存寄存器</strong>:\nQ必须将它们的值保存到栈中再使用它们, 并在返回P之前先恢复它们的值<br>\n<strong>帧指针寄存器</strong>: EBP<br>\n<strong>当前栈帧</strong>: 帧指针EBP和栈指针ESP指向区间之间的区域<br>\n<strong>按值传递参数</strong>: 形参是基本类型变量名<br>\n<strong>按地址传递参数</strong>:\n形参是指针类型变量或构造类型变量名<br>\n<strong>嵌套调用</strong>: 某个函数调用另一个函数<br>\n<strong>递归调用</strong>: 某个函数调用自己本身<br>\n<strong>缓冲区溢出</strong>: 超越数组存储区范围的访问<br>\n<strong>缓冲区溢出攻击</strong>:\n利用缓冲区溢出漏洞所进行的攻击行为<br>\n<strong>栈随机化</strong>:\n程序加载的栈空间的起始位置随机变化的技术<br>\n<strong>金丝雀值</strong>: 在函数的准备阶段,\n在其栈帧中的缓冲区底部与保存的寄存器状态之间加入一个随机生存的特定值</p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>机器指令通常由主操作码(OP)、ModR/M、SIM、位移和立即数.\n主操作码表示进行的操作, Mod和R/M表示另一操作数的寻址方式.\nSIB确定比例因子、变址寄存器和基值寄存器. 位移字段给出位移量,\n立即数字段用于给出指令中的一个源操作数.</li>\n<li>预处理---编译---汇编---链接</li>\n<li>仅NOT指令不影响条件标志符, 其他指令执行后, OF=CF=0,\n而ZF和SF则根据运算结果来设置: 若结果为全0，则ZF=1; 若最高位为1, 则SF=1.\n移位可能改变CF、OF、SF和ZF.</li>\n<li>条件转移指令以条件标志位的逻辑运算结果作为转移依据. 例如\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmpl %eax %adx</span><br><span class=\"line\">jge label</span><br></pre></td></tr></table></figure></li>\n<li>调用指令是一种无条件转移指令, 它们都能改变程序执行顺序,\nCALL指令在跳转到被调用过程执行之前先要把返回地址压栈.</li>\n<li>按值传递会把参数的值压入栈中,\n而按地址传递则会将值的地址压入栈中.</li>\n<li>递归调用的执行一直要等到满足跳出过程的条件才结束,\n在这之前递归调用的非静态局部变量会一直保存在栈中,\n直到过程执行结束才会释放. 同时, 每增加一次过程调用,\n就要增加许多条包含在准备阶段和结束阶段的额外指令,\n这些指令的执行实际开销对程序的性能影响很大.</li>\n<li>因为由于字宽的存储器限制,\n为了避免由于多次访存带来指令执行效率的降低, 编译器会进行对齐.</li>\n<li>对数组的引用没有边界约束.</li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<ol type=\"1\">\n<li>movw, 基址加比例变址加位移, 寄存器寻址</li>\n<li>movb, 寄存器寻址, 基址加位移</li>\n<li>addl, 比例变址加位移, 寄存器寻址</li>\n<li>orb, 基址寻址, 寄存器寻址</li>\n<li>pushl, 立即数寻址</li>\n<li>movl, 立即数寻址, 寄存器寻址</li>\n<li>testw, 寄存器寻址, 寄存器寻址</li>\n<li>leal, 基址加变址加位移, 寄存器寻址</li>\n</ol>\n<h2 id=\"section-3\">4.</h2>\n<ol type=\"1\">\n<li>立即数寻址前要加%, <code>movl $0xFF, (%eax)</code></li>\n<li>操作数和寄存器的长度不符, <code>movw %ax, 12(%ebp)</code></li>\n<li>操作数2不能是立即数, <code>addl $0xF0, %ecx</code></li>\n<li>立即数长度超出操作数长度, <code>orl $0xFFFF0, ($ebx)</code></li>\n<li>基址寄存器需要时通用寄存器, <code>addb $0xF8, ($edi)</code></li>\n<li>两个操作数长度不匹配, <code>movl %ebx, %eax</code></li>\n<li>不存在esx寄存器, <code>addl %esi, %eax</code></li>\n<li>缺失变址寄存器, <code>movw 8(%ebp), %ax</code></li>\n</ol>\n<h2 id=\"section-4\">5.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>src_type</th>\n<th>dst_type</th>\n<th>机器级表示</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>char</td>\n<td>int</td>\n<td><code>movsbl %al, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>int</td>\n<td>char</td>\n<td><code>movb %al, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>int</td>\n<td>unsigned</td>\n<td><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>short</td>\n<td>int</td>\n<td><code>movswl %ax, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>unsigned char</td>\n<td>unsigned</td>\n<td><code>movzbl %al, (%adx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>char</td>\n<td>unsigned</td>\n<td><code>movsbl %al, (%adx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>int</td>\n<td>int</td>\n<td><code>movl %eax, (%adx)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-5\">6.</h2>\n<ol type=\"1\">\n<li>zptr对应的实参储存在<code>16(%ebp)</code>,\nyptr对应的实参储存在<code>12(%ebp)</code>,\nxptr对应实参储存在<code>8(%ebp)</code></li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> *xptr, <span class=\"type\">int</span> *yptr, <span class=\"type\">int</span> *zptr)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> temp1 = *xptr, temp2 = *yptr, temp3 = *zptr;</span><br><span class=\"line\">  *yptr = temp1;</span><br><span class=\"line\">  *zptr = temp2;</span><br><span class=\"line\">  *xptr = temp3;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<ol type=\"1\">\n<li><code>x</code></li>\n<li><code>x + y + 4</code></li>\n<li><code>x + 8 * y</code></li>\n<li><code>x + 2 * y + 12</code></li>\n<li><code>4 * x</code></li>\n<li><code>x + y</code></li>\n</ol>\n<h2 id=\"section-7\">8.</h2>\n<ol type=\"1\">\n<li><code>%edx</code>, <code>0x00000070</code>,\n<code>OF = 0, SF = 0, ZF = 0, CF = 0</code></li>\n<li><code>%ecx</code>, <code>0x80000008</code>,\n<code>OF = 1, SF = 1, ZF = 0, CF = 0</code></li>\n<li><code>%bx</code>, <code>0xff00</code>,\n<code>OF = 0, SF = 1, ZF = 0, CF = 0</code></li>\n<li>None, <code>OF = 0, SF = 1, ZF = 0, CF = 0</code></li>\n<li><code>%ecx</code>, <code>0x11e25500</code>,\n<code>OF = 1, SF = 0, ZF = 0, CF = 1</code></li>\n<li><code>%eax</code>, <code>0x00930000</code>,\n<code>OF = 1, SF = 0, ZF = 0, CF = 1</code></li>\n<li><code>%cx</code>, <code>0xf</code>,\n<code>OF = 0, SF = 0, ZF = 0</code></li>\n</ol>\n<h2 id=\"section-8\">9.</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl 12(%ebp), %ecx # R[ecx]&lt;--M[R[ebp]+12], 即R[ecx]=y</span><br><span class=\"line\">sall $8, %ecx       # R[ecx]&lt;--R[ecx]&lt;&lt;8, 即R[ecx]=y&lt;&lt;8</span><br><span class=\"line\">movl 8(%ebp), %eax  # R[eax]&lt;--M[R[ebx]+8], 即R[eax]=x</span><br><span class=\"line\">movl 20(%ebp), %edx # R[edx]&lt;--M[R[ebx]+20], 即R[edx]=k</span><br><span class=\"line\">imull %edx, %eax    # R[eax]&lt;--R[eax]*R[edx], 即R[eax]=k*x</span><br><span class=\"line\">movl 16(%ebp), %edx # R[edx]&lt;--M[R[ebp]+16], 即R[edx]=z</span><br><span class=\"line\">andl $66520, %edx   # R[edx]&lt;--R[edx]&amp;0xfff0, 即R[edx]=z&amp;0xfff0</span><br><span class=\"line\">addl %ecx, %edx     # R[edx]&lt;--R[edx]+R[ecx], 即R[edx]=(y&lt;&lt;8)+(z&amp;0xfff0)</span><br><span class=\"line\">subl %adx, %eax     # R[eax]&lt;--R[eax]-R[edx], 即R[eax]=(k*x)-((y&lt;&lt;8)+(z&amp;0xfff0))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">operate</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z, <span class=\"type\">int</span> k)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> v = (k*x)-((y&lt;&lt;<span class=\"number\">8</span>)+(z&amp;<span class=\"number\">0xfff0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-9\">10.</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl 12(%ebp), %eax # R[eax]&lt;--M[R[ebp]+12], 即R[eax]=x</span><br><span class=\"line\">movl 29(%ebp), %ecx # R[ecx]&lt;--M[R[ebp]+20], 即将y的高32位赋值给R[ecx]</span><br><span class=\"line\">imull %eax, %ecx    # R[ecx]&lt;--R[ecx]*R[eax], 即将y的高32位乘以x</span><br><span class=\"line\">mull 16(%ebp)       # 将y的低32位乘以x, 将低32位储存在R[eax], 将高32位储存在R[edx]</span><br><span class=\"line\">leal (%ecx, %edx), %edx # R[edx]&lt;--R[ecx]+R[edx], 即将结果的高32位相加</span><br><span class=\"line\">movl 8(%ebp), %ecx  # R[ecx]&lt;--M[R[ebp]+8], 即将d传入R[ecx]</span><br><span class=\"line\">movl %eax, (%ecx)   # M[R[ecx]]&lt;--R[eax], 即将结果的低32位传入d指向的位置的底32位</span><br><span class=\"line\">movl %edx, 4(%ecx)  # M[R[ecx]+4]&lt;--R[edx], 即将结果的高32位传入d指向的位置的高32位</span><br></pre></td></tr></table></figure>\n<p>num_type是<code>unsigned long long int</code></p>\n<h2 id=\"section-10\">11.</h2>\n<ol type=\"1\">\n<li><code>0x8048394</code>, <code>0x804838e+5+1e</code></li>\n<li><code>0x8048386</code>,\n指令中的<code>00 ao 04 08</code>直接指定了地址,\n<code>01</code>指定了立即数</li>\n<li><code>0x80492cc</code></li>\n<li><code>0x8048196</code></li>\n</ol>\n<h2 id=\"section-11\">12.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movb 8(%ebp), %dl # R[dl]&lt;--M[R[ebp]+8], 即R[dl]=x</span><br><span class=\"line\">movl 12(%ebp), %eax # R[eax]&lt;--M[R[ebp]+12], 即R[eax]=p</span><br><span class=\"line\">testl %eax, %eax # 判断p是否为0</span><br><span class=\"line\">je .L1 # ZF=0时跳转到.L1</span><br><span class=\"line\">testb $0x80, $dl # 判断x是否小于0</span><br><span class=\"line\">je .L1 # ZF=0时跳转到.L1</span><br><span class=\"line\">addb %dl, (%eax) # M[R[eax]]&lt;--M[R[eax]]+R[dl]</span><br><span class=\"line\">.L1</span><br></pre></td></tr></table></figure>\n因为if中有两条判断指令</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\">  <span class=\"keyword\">goto</span> false_label;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">goto</span> false_label;</span><br><span class=\"line\">*p += x;</span><br><span class=\"line\">false_label:</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-12\">13.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> z = x;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (z &lt;= <span class=\"number\">-100</span>){</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y &gt; z)</span><br><span class=\"line\">      z = z + y;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      z = z - y;</span><br><span class=\"line\"></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    z = z &lt; <span class=\"number\">16</span> ? z * y : z &amp; y;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-13\">14.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movw 8(%ebp), %bx # R[bx]&lt;--M[R[ebp]+8], R[bx]=x</span><br><span class=\"line\">movw 12(%ebp), %si # R[si]&lt;--M[R[ebp]+12], R[si]=y</span><br><span class=\"line\">movw 16(%ebp), %cx # R[cx]&lt;--M[R[ebp]+16], R[cx]=k</span><br><span class=\"line\">.L1:</span><br><span class=\"line\">movw %si, %dx # R[dx]&lt;--R[si], R[dx]=y</span><br><span class=\"line\">movw %dx, %ax # R[ax]&lt;--R[dx], R[ax]=y</span><br><span class=\"line\">sarw $15, %dx # 将R[dx]的值算数右移15位</span><br><span class=\"line\">idiv %cx # R[dx]和R[ax]表示的值除以R[cx](k), 商储存在R[ax], 余数储存在R[dx]中</span><br><span class=\"line\">imulw %dx, %bx # R[bx]&lt;--R[dx]*R[bx]</span><br><span class=\"line\">decw %cx # R[cx]&lt;--R[cx]-1</span><br><span class=\"line\">testw %cx, %cx # 判断R[cx]是否大于0</span><br><span class=\"line\">jle .L2 # 若SF!=OF或ZF=0则跳转到.L2</span><br><span class=\"line\">cmpw %cx, %si # 比较R[si](y)和R[cx](k)的大小</span><br><span class=\"line\">jg .L1 # 若y&gt;k时, 跳转到.L1</span><br><span class=\"line\">.L2:</span><br><span class=\"line\">movswl %bx, %eax # 将R[bx]中的按符号扩展到R[eax]中</span><br></pre></td></tr></table></figure></li>\n<li>bx, si是被调用者保存寄存器, eax, cx, dx是调用者保存寄存器, bx,\nsi必须保存到栈中</li>\n<li>因为idiv的操作数是16位数, 则除数保存在dx-ax中,\nDX寄存器算数右移15位是为了进行符号扩展</li>\n</ol>\n<h2 id=\"section-14\">15.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">f1</span><span class=\"params\">(<span class=\"type\">unsigned</span> x)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>){</span><br><span class=\"line\">    y ^= x;</span><br><span class=\"line\">    x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span> &amp;&amp; y;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>判断x二进制表示中1的奇偶个数, 奇为1, 偶为0</p>\n<h2 id=\"section-15\">16.</h2>\n<p>函数sw中的switch共有6个分支, 处理.L7时取值为3,9, 处理.L2时为4,5,\n处理.L3时为6, 处理.L4时为7, 处理.L5时为8, 处理.L6时为10.\n标号为3,9,或者大于10时执行default语句. 4,5会执行同一标号,\n3,9和大于10会执行同一标号.</p>\n<h2 id=\"section-16\">17.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">unsigned</span> <span class=\"type\">short</span> b, <span class=\"type\">unsigned</span> <span class=\"type\">short</span> c, <span class=\"type\">short</span> *p)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  *p = a;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b*c;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-17\">18.</h2>\n<ol type=\"1\">\n<li><code>0xbc00001c</code>, <code>0xbc00001c</code>,\n<code>0xbc000030</code></li>\n<li><code>0xbc00001c</code>, <code>0xbbfffff4</code>,\n<code>0xbc000020</code></li>\n<li>y变量在<code>-8(%ebp)</code>, x变量在<code>-4(%ebp)</code></li>\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>地址</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0xbc000020</td>\n<td>funct返回地址</td>\n</tr>\n<tr class=\"even\">\n<td>0xbc00001c(ebp)</td>\n<td>0xbc000030</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000018</td>\n<td>x = 0x16</td>\n</tr>\n<tr class=\"even\">\n<td>0xbc000014</td>\n<td>y = 0x100</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000010</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbc00000c</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000008</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbc000004</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbc000000</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbbfffffc</td>\n<td>&amp;y</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbbfffff8</td>\n<td>&amp;x</td>\n</tr>\n<tr class=\"even\">\n<td>0xbbfffff4(esp)</td>\n<td>0x804c000</td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<h2 id=\"section-18\">19.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">refunc</span><span class=\"params\">(<span class=\"type\">unsigned</span> x)</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> nx = x / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> rv = refunc(nx);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nv + (<span class=\"number\">1</span> &amp; x);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>统计x二进制表示中1的个数.</p>\n<h2 id=\"section-19\">20.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>数组</th>\n<th>元素大小(B)</th>\n<th>数组大小(B)</th>\n<th>起始地址</th>\n<th>元素i的地址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>char A[10]</td>\n<td>10</td>\n<td>10</td>\n<td>&amp;A[0]</td>\n<td>&amp;A[0]+i</td>\n</tr>\n<tr class=\"even\">\n<td>int B[100]</td>\n<td>100</td>\n<td>400</td>\n<td>&amp; B[0]</td>\n<td>&amp;B[0]+4*i</td>\n</tr>\n<tr class=\"odd\">\n<td>short *C[5]</td>\n<td>5</td>\n<td>20</td>\n<td>&amp;C[0]</td>\n<td>&amp;C[0]+4*i</td>\n</tr>\n<tr class=\"even\">\n<td>short **D[6]</td>\n<td>6</td>\n<td>24</td>\n<td>&amp;D[0]</td>\n<td>&amp;D[0]+4*i</td>\n</tr>\n<tr class=\"odd\">\n<td>long double E[10]</td>\n<td>10</td>\n<td>120</td>\n<td>&amp;E[0]</td>\n<td>&amp;E[0]+12*i</td>\n</tr>\n<tr class=\"even\">\n<td>long double *F[10]</td>\n<td>10</td>\n<td>40</td>\n<td>&amp;F[0]</td>\n<td>&amp;F[0]+4*i</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-20\">21.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>表达式</th>\n<th>类型</th>\n<th>值</th>\n<th>汇编代码</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>S</td>\n<td>short *</td>\n<td>A<sub>S</sub></td>\n<td><code>leal (%edx), %eax</code></td>\n</tr>\n<tr class=\"even\">\n<td>S+i</td>\n<td>short *</td>\n<td>A<sub>S</sub>+2*i</td>\n<td><code>leal (%edx, %ecx, 2), %eax</code></td>\n</tr>\n<tr class=\"odd\">\n<td>S[i]</td>\n<td>short</td>\n<td>M[A<sub>S</sub>+2*i]</td>\n<td><code>movw (%edx, %ecx, 2), %ax</code></td>\n</tr>\n<tr class=\"even\">\n<td>&amp;S[10]</td>\n<td>short *</td>\n<td>A<sub>S</sub>+20</td>\n<td><code>leal 20(%edx), %eax</code></td>\n</tr>\n<tr class=\"odd\">\n<td>&amp;S[i+2]</td>\n<td>short *</td>\n<td>A<sub>S</sub>+2+i+4</td>\n<td><code>leal 4(%edx, %ecx, 2), %eax</code></td>\n</tr>\n<tr class=\"even\">\n<td>&amp;S[i]-S</td>\n<td>int</td>\n<td>i</td>\n<td><code>movl %ecx, %eax</code></td>\n</tr>\n<tr class=\"odd\">\n<td>S[4*i+4]</td>\n<td>short</td>\n<td>M[A<sub>S</sub>+8*i+8]</td>\n<td><code>movw 8(%edx, %ecx, 8), %eax</code></td>\n</tr>\n<tr class=\"even\">\n<td>*(S+i-2)</td>\n<td>short</td>\n<td>M[A<sub>S</sub>+2*i-4]</td>\n<td><code>movw -4(%edx, %ecx, 2), %eax</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-21\">22.</h2>\n<p>M = 7, N = 5</p>\n<h2 id=\"section-22\">23.</h2>\n<p>L = 18, M = 7, N = 9</p>\n<h2 id=\"section-23\">24.</h2>\n<ol type=\"1\">\n<li>M = 19, M储存在edi中, j储存在ecx中</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(; j &lt; M; i++) {</span><br><span class=\"line\">    t = a[i][j];</span><br><span class=\"line\">    a[i][j] = a[j][i]</span><br><span class=\"line\">    a[j][i] = t;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-24\">25.</h2>\n<ol type=\"1\">\n<li>16, 成员p的偏移是0, s.x的偏移是4, s.y的偏移是8, next的偏移是12</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">np_init</span><span class=\"params\">(<span class=\"keyword\">struct</span> node *np)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    np-&gt;s.x = np-&gt;s.y;</span><br><span class=\"line\">    np-&gt;p = &amp;(np-&gt;s.x);</span><br><span class=\"line\">    np-&gt;next = np;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-25\">26.</h2>\n<table>\n<colgroup>\n<col style=\"width: 33%\">\n<col style=\"width: 33%\">\n<col style=\"width: 33%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>表达式EXPR</th>\n<th>TYPE类型</th>\n<th>汇编指令序列</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>uptr-&gt;s1.x</td>\n<td>int</td>\n<td><code>movl (%eax), %eax</code><br><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>uptr-&gt;s1.y</td>\n<td>short</td>\n<td><code>movw 4(%eax), %ax</code><br><code>movw %ax, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>&amp;uptr-&gt;s1.z</td>\n<td>short *</td>\n<td><code>leal 6(%eax), %eax</code><br><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>uptr-&gt;s2.a</td>\n<td>short *</td>\n<td><code>movl %eax, (%edx)</code></td>\n</tr>\n<tr class=\"odd\">\n<td>uptr-&gt;s2.a[uptr-&gt;s2.b]</td>\n<td>short</td>\n<td><code>movl 4(%eax), %ecx</code><br><code>movw (%eax, %ecx, 2), %cx</code><br><code>movw %cx, (%edx)</code></td>\n</tr>\n<tr class=\"even\">\n<td>*uptr-&gt;s2.p</td>\n<td>char</td>\n<td><code>movb 8(%eax), %al</code><br><code>movb %al, (%edx)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-26\">27.</h2>\n<ol type=\"1\">\n<li>s的偏移量是0, c的偏移量是2, i的偏移量是4, d的偏移量是8,\n结构体总大小是12, 结构起始位置的对其要求是4的倍数.</li>\n<li>i的偏移量是0, s的偏移量是4, c的偏移量是6, d的偏移量是7,\n结构体总大小是8, 结构起始位置的对齐要求是4的倍数.</li>\n<li>c的偏移量是0, s的偏移量是2, i的偏移量是4, d的偏移量是8,\n结构体总大小是12, 结构起始位置的对齐要求是4的倍数.</li>\n<li>s的偏移量是0, c的偏移量是6, 结构体总大小是8,\n结构起始位置的对齐要求是2的倍数.</li>\n<li>c的偏移量是0, s的偏移量是4, i的偏移量是8, d的偏移量是12,\ne的偏移量是16, 结构体总大小是24, 结构起始位置的对齐要求是4的倍数.</li>\n<li>c的偏移量是0, s的偏移量是36, d的偏移量是40, 结构体总大小是44,\n结构起始位置的对齐要求是4的倍数.</li>\n</ol>\n<h2 id=\"section-27\">28.</h2>\n<p>c的偏移量是0, d的偏移量是8, i的偏移量是16, s的偏移量是20,\np的偏移量是24, l的偏移量是28, g的偏移量是32, v的偏移量是40.\n结构体总大小为48. 如下调整可以使得占用空间最小: <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> g;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\">    <span class=\"type\">long</span> l;</span><br><span class=\"line\">    <span class=\"type\">void</span> *v;</span><br><span class=\"line\">    <span class=\"type\">short</span> s;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">} test;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"section-28\">29.</h2>\n<ol type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>地址</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0xbffc07f0</td>\n<td>0x80485c8(返回地址)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07ec(EBP)</td>\n<td>0xbffc0800(EBP旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e8</td>\n<td>0x8(EDI旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07e4</td>\n<td>0x10(ESI旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e0</td>\n<td>0x5(EBX旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07dc</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d8</td>\n<td>(buf)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07d4</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d0</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07cc</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07c8</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07c4(ESP)</td>\n<td>gets参数入口</td>\n</tr>\n</tbody>\n</table></li>\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>地址</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0xbffc07f0</td>\n<td>0x000D3938(返回地址)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07ec(EBP)</td>\n<td>0x37363534(EBP旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e8</td>\n<td>0x33323130(EDI旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07e4</td>\n<td>0x46454443(ESI旧值)</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07e0</td>\n<td>0x42413938(EBX旧值)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07dc</td>\n<td>0x37363534</td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d8</td>\n<td>0x33323130(buf)</td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07d4</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07d0</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07cc</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>0xbffc07c8</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>0xbffc07c4(ESP)</td>\n<td>gets参数入口</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>正确返回地址是: <code>0x80485c8</code>\n得到了<code>0x000d3938</code></p></li>\n<li><p>EBP, EDI, ESI, EBX被破坏</p></li>\n<li><p>malloc申请的长度应该为<code>strlen(buf)+1</code>,\n最后应该赋值<code>result[strlen(buf)]=\\0</code>,\n应该检查result是否为<code>NULL</code></p></li>\n</ol>\n<h2 id=\"section-29\">30.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc(<span class=\"type\">int</span> c, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br><span class=\"line\">abc(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> c, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br><span class=\"line\">abc(<span class=\"type\">int</span> c, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br><span class=\"line\">abc(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> c, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b);</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-30\">31.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl 8(%ebp), %edx # R[edx]&lt;--M[R[ebp]+8], 即R[edx]=x</span><br><span class=\"line\">movl 12(%ebp), %ecx # R[ecx]&lt;--M[R[ebp]+12], 即R[ecx]=k</span><br><span class=\"line\">movl $255, %esi # R[esi] = 255, R[esi] = val</span><br><span class=\"line\">movl $-2147483648, %edi # R[edi] = -2147483648, R[edi] = i</span><br><span class=\"line\">.L3:</span><br><span class=\"line\">movl %edi, %eax # R[eax]&lt;--R[edi], R[eax] = i</span><br><span class=\"line\">andl %edx, %eax # R[eax]&lt;--R[edx]&amp;R[eax], R[eax]=x&amp;i</span><br><span class=\"line\">xorl %eax, %esi # R[esi]&lt;--R[eax]^R[esi]</span><br><span class=\"line\">movl %ecx, %ebx # R[ebx]&lt;--R[ecx], R[ebx]=k</span><br><span class=\"line\">shrl %bl, %edi # R[edi]&lt;--R[edi]&gt;&gt;R[bl]</span><br><span class=\"line\">test1 %edi, %edi # 判断R[edi]是否为0</span><br><span class=\"line\">jne .L3</span><br><span class=\"line\">movl %esi, %eax # R[eax]&lt;--R[esi]</span><br></pre></td></tr></table></figure></li>\n<li>x存放在EDX, k存放在ECX, val存放在ESI, i存放在EDI.</li>\n<li>val=255, i=-2147483648</li>\n<li>终止的条件是<code>i = 0</code>,\ni的修改<code>i = ((unsigned) i) &gt;&gt; (char) k</code></li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lproc</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> k)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">255</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">-2147483648</span>; i != <span class=\"number\">0</span>; i = ((<span class=\"type\">unsigned</span>) i) &gt;&gt; (<span class=\"type\">char</span>) k) {</span><br><span class=\"line\">        val ^= (x &amp; i);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"section-31\">32.</h2>\n<p>LEN = 7 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    <span class=\"type\">int</span> idx;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">6</span>];</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"section-32\">33.</h2>\n<ol type=\"1\">\n<li>n1.ptr的偏移量是0, n1.data1的偏移量是4, n2.data2的偏移量是0,\nn2.next的偏移量是4</li>\n<li>node类型总大小占8字节</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">chain_proc</span><span class=\"params\">(<span class=\"keyword\">union</span> node *uptr)</span> {</span><br><span class=\"line\">    uptr-&gt;data1 = *(uptr-&gt;n2.next-&gt;n1.ptr) - uptr-&gt;data2;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-33\">34.</h2></li>\n<li>tptr通过RDI传递</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">trace</span><span class=\"params\">(tree_ptr tptr)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tptr != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        val = tptr-&gt;val;</span><br><span class=\"line\">        tptr = tptr-&gt;left;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n<li>取出二叉树最左的叶子的值.</li>\n</ol>\n<h2 id=\"section-34\">35.</h2>\n<ol type=\"1\">\n<li>第6行将a的值解释成double型打印,\n第7行将a的值按指转化为double型再打印</li>\n<li>略</li>\n<li>每次的结果不一致</li>\n<li>略</li>\n<li>略</li>\n<li>第6行对应于<code>movsd  -0x18(%rbp),%xmm0</code>,\n第7行对应于<code>cvtsi2sd %eax,%xmm0</code></li>\n<li>略</li>\n</ol>"},{"title":"计算机系统基础第二章习题","date":"2023-05-04T03:38:17.000Z","mathjax":true,"_content":"\n# 第二章\n\n## 1.\n\n**真值**: 机器数真正的值  \n**机器数**: 数值数据在计算机内部编码表示后的数  \n**数值数据**: 用来表示数量的多少, 可比较其大小, 分为整数和实数, 整数又分为无符号整数和带符号整数  \n**非数值数据**: 没有大小之分的位串, 不表示数量的多少, 主要用来表示字符数据和逻辑数据  \n**无符号整数**: 所有的二进位都用来表示数值而没有符号位  \n**带符号整数**: 用一个二进位表示符号   \n**定点数**: 小数点位置约定在固定位置  \n**原码**: 由符号位直接跟数值位构成  \n<!--more-->  \n**补码**: 正数的补码符号为0, 数值部分是它本身; 负数的补码等于模于该负数绝对值之差  \n**变形补码**: 采用双符号位的补码表示方法  \n**溢出**: 当相加得到的和超出了n位数可表示的范围时, 剩下的低n位数不能正确表示运算  \n**浮点数**: 小数点位置约定为可浮动的数  \n**尾数**: 对于任意一个实数X, 可以表示为: $$X = (-1)^S\\times M \\times R^E$$  \nM是一个二进制定点小数, 称为数X的尾数\n**阶**: E是一个二进制定点小数, 称为数X的阶或指数  \n**阶码**: 浮点数的阶都用一种称之为\"移码\"的编码方式。通常将阶的编码表示称为阶码  \n**移码**: 为了简化比较操作, 对数加上一个正的常数 \n**阶码下溢**: 阶数小于最小的阶  \n**规格化数**: 真致的尾数部分中最高位具有非零数字  \n**左规**: 尾数每左移一位, 阶码减1  \n**右规**: 尾数每右移一位, 阶码加1  \n**非规格化数**: 阶码为全0, 尾数最高位有一个或几个连续的0, 但不全为0  \n**数字零**: 根据浮点数的表示格式, 只要尾数为0, 阶码取任何值其值都为0, 这样的数被称为机器数  \n**非数(NaN)**: 没有定义的数   \n**BCD码**:十进制数采用二进制编码, 通过专门的十进制数运算指令进行处理  \n**逻辑数**: 将n位数据看成是由n个一位数据组成, 每个取值为0或1  \n**ASCII码**: 美国标准信息交换码  \n**汉字输入码**: 每个汉字用对应的按键进行的编码表示  \n**汉字内码**: 汉字在计算机内部存储的编码方式  \n**机器字长**: CPU内部用于整数运算的数据通路的宽度  \n**大端方式**: 将数据的最高有效字节存放在小地址单元中  \n**小端方式**: 将数据的最高有效字节存放在大地址单元中  \n**最高有效位**: 用最高有效字字节(Most Significant Bit/MSB)表示最高位  \n**最高有效字节(MSB)**: 以字节为一个排列基本单元表示时的最高位  \n**最低有效位**: 用最低有效字字节(Least Significant Bit/MSB)表示最低位  \n**最低有效字节(LSB)**: 以字节为一个排列基本单元表示时的最低位  \n**掩码**: 通过于给定的一个位模式进行按位与, 可以提取所需要的位, 这里的位模式称为\"掩码\"  \n**算数位移**: 左移时, 高位移出, 低位补0; 如果移出的高位不同于移位后的符号位, 也即, 若左移前、后符号位不同, 则发生\"溢出\", 右移时, 低位移出, 高位补符号  \n**逻辑位移**: 左移时, 高位衣橱, 低位补0; 右移时, 低位移出, 高位补0  \n**0扩展**: 在短的无符号数前面添加足够的0  \n**符号扩展**: 在短的带符号整数前添加足够多的符号位  \n**零标志ZF**: 表示结果为0, 当结果的所有位都为0时，ZF=1   \n**溢出标志**: 表示带符号整数的加减运算发生溢出, 当X和Y‘的最高位相同且不同于结果的最高位时, OF=1  \n**符号标志SF**: 表示带符号整数加减运算结果的符号位, 直接取结果的最高位作为SF  \n**进位/借位标志**: 表示无符号数加减运算时的进/借位,加法时CF就应等于进位输出C; 减法时, 应将进位输出C取反来作为借位标志. 综合起来, 可得: $CF = Sub \\oplus C$  \n\n## 2.\n(1)\n问题1  \n1. 二进制只有两种基本状态, 使用有两个稳定状态的物理器件就可以表示二进制数的每一位, 而制造有两个稳定状态的物理器件要比制造有多个稳定状态的物理器件容易很多。例如, 用高、低两个电位, 或用脉冲的有无、脉冲的正负极性等可以很方便、很可靠地表示\"0\"和\"1\"\n2. 二进制的编码、计数和运算规则都很简单, 可用开关电路实现, 简便易行\n3. 两个符号\"1\"和\"0\"正好于逻辑命题的两个值\"真\"和\"假\"相对应, 为计算机中实现逻辑运算和程序中的逻辑判断提供了便利的条件, 特别是能通过逻辑门电路方便地实现算数运算\n\n问题2\n在计算机外部, 为了书写和阅读的方便, 采用八、十或十六进制表示形式\n\n(2)\n常用的定点数编码方式有原码、补码、反码和移码, 源码用来表示浮点数的尾数部分, 补码用来表示带符号整数, 反码有时用作数码变换的中间表示形式或用于数据校验, 移码用于表示浮点数的阶数\n\n(3)\n补码表示可以实现加减运算的统一, 即用加法来实现减法运算\n\n(4)\n阶的位数决定了表示范围, 尾数决定了表示精度. 表示浮点数的两个定点数的位数有限, 尾数左移动, 阶数减1; 尾数右移, 阶数加1\n\n(5)\n为了在浮点数运算中尽可能多地保留有效数字的位数, 使有效数字尽量占满尾数位数, 必须在运算过程中对浮点数进行\"规格化\". 对浮点数的尾数进行规格化, 除了能得到尽量多的有效位数以外, 还可以使浮点数的表示具有唯一性. 有左规和右规两种规格化操作\n\n(6)\n有时需要计算机内部能够表示和处理十进制数据, 以方便直接进行十进制的输入输出或直接用十进制数进行计算\n\n(7)\n因为汉字数量巨大, 给汉字在计算机内部的表示、汉字的传输于交换、汉字的输入和输出等带来了一系列问题. 内码和字模码是二进制编码, 输入码不是二进制编码. 因为输入码需要对应键盘上的一个或几个按键, 因此码元是西文键盘中的某个按键; 汉字被输入到计算机内部后,需要进行存储、查找、传送, 因此需要用二进制编码; 汉字经过计算机处理后, 需要在屏幕上显示需要有对应的汉字字形,需要预先存放在计算机内\n\n## 3.\n(1) (25.8125)~10~=(11001.1101)~2~=(31.64)~8~=(19.d)~16~\n(2) (101101.011)~2~=(45.375)~10~=(55.3)~8~=(2d.6)~16~=(01000101.001111110101)~8421~\n(3) (010110010110.0011)~8421~=(596.3)~10~=(1001010100.01001100...)~2~=(254.4c...)~16~\n(4) (4e.c)~16~=(78.75)~10~=(1001110.1100)~2~\n\n## 4.\n00001001 10001001 00000010 10000010 00010100 10010100 00000000 10000000\n\n## 5.\n00001001 11110111 00000001 11111111 00010100 11101100 00000000 00000000\n\n## 6.\n(1) -25 (2) -128 (3) 82 (4) -45\n\n## 7.\n(1) 4235  2155876491\n(2) 4235 -2139090805\n(3) 5.934499e-42 1.176088e-38\n\n## 8.\n| 关系表达式 | 运算类型 | 结果 | 说明 |\n| ---- | ---- | ---- | ---- |\n| 0 == 0U | 无符号整数 | 1 | 00...0B(0) > 00...0B(0) |\n| -1 < 0  | 带符号整数 | 1 | 11...1B(-1) < 00...0B(0) |\n| -1 < 0U | 无符号整数 | 0 | 11...1B(2^32^-1) > 00...0B(0) |\n| 2147483647 > -2147484647 - 1| 带符号整数 | 1 | 011...1B(2^31^-1) > 100...0B(-2^31^)|\n| 2147483637U > -2147483647 - 1| 无符号整数 | 0 | 011...1B(2^31^-1) < 100...0B(2^31^)|\n| 2147483637 > (int) 2147483648U | 带符号整数 | 1 | 011...1B(2^31^-1) > 100...0B(-2^31^)|\n| -1 > -2 | 带符号整数 | 1 | 111...1B(-1) > 111...0B(-2)|\n| (unsigned) -1 > -2 | 无符号整数 | 1 | 111...1B(2^32^-1) > 111...0B(2^32^-2)|\n\n## 9.\n(1) ffff8000H (2) 020aH (3) fffaH\n(4) 40H       (5) bf8ccccdH (6) 4025000000000000\n\n## 10.\n(1) -65530 (2) -8196 (3) 4294967290\n(4) * (5) -800.0 (6) -10.25\n\n## 11.\nmystring1 = hello, world\\n\nmystring2 = we are happy!\n\n## 12.\nchar *mystring1: 2EH 2FH 6DH 79H 66H 69H 6CH 65H\nchar *mystring2: 4FH 4BH 2CH 20H 67H 6FH 6FH 64H 21H\n\n## 13.\n1. *x: a, *y: a^b\n2. *x: b, *y: a^b\n3. *x: b, *y: a\n\n## 14.\n当len为奇数时, 中间值会变为0. 最后一次循环left和right都取中间值. 最后一次循环中调用xor_swap函数后的返回值是0. 将`left<=right`改为`left<right`可以消除该问题\n\n## 15.\n| `x` | `y` | `x^y` | `x&y` | `x|y` | `~x|~y` | `x&!y` | `x&&y` | `x||y` | `!x||!y` | `x&&~y` |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| `0x5F` | `0xA0` | `0xFF` | `0x00` | `0xFF` | `0xFF` | `0x00` | `0x01` | `0x01` | `0x00` | `0x01` |\n| `0xC7` | `0xF0` | `0x37` | `0xC0` | `0xF7` | `0x3F` | `0x00` | `0x01` | `0x01` | `0x00` | `0x01` |\n| `0x07` | `0x55` | `0x52` | `0x05` | `0x57` | `0xFA` | `0x00` | `0x01` | `0x01` | `0x00` | `0x01` |\n\n## 16.\n(1) `(x>>(n-8))<<(n-8)`\n(2) `x & 0xFF`\n(3) `~(x | 0xFF)` 或 `((~x)>>8)<<8 或 ((x^ ~0xFF) >> 8) << 8>>`\n(4) `x | 0xFF`\n\n## 17.\n`0x1b8`: `440`\n`0xfffffe58`: `-424`\n`0xfffffe74`: `-396`\n`0xfffffec8`: `-312`\n`0xfffffeec`: `-276`\n\n## 18.\n当str2的长度大于str1时不正确, 因为所有的类型都转换为`unsigned int`. 应该将`strlen(str1) - strlen(str2) > 0`改为`strlen(str1) > strlen(str2)`\n\n## 19.\n<table>\n<tr>\n<th colspan=2>w</th>\n<th colspan=2>func1(w)</th>\n<th colspan=2>func2(w)</th>\n</tr>\n<tr>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n</tr>\n<tr>\n<td>0x0000007f</td><td>127</td>\n<td>0x0000007f</td><td>127</td>\n<td>0x0000007f</td><td>127</td>\n</tr>\n<tr>\n<td><code>0x00000080</code></td><td><code>128</code></td>\n<td><code>0x00000080</code></td><td>128</td>\n<td><code>0xffffff80</code></td><td>-128</td>\n</tr>\n<tr>\n<td><code>0x000000ff</code></td><td>255</td>\n<td><code>0x000000ff</code></td><td>255</td>\n<td><code>0xffffffff</code></td><td>-1</td>\n</tr>\n<tr>\n<td>0x00000100</td><td>256</td>\n<td>0x00000000</td><td>0</td>\n<td>0x00000000</td><td>0</td>\n</tr>\n</table>\n\n## 20.\n<table>\n<tr>\n<th rowspan=2>模式</th>\n<th colspan=2>x</th>\n<th colspan=2>y</th>\n<th colspan=2>x*y(截断前)</th>\n<th colspan=2>x*y(截断后)</th>\n</tr>\n<tr>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n</tr>\n<tr>\n<td>无符号</td>\n<td>110</td><td>6</td>\n<td>010</td><td>2</td>\n<td>001100</td><td>12</td>\n<td>100</td><td>4</td>\n</tr>\n<tr>\n<td>带符号</td>\n<td>110</td><td>-2</td>\n<td>010</td><td>2</td>\n<td>111100</td><td>-4</td>\n<td>100</td><td>4</td>\n</tr>\n<tr>\n<td>无符号</td>\n<td>001</td><td>1</td>\n<td>111</td><td>7</td>\n<td>000111</td><td>7</td>\n<td>111</td><td>7</td>\n</tr>\n<tr>\n<td>带符号</td>\n<td>001</td><td>1</td>\n<td>111</td><td>-1</td>\n<td>111111</td><td>-1</td>\n<td>111</td><td>-1</td>\n</tr>\n<tr>\n<td>无符号</td>\n<td>111</td><td>7</td>\n<td>111</td><td>7</td>\n<td>110001</td><td>49</td>\n<td>001</td><td>1</td>\n</tr>\n<tr>\n<td>带符号</td>\n<td>111</td><td>-1</td>\n<td>111</td><td>-1</td>\n<td>000001</td><td>1</td>\n<td>001</td><td>1</td>\n</tr>\n</table>\n\n## 21.\n`M = 15`, `N = 4`\n\n## 22.\n(1) 0~2^16^-1\n(2) 2^-1^~(1-2^-17^)\n(3) -2^-15^~2^15^-1\n(4) -2^-15^~2^15^-1\n(5) 2^-129^~(1-2^-8^)*2^127^\n\n## 23.\n`+1.75: 0x3fe00000`\n`+19: 0x41980000`\n`-1/8: 0xbe000000`\n`258: 0x43810000`\n\n## 24.\n32位补码: `0x00001002`\nIEEE 754单精度浮点格式: `0x45801000`\n浮点数的尾数的前12位和32位补码的后12为一致, 因为4098是正数, 其补码和原码一致\n\n## 25.\n32位补码: `0x80000001`\nIEEE 754单精度浮点格式: `0xcf000000`\n\n## 26.\n<table>\n<tr>\n<th rowspan=2>项目</th>\n<th rowspan=2>阶码</th>\n<th rowspan=2>尾数</th>\n<th colspan=2>单精度</th>\n<th colspan=2>双精度</th>\n</tr>\n<tr>\n<td>以2的幂次表示的值</td>\n<td>以10的幂次表示的值</td>\n<td>以2的幂次表示的值</td>\n<td>以10的幂次表示的值</td>\n</tr>\n<tr>\n<td>0</td><td><code>00000000</code></td><td><code>0...00</code></td>\n<td>0</td><td>0</td>\n<td>0</td><td>0</td>\n</tr>\n<tr>\n<td>1</td><td><code>01111111</code></td><td><code>0...00</code></td>\n<td>1&times;2<sup>0</sup></td><td>1&times;2<sup>0</sup></td>\n<td>1&times;2<sup>0</sup></td><td>1&times;2<sup>0</sup></td>\n</tr>\n<tr>\n<td>最大规格化数</td><td><code>11111110</code></td><td><code>1...11</code></td>\n<td>(2-2<sup>-23</sup>)&times;2<sup>127</sup></td><td>3.4&times;10<sup>38</sup></td>\n<td>(2-2<sup>-52</sup>)&times;2<sup>1023</td><td>1.8&times;10<sup>308</sup></td>\n</tr>\n<tr>\n<td>最小规格化数</td><td><code>00000001</code></td><td><code>00...0</code></td>\n<td>1&times;2<sup>-126</sup></td><td>1.2&times;10<sup>-38</sup></td>\n<td>1&times;2<sup>-1022</sup></td><td>2.2&times;10<sup>-308</sup></td>\n</tr>\n<tr>\n<td>最大非规格化数</td><td><code>00000000</code></td><td><code>11...1</code></td>\n<td>(1-2<sup>-23</sup>)&times;2<sup>-126</sup></td><td>1.2&times;10<sup>-38</sup></td>\n<td>(1-2<sup>-52</sup>)&times;2<sup>-1022</sup></td><td>2.2&times;10<sup>-308</sup></td>\n</tr>\n<tr>\n<td>最小非规格化数</td><td><code>00000000</code></td><td><code>00...1</code></td>\n<td>1&times;2<sup>-149</sup></td><td>1.4&times;10<sup>-45</sup></td>\n<td>1&times;2<sup>-1074</sup></td><td>5.0&times;10<sup>-324</sup></td>\n</tr>\n<tr>\n<td>+&infin;</td><td><code>11111111</code></td><td><code>00000000</code></td>\n<td></td><td></td>\n<td></td><td></td>\n</tr>\n<tr>\n<td>NaN</td><td><code>11111111</code></td><td>&ne;<code>00000000</code></td>\n<td></td><td></td>\n<td></td><td></td>\n</tr>\n</table>\n\n## 27.\nE=`01000101` `01000101`\ne=`01100101` `11100101`\n7=`00110111` `00110111`\nG=`01000111` `11000111`\nZ=`01011010` `11011010`\n\n## 28.\n大端模式\n| 100 | 101 | 102 | 103 |\n| --- | --- | --- | --- |\n| be  | 00  | 00  | 00  |\n\n| 108 | 109 | 110 | 111 |\n| --- | --- | --- | --- |\n| 40  | f0  | 00  | 00  |\n\n| 112 | 113 |\n| --- | --- |\n| 64  | 00  |\n小端模式\n| 100 | 101 | 102 | 103 |\n| --- | --- | --- | --- |\n| 00  | 00  | 00  | be  |\n\n| 108 | 109 | 110 | 111 |\n| --- | --- | --- | --- |\n| 00  | 00  | f0  | 40  |\n\n| 112 | 113 |\n| --- | --- |\n| 00  | 64  |\n\n## 29.\n| 表示 | X | x | Y | y | X+Y | x+y | OF | SF | CF | X-Y | x-y | OF | SF | CF|\n| -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| 无符号 | `0xB0` | 176 | `0x8C` | 140  | `0x3C` | 60 | 1 | 0 | 1 | `0x24` | 36 | 0 | 0 | 0 |\n| 带符号 | `0xB0` | -80 | `0x8C` | -116 | `0x3C` | 60 | 1 | 0 | 1 | `0x24` | 36 | 0 | 0 | 0 |\n| 无符号 | `0x7E` | 126 | `0x5D` | 93 | `0xDB` | 219 | 1 | 1 | 0 | `0x21` | 33 | 0 | 0 | 0 |\n| 带符号 | `0x7E` | 126 | `0x5D` | 93 | `0xDB` | -37 | 1 | 1 | 0 | `0x21` | 33 | 0 | 0 | 0 |\n## 30.\n```C\nint ch_mul_overflow(int x, int y)\n{\n  int z = x * y;\n  long long int lx = x;\n  long long int ly = y;\n  long long int lz = lx * ly;\n  return (lz == (((long long int)z << 32) >> 32)) ? 0 : 1;\n}\n\n```\n\n## 31.\n不能, 函数传参时依旧会截断, 应该写一个判断`count < 0x3fffffff`\n\n## 32.\n`x>>6 - x>>3 - x`\n\n## 33.\n```C\nint div32(int x)\n{\n  int b = (x >> 31) & 0x1f;\n  return (x + b) >> 5;\n}\n```\n\n\n## 34.\n(1) FALSE, `ox0000ffff`\n(2) FALSE, `0x80000000`\n(3) TRUE, x与-x必然有一个小于等于0, 且`0x80000000`也成立\n(4) FALSE, `0x80000000`\n(5) TRUE, 当`x = 0xf`时, `(x << 28)`符号位为1\n(6) FALSE, `y = 0x80000000`\n(7) FALSE, `x = 0, y = 0`\n(8) TRUE, 无符号和有符号的运算一致\n(9) TRUE, 右移会损失位数\n(10) TRUE, 左移和乘等价\n(11) FALSE, `x = -1, y = -1`\n(12) TRUE, 运算后的类型会转化为无符号整数, 乘法的低位相等\n(13) TRUE, 无符号和有符号的运算一致\n(14) TRUE, 取反和原类型相加等于`0xffffffff`\n\n## 35.\n(1) TRUE, 浮点满足该等式\n(2) FALSE, `x = 0xffffffff`\n(3) FALSE, `x = 0x40000000, y = 0x40000000`\n(4) TRUE, 双精度可以表示整数所有位\n(5) TRUE, 双精度可以表示整数所有位\n(6) FALSE, `dx = 0, dy = 1`\n\n## 36.\n当尾数的整数部分出现进位时, 需要左规;当尾数的整数部分为0时, 需要右规. 左规时, 尾数左移, 阶数-1; 右规时, 尾数右移, 阶数+1\n\n## 37.\n通过阶码上溢判断\n\n## 38.\n浮点数: `0x800001`\n双精度: `0x10000000000001`\n\n## 39.\n(1) 0.75+(-65.25) = 1.1&times;2^-1^-1.00000101&times;2^6^ = (0.00000011-1.00000101)&times;2^6^ = 1.0000001&times;2^6^\n(2) 0.75-(-65.25) = 1.1&times;2^-1^+1.00000101&times;2^6^ = (0.00000011+1.00000101)&times;2^6^ = 1.00001&times;2^6^\n\n## 40.\n```C\nfloat fpower2(int x)\n{\n  unsigned exp, frac, u;\n  if (x < -149)\n  {\n    exp = 0;\n    frac = 0;\n  }\n  else if ( x < -126)\n  {\n    exp = 0;\n    frac = (1 << 24) >> (126 - x);\n  }\n  else if ( x < 126 )\n  {\n    exp = 127 + x;\n    frac = 0;\n  }\n  else\n  {\n    exp = 255;\n    frac = 0;\n  }\n  u = exp << 23 | frac;\n  return u2f(u);\n}\n```\n\n## 41.\n(1)\n```C\nint is_nan(float_bits f) {return (((f << 1) >> 24) == 0xff) && ((f << 9) != 0);}\nint is_inf(float_bits f) {return (((f << 1) >> 24) == 0xff) && ((f << 9) == 0);}\n\nfloat_bits float_abs(float_bits f)\n{\n  if (is_nan(f))\n    return f;\n  else\n    return f & 0x7fffffff;\n}\n\nfloat_bits float_neg(float_bits f)\n{\n  if (is_nan(f))\n    return f;\n  else\n    return f ^ 0x80000000;\n}\n\nfloat_bits get_in(float_bits frac)\n{\n  int out, lsb;\n  out = frac & 1;\n  lsb = (frac & 2) >> 1;\n  return (out == 1) && (lsb == 1) ? 1 : 0;\n}\n\nfloat_bits make_float(float_bits sign, float_bits exp, float_bits frac, float_bits in)\n{\n  return ((sign << 31) | (exp << 23) | frac) + in;\n}\n\nvoid split_float(float_bits f, float_bits *sign, float_bits *exp, float_bits *frac)\n{\n  *exp = (f & 0x7fffffff) >> 23;\n  *frac = f & 0x007fffff;\n  *sign = f >> 31;\n}\n\nfloat_bits float_half(float_bits f)\n{\n  float_bits sign, exp, frac;\n  split_float(f, &sign, &exp, &frac);\n\n  int in;\n  if (exp == 0)\n  {\n    in = get_in(frac);\n    frac >>= 1;\n  }\n  else if (exp == 1)\n  {\n    exp = 0;\n    frac = frac & 0x00800000;\n    in = get_in(frac);\n    frac >>= 1;\n  }\n  else if (exp < 255)\n  {\n    exp -= 1;\n  }\n  return make_float(sign, exp, frac, in);\n}\n\nfloat_bits float_twice(float_bits f)\n{\n  float_bits sign, exp, frac;\n  split_float(f, &sign, &exp, &frac);\n\n  if (exp == 0)\n  {\n    frac <<= 1;\n    return ((sign << 31) | frac);\n  }\n  else if (exp < 254)\n  {\n    exp += 1;\n  }\n  else if (exp == 254)\n  {\n    exp += 1;\n    frac = 0;\n  }\n  return make_float(sign, exp, frac, 0);\n}\n\nvoid split_int(int i, float_bits *sign, float_bits *val)\n{\n  unsigned ui = i;\n  *sign = ui >> 31;\n if (0 == *sign)\n  *val = ui;\n else\n  *val = ~ui + 1; \n}\n\nint get_bits(float_bits i)\n{\n  int bits_num = 0;\n  while (i > 0)\n  {\n    bits_num += 1;\n    i >>= 1;\n  }\n\n  return bits_num;\n}\n\nfloat_bits get_in_nbits(float_bits val, int n)\n{\n  float_bits out, lsb;\n  float_bits half = 1 << (n - 1);\n  out = val & (0xffffffff >> (32 - n));\n  lsb = (val & (0xffffffff >> (32 - n - 1))) >> n;\n\n  if (out < half)\n    return 0;\n  else if (out > half)\n    return 1;\n  else\n    return lsb ? 1 : 0;\n}\n\nfloat_bits float_i2f(int i)\n{\n  float_bits sign, val;\n  float_bits exp, frac, in;\n  int bits_num;\n\n  split_int(i, &sign, &val);\n  bits_num  = get_bits(val);\n  /* printf(\"sign = %d, val = %d, bits_num = %d\\n\", sign, val, bits_num); */\n  if (i == 0)\n    return 0;\n  else if (bits_num < 25)\n  {\n    exp = 127 + bits_num - 1;\n    frac = (val << (24 - bits_num)) & 0x007fffff;\n    in = 0;\n  }\n  else\n  {\n    float_bits out_bits = bits_num - 24;\n    in = get_in_nbits(val, out_bits);\n    exp = 127 + bits_num - 1;\n    frac = (val >> out_bits) & 0x007fffff;\n  }\n  return make_float(sign, exp, frac, in);\n}\n\nint make_int(float_bits sign, float_bits val, float_bits in)\n{\n  if (0 == sign)\n    return val + in;\n  else\n    return ~val + 1 + in;\n}\n\nint float_f2i(float_bits f)\n{\n  float_bits sign, exp, frac;\n  float_bits val, in;\n  split_float(f, &sign, &exp, &frac);\n  if (exp == 0)\n    return 0;\n  else if (exp > 30 + 127)\n    return 0x80000000;\n  else if (exp > 22 + 127)\n  {\n    val = (frac | 0x00800000) << (exp - 127 - 23);\n    in = 0;\n  }\n  else\n  {\n    float_bits out_bits = 23 - (exp - 127);\n    val = frac | 0x00800000;\n    in = get_in_nbits(val, out_bits);\n    val >>= out_bits;\n  }\n  return make_int(sign, val, in);\n}\n```","source":"_posts/计算机系统基础第二章习题.md","raw":"---\ntitle: 计算机系统基础第二章习题\ndate: 2023-05-04 11:38:17\nmathjax: true\ncategories:\n    - 计算机\ntags:\n    - 计算机系统基础\n---\n\n# 第二章\n\n## 1.\n\n**真值**: 机器数真正的值  \n**机器数**: 数值数据在计算机内部编码表示后的数  \n**数值数据**: 用来表示数量的多少, 可比较其大小, 分为整数和实数, 整数又分为无符号整数和带符号整数  \n**非数值数据**: 没有大小之分的位串, 不表示数量的多少, 主要用来表示字符数据和逻辑数据  \n**无符号整数**: 所有的二进位都用来表示数值而没有符号位  \n**带符号整数**: 用一个二进位表示符号   \n**定点数**: 小数点位置约定在固定位置  \n**原码**: 由符号位直接跟数值位构成  \n<!--more-->  \n**补码**: 正数的补码符号为0, 数值部分是它本身; 负数的补码等于模于该负数绝对值之差  \n**变形补码**: 采用双符号位的补码表示方法  \n**溢出**: 当相加得到的和超出了n位数可表示的范围时, 剩下的低n位数不能正确表示运算  \n**浮点数**: 小数点位置约定为可浮动的数  \n**尾数**: 对于任意一个实数X, 可以表示为: $$X = (-1)^S\\times M \\times R^E$$  \nM是一个二进制定点小数, 称为数X的尾数\n**阶**: E是一个二进制定点小数, 称为数X的阶或指数  \n**阶码**: 浮点数的阶都用一种称之为\"移码\"的编码方式。通常将阶的编码表示称为阶码  \n**移码**: 为了简化比较操作, 对数加上一个正的常数 \n**阶码下溢**: 阶数小于最小的阶  \n**规格化数**: 真致的尾数部分中最高位具有非零数字  \n**左规**: 尾数每左移一位, 阶码减1  \n**右规**: 尾数每右移一位, 阶码加1  \n**非规格化数**: 阶码为全0, 尾数最高位有一个或几个连续的0, 但不全为0  \n**数字零**: 根据浮点数的表示格式, 只要尾数为0, 阶码取任何值其值都为0, 这样的数被称为机器数  \n**非数(NaN)**: 没有定义的数   \n**BCD码**:十进制数采用二进制编码, 通过专门的十进制数运算指令进行处理  \n**逻辑数**: 将n位数据看成是由n个一位数据组成, 每个取值为0或1  \n**ASCII码**: 美国标准信息交换码  \n**汉字输入码**: 每个汉字用对应的按键进行的编码表示  \n**汉字内码**: 汉字在计算机内部存储的编码方式  \n**机器字长**: CPU内部用于整数运算的数据通路的宽度  \n**大端方式**: 将数据的最高有效字节存放在小地址单元中  \n**小端方式**: 将数据的最高有效字节存放在大地址单元中  \n**最高有效位**: 用最高有效字字节(Most Significant Bit/MSB)表示最高位  \n**最高有效字节(MSB)**: 以字节为一个排列基本单元表示时的最高位  \n**最低有效位**: 用最低有效字字节(Least Significant Bit/MSB)表示最低位  \n**最低有效字节(LSB)**: 以字节为一个排列基本单元表示时的最低位  \n**掩码**: 通过于给定的一个位模式进行按位与, 可以提取所需要的位, 这里的位模式称为\"掩码\"  \n**算数位移**: 左移时, 高位移出, 低位补0; 如果移出的高位不同于移位后的符号位, 也即, 若左移前、后符号位不同, 则发生\"溢出\", 右移时, 低位移出, 高位补符号  \n**逻辑位移**: 左移时, 高位衣橱, 低位补0; 右移时, 低位移出, 高位补0  \n**0扩展**: 在短的无符号数前面添加足够的0  \n**符号扩展**: 在短的带符号整数前添加足够多的符号位  \n**零标志ZF**: 表示结果为0, 当结果的所有位都为0时，ZF=1   \n**溢出标志**: 表示带符号整数的加减运算发生溢出, 当X和Y‘的最高位相同且不同于结果的最高位时, OF=1  \n**符号标志SF**: 表示带符号整数加减运算结果的符号位, 直接取结果的最高位作为SF  \n**进位/借位标志**: 表示无符号数加减运算时的进/借位,加法时CF就应等于进位输出C; 减法时, 应将进位输出C取反来作为借位标志. 综合起来, 可得: $CF = Sub \\oplus C$  \n\n## 2.\n(1)\n问题1  \n1. 二进制只有两种基本状态, 使用有两个稳定状态的物理器件就可以表示二进制数的每一位, 而制造有两个稳定状态的物理器件要比制造有多个稳定状态的物理器件容易很多。例如, 用高、低两个电位, 或用脉冲的有无、脉冲的正负极性等可以很方便、很可靠地表示\"0\"和\"1\"\n2. 二进制的编码、计数和运算规则都很简单, 可用开关电路实现, 简便易行\n3. 两个符号\"1\"和\"0\"正好于逻辑命题的两个值\"真\"和\"假\"相对应, 为计算机中实现逻辑运算和程序中的逻辑判断提供了便利的条件, 特别是能通过逻辑门电路方便地实现算数运算\n\n问题2\n在计算机外部, 为了书写和阅读的方便, 采用八、十或十六进制表示形式\n\n(2)\n常用的定点数编码方式有原码、补码、反码和移码, 源码用来表示浮点数的尾数部分, 补码用来表示带符号整数, 反码有时用作数码变换的中间表示形式或用于数据校验, 移码用于表示浮点数的阶数\n\n(3)\n补码表示可以实现加减运算的统一, 即用加法来实现减法运算\n\n(4)\n阶的位数决定了表示范围, 尾数决定了表示精度. 表示浮点数的两个定点数的位数有限, 尾数左移动, 阶数减1; 尾数右移, 阶数加1\n\n(5)\n为了在浮点数运算中尽可能多地保留有效数字的位数, 使有效数字尽量占满尾数位数, 必须在运算过程中对浮点数进行\"规格化\". 对浮点数的尾数进行规格化, 除了能得到尽量多的有效位数以外, 还可以使浮点数的表示具有唯一性. 有左规和右规两种规格化操作\n\n(6)\n有时需要计算机内部能够表示和处理十进制数据, 以方便直接进行十进制的输入输出或直接用十进制数进行计算\n\n(7)\n因为汉字数量巨大, 给汉字在计算机内部的表示、汉字的传输于交换、汉字的输入和输出等带来了一系列问题. 内码和字模码是二进制编码, 输入码不是二进制编码. 因为输入码需要对应键盘上的一个或几个按键, 因此码元是西文键盘中的某个按键; 汉字被输入到计算机内部后,需要进行存储、查找、传送, 因此需要用二进制编码; 汉字经过计算机处理后, 需要在屏幕上显示需要有对应的汉字字形,需要预先存放在计算机内\n\n## 3.\n(1) (25.8125)~10~=(11001.1101)~2~=(31.64)~8~=(19.d)~16~\n(2) (101101.011)~2~=(45.375)~10~=(55.3)~8~=(2d.6)~16~=(01000101.001111110101)~8421~\n(3) (010110010110.0011)~8421~=(596.3)~10~=(1001010100.01001100...)~2~=(254.4c...)~16~\n(4) (4e.c)~16~=(78.75)~10~=(1001110.1100)~2~\n\n## 4.\n00001001 10001001 00000010 10000010 00010100 10010100 00000000 10000000\n\n## 5.\n00001001 11110111 00000001 11111111 00010100 11101100 00000000 00000000\n\n## 6.\n(1) -25 (2) -128 (3) 82 (4) -45\n\n## 7.\n(1) 4235  2155876491\n(2) 4235 -2139090805\n(3) 5.934499e-42 1.176088e-38\n\n## 8.\n| 关系表达式 | 运算类型 | 结果 | 说明 |\n| ---- | ---- | ---- | ---- |\n| 0 == 0U | 无符号整数 | 1 | 00...0B(0) > 00...0B(0) |\n| -1 < 0  | 带符号整数 | 1 | 11...1B(-1) < 00...0B(0) |\n| -1 < 0U | 无符号整数 | 0 | 11...1B(2^32^-1) > 00...0B(0) |\n| 2147483647 > -2147484647 - 1| 带符号整数 | 1 | 011...1B(2^31^-1) > 100...0B(-2^31^)|\n| 2147483637U > -2147483647 - 1| 无符号整数 | 0 | 011...1B(2^31^-1) < 100...0B(2^31^)|\n| 2147483637 > (int) 2147483648U | 带符号整数 | 1 | 011...1B(2^31^-1) > 100...0B(-2^31^)|\n| -1 > -2 | 带符号整数 | 1 | 111...1B(-1) > 111...0B(-2)|\n| (unsigned) -1 > -2 | 无符号整数 | 1 | 111...1B(2^32^-1) > 111...0B(2^32^-2)|\n\n## 9.\n(1) ffff8000H (2) 020aH (3) fffaH\n(4) 40H       (5) bf8ccccdH (6) 4025000000000000\n\n## 10.\n(1) -65530 (2) -8196 (3) 4294967290\n(4) * (5) -800.0 (6) -10.25\n\n## 11.\nmystring1 = hello, world\\n\nmystring2 = we are happy!\n\n## 12.\nchar *mystring1: 2EH 2FH 6DH 79H 66H 69H 6CH 65H\nchar *mystring2: 4FH 4BH 2CH 20H 67H 6FH 6FH 64H 21H\n\n## 13.\n1. *x: a, *y: a^b\n2. *x: b, *y: a^b\n3. *x: b, *y: a\n\n## 14.\n当len为奇数时, 中间值会变为0. 最后一次循环left和right都取中间值. 最后一次循环中调用xor_swap函数后的返回值是0. 将`left<=right`改为`left<right`可以消除该问题\n\n## 15.\n| `x` | `y` | `x^y` | `x&y` | `x|y` | `~x|~y` | `x&!y` | `x&&y` | `x||y` | `!x||!y` | `x&&~y` |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| `0x5F` | `0xA0` | `0xFF` | `0x00` | `0xFF` | `0xFF` | `0x00` | `0x01` | `0x01` | `0x00` | `0x01` |\n| `0xC7` | `0xF0` | `0x37` | `0xC0` | `0xF7` | `0x3F` | `0x00` | `0x01` | `0x01` | `0x00` | `0x01` |\n| `0x07` | `0x55` | `0x52` | `0x05` | `0x57` | `0xFA` | `0x00` | `0x01` | `0x01` | `0x00` | `0x01` |\n\n## 16.\n(1) `(x>>(n-8))<<(n-8)`\n(2) `x & 0xFF`\n(3) `~(x | 0xFF)` 或 `((~x)>>8)<<8 或 ((x^ ~0xFF) >> 8) << 8>>`\n(4) `x | 0xFF`\n\n## 17.\n`0x1b8`: `440`\n`0xfffffe58`: `-424`\n`0xfffffe74`: `-396`\n`0xfffffec8`: `-312`\n`0xfffffeec`: `-276`\n\n## 18.\n当str2的长度大于str1时不正确, 因为所有的类型都转换为`unsigned int`. 应该将`strlen(str1) - strlen(str2) > 0`改为`strlen(str1) > strlen(str2)`\n\n## 19.\n<table>\n<tr>\n<th colspan=2>w</th>\n<th colspan=2>func1(w)</th>\n<th colspan=2>func2(w)</th>\n</tr>\n<tr>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n</tr>\n<tr>\n<td>0x0000007f</td><td>127</td>\n<td>0x0000007f</td><td>127</td>\n<td>0x0000007f</td><td>127</td>\n</tr>\n<tr>\n<td><code>0x00000080</code></td><td><code>128</code></td>\n<td><code>0x00000080</code></td><td>128</td>\n<td><code>0xffffff80</code></td><td>-128</td>\n</tr>\n<tr>\n<td><code>0x000000ff</code></td><td>255</td>\n<td><code>0x000000ff</code></td><td>255</td>\n<td><code>0xffffffff</code></td><td>-1</td>\n</tr>\n<tr>\n<td>0x00000100</td><td>256</td>\n<td>0x00000000</td><td>0</td>\n<td>0x00000000</td><td>0</td>\n</tr>\n</table>\n\n## 20.\n<table>\n<tr>\n<th rowspan=2>模式</th>\n<th colspan=2>x</th>\n<th colspan=2>y</th>\n<th colspan=2>x*y(截断前)</th>\n<th colspan=2>x*y(截断后)</th>\n</tr>\n<tr>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n<td>机器数</td><td>值</td>\n</tr>\n<tr>\n<td>无符号</td>\n<td>110</td><td>6</td>\n<td>010</td><td>2</td>\n<td>001100</td><td>12</td>\n<td>100</td><td>4</td>\n</tr>\n<tr>\n<td>带符号</td>\n<td>110</td><td>-2</td>\n<td>010</td><td>2</td>\n<td>111100</td><td>-4</td>\n<td>100</td><td>4</td>\n</tr>\n<tr>\n<td>无符号</td>\n<td>001</td><td>1</td>\n<td>111</td><td>7</td>\n<td>000111</td><td>7</td>\n<td>111</td><td>7</td>\n</tr>\n<tr>\n<td>带符号</td>\n<td>001</td><td>1</td>\n<td>111</td><td>-1</td>\n<td>111111</td><td>-1</td>\n<td>111</td><td>-1</td>\n</tr>\n<tr>\n<td>无符号</td>\n<td>111</td><td>7</td>\n<td>111</td><td>7</td>\n<td>110001</td><td>49</td>\n<td>001</td><td>1</td>\n</tr>\n<tr>\n<td>带符号</td>\n<td>111</td><td>-1</td>\n<td>111</td><td>-1</td>\n<td>000001</td><td>1</td>\n<td>001</td><td>1</td>\n</tr>\n</table>\n\n## 21.\n`M = 15`, `N = 4`\n\n## 22.\n(1) 0~2^16^-1\n(2) 2^-1^~(1-2^-17^)\n(3) -2^-15^~2^15^-1\n(4) -2^-15^~2^15^-1\n(5) 2^-129^~(1-2^-8^)*2^127^\n\n## 23.\n`+1.75: 0x3fe00000`\n`+19: 0x41980000`\n`-1/8: 0xbe000000`\n`258: 0x43810000`\n\n## 24.\n32位补码: `0x00001002`\nIEEE 754单精度浮点格式: `0x45801000`\n浮点数的尾数的前12位和32位补码的后12为一致, 因为4098是正数, 其补码和原码一致\n\n## 25.\n32位补码: `0x80000001`\nIEEE 754单精度浮点格式: `0xcf000000`\n\n## 26.\n<table>\n<tr>\n<th rowspan=2>项目</th>\n<th rowspan=2>阶码</th>\n<th rowspan=2>尾数</th>\n<th colspan=2>单精度</th>\n<th colspan=2>双精度</th>\n</tr>\n<tr>\n<td>以2的幂次表示的值</td>\n<td>以10的幂次表示的值</td>\n<td>以2的幂次表示的值</td>\n<td>以10的幂次表示的值</td>\n</tr>\n<tr>\n<td>0</td><td><code>00000000</code></td><td><code>0...00</code></td>\n<td>0</td><td>0</td>\n<td>0</td><td>0</td>\n</tr>\n<tr>\n<td>1</td><td><code>01111111</code></td><td><code>0...00</code></td>\n<td>1&times;2<sup>0</sup></td><td>1&times;2<sup>0</sup></td>\n<td>1&times;2<sup>0</sup></td><td>1&times;2<sup>0</sup></td>\n</tr>\n<tr>\n<td>最大规格化数</td><td><code>11111110</code></td><td><code>1...11</code></td>\n<td>(2-2<sup>-23</sup>)&times;2<sup>127</sup></td><td>3.4&times;10<sup>38</sup></td>\n<td>(2-2<sup>-52</sup>)&times;2<sup>1023</td><td>1.8&times;10<sup>308</sup></td>\n</tr>\n<tr>\n<td>最小规格化数</td><td><code>00000001</code></td><td><code>00...0</code></td>\n<td>1&times;2<sup>-126</sup></td><td>1.2&times;10<sup>-38</sup></td>\n<td>1&times;2<sup>-1022</sup></td><td>2.2&times;10<sup>-308</sup></td>\n</tr>\n<tr>\n<td>最大非规格化数</td><td><code>00000000</code></td><td><code>11...1</code></td>\n<td>(1-2<sup>-23</sup>)&times;2<sup>-126</sup></td><td>1.2&times;10<sup>-38</sup></td>\n<td>(1-2<sup>-52</sup>)&times;2<sup>-1022</sup></td><td>2.2&times;10<sup>-308</sup></td>\n</tr>\n<tr>\n<td>最小非规格化数</td><td><code>00000000</code></td><td><code>00...1</code></td>\n<td>1&times;2<sup>-149</sup></td><td>1.4&times;10<sup>-45</sup></td>\n<td>1&times;2<sup>-1074</sup></td><td>5.0&times;10<sup>-324</sup></td>\n</tr>\n<tr>\n<td>+&infin;</td><td><code>11111111</code></td><td><code>00000000</code></td>\n<td></td><td></td>\n<td></td><td></td>\n</tr>\n<tr>\n<td>NaN</td><td><code>11111111</code></td><td>&ne;<code>00000000</code></td>\n<td></td><td></td>\n<td></td><td></td>\n</tr>\n</table>\n\n## 27.\nE=`01000101` `01000101`\ne=`01100101` `11100101`\n7=`00110111` `00110111`\nG=`01000111` `11000111`\nZ=`01011010` `11011010`\n\n## 28.\n大端模式\n| 100 | 101 | 102 | 103 |\n| --- | --- | --- | --- |\n| be  | 00  | 00  | 00  |\n\n| 108 | 109 | 110 | 111 |\n| --- | --- | --- | --- |\n| 40  | f0  | 00  | 00  |\n\n| 112 | 113 |\n| --- | --- |\n| 64  | 00  |\n小端模式\n| 100 | 101 | 102 | 103 |\n| --- | --- | --- | --- |\n| 00  | 00  | 00  | be  |\n\n| 108 | 109 | 110 | 111 |\n| --- | --- | --- | --- |\n| 00  | 00  | f0  | 40  |\n\n| 112 | 113 |\n| --- | --- |\n| 00  | 64  |\n\n## 29.\n| 表示 | X | x | Y | y | X+Y | x+y | OF | SF | CF | X-Y | x-y | OF | SF | CF|\n| -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- |\n| 无符号 | `0xB0` | 176 | `0x8C` | 140  | `0x3C` | 60 | 1 | 0 | 1 | `0x24` | 36 | 0 | 0 | 0 |\n| 带符号 | `0xB0` | -80 | `0x8C` | -116 | `0x3C` | 60 | 1 | 0 | 1 | `0x24` | 36 | 0 | 0 | 0 |\n| 无符号 | `0x7E` | 126 | `0x5D` | 93 | `0xDB` | 219 | 1 | 1 | 0 | `0x21` | 33 | 0 | 0 | 0 |\n| 带符号 | `0x7E` | 126 | `0x5D` | 93 | `0xDB` | -37 | 1 | 1 | 0 | `0x21` | 33 | 0 | 0 | 0 |\n## 30.\n```C\nint ch_mul_overflow(int x, int y)\n{\n  int z = x * y;\n  long long int lx = x;\n  long long int ly = y;\n  long long int lz = lx * ly;\n  return (lz == (((long long int)z << 32) >> 32)) ? 0 : 1;\n}\n\n```\n\n## 31.\n不能, 函数传参时依旧会截断, 应该写一个判断`count < 0x3fffffff`\n\n## 32.\n`x>>6 - x>>3 - x`\n\n## 33.\n```C\nint div32(int x)\n{\n  int b = (x >> 31) & 0x1f;\n  return (x + b) >> 5;\n}\n```\n\n\n## 34.\n(1) FALSE, `ox0000ffff`\n(2) FALSE, `0x80000000`\n(3) TRUE, x与-x必然有一个小于等于0, 且`0x80000000`也成立\n(4) FALSE, `0x80000000`\n(5) TRUE, 当`x = 0xf`时, `(x << 28)`符号位为1\n(6) FALSE, `y = 0x80000000`\n(7) FALSE, `x = 0, y = 0`\n(8) TRUE, 无符号和有符号的运算一致\n(9) TRUE, 右移会损失位数\n(10) TRUE, 左移和乘等价\n(11) FALSE, `x = -1, y = -1`\n(12) TRUE, 运算后的类型会转化为无符号整数, 乘法的低位相等\n(13) TRUE, 无符号和有符号的运算一致\n(14) TRUE, 取反和原类型相加等于`0xffffffff`\n\n## 35.\n(1) TRUE, 浮点满足该等式\n(2) FALSE, `x = 0xffffffff`\n(3) FALSE, `x = 0x40000000, y = 0x40000000`\n(4) TRUE, 双精度可以表示整数所有位\n(5) TRUE, 双精度可以表示整数所有位\n(6) FALSE, `dx = 0, dy = 1`\n\n## 36.\n当尾数的整数部分出现进位时, 需要左规;当尾数的整数部分为0时, 需要右规. 左规时, 尾数左移, 阶数-1; 右规时, 尾数右移, 阶数+1\n\n## 37.\n通过阶码上溢判断\n\n## 38.\n浮点数: `0x800001`\n双精度: `0x10000000000001`\n\n## 39.\n(1) 0.75+(-65.25) = 1.1&times;2^-1^-1.00000101&times;2^6^ = (0.00000011-1.00000101)&times;2^6^ = 1.0000001&times;2^6^\n(2) 0.75-(-65.25) = 1.1&times;2^-1^+1.00000101&times;2^6^ = (0.00000011+1.00000101)&times;2^6^ = 1.00001&times;2^6^\n\n## 40.\n```C\nfloat fpower2(int x)\n{\n  unsigned exp, frac, u;\n  if (x < -149)\n  {\n    exp = 0;\n    frac = 0;\n  }\n  else if ( x < -126)\n  {\n    exp = 0;\n    frac = (1 << 24) >> (126 - x);\n  }\n  else if ( x < 126 )\n  {\n    exp = 127 + x;\n    frac = 0;\n  }\n  else\n  {\n    exp = 255;\n    frac = 0;\n  }\n  u = exp << 23 | frac;\n  return u2f(u);\n}\n```\n\n## 41.\n(1)\n```C\nint is_nan(float_bits f) {return (((f << 1) >> 24) == 0xff) && ((f << 9) != 0);}\nint is_inf(float_bits f) {return (((f << 1) >> 24) == 0xff) && ((f << 9) == 0);}\n\nfloat_bits float_abs(float_bits f)\n{\n  if (is_nan(f))\n    return f;\n  else\n    return f & 0x7fffffff;\n}\n\nfloat_bits float_neg(float_bits f)\n{\n  if (is_nan(f))\n    return f;\n  else\n    return f ^ 0x80000000;\n}\n\nfloat_bits get_in(float_bits frac)\n{\n  int out, lsb;\n  out = frac & 1;\n  lsb = (frac & 2) >> 1;\n  return (out == 1) && (lsb == 1) ? 1 : 0;\n}\n\nfloat_bits make_float(float_bits sign, float_bits exp, float_bits frac, float_bits in)\n{\n  return ((sign << 31) | (exp << 23) | frac) + in;\n}\n\nvoid split_float(float_bits f, float_bits *sign, float_bits *exp, float_bits *frac)\n{\n  *exp = (f & 0x7fffffff) >> 23;\n  *frac = f & 0x007fffff;\n  *sign = f >> 31;\n}\n\nfloat_bits float_half(float_bits f)\n{\n  float_bits sign, exp, frac;\n  split_float(f, &sign, &exp, &frac);\n\n  int in;\n  if (exp == 0)\n  {\n    in = get_in(frac);\n    frac >>= 1;\n  }\n  else if (exp == 1)\n  {\n    exp = 0;\n    frac = frac & 0x00800000;\n    in = get_in(frac);\n    frac >>= 1;\n  }\n  else if (exp < 255)\n  {\n    exp -= 1;\n  }\n  return make_float(sign, exp, frac, in);\n}\n\nfloat_bits float_twice(float_bits f)\n{\n  float_bits sign, exp, frac;\n  split_float(f, &sign, &exp, &frac);\n\n  if (exp == 0)\n  {\n    frac <<= 1;\n    return ((sign << 31) | frac);\n  }\n  else if (exp < 254)\n  {\n    exp += 1;\n  }\n  else if (exp == 254)\n  {\n    exp += 1;\n    frac = 0;\n  }\n  return make_float(sign, exp, frac, 0);\n}\n\nvoid split_int(int i, float_bits *sign, float_bits *val)\n{\n  unsigned ui = i;\n  *sign = ui >> 31;\n if (0 == *sign)\n  *val = ui;\n else\n  *val = ~ui + 1; \n}\n\nint get_bits(float_bits i)\n{\n  int bits_num = 0;\n  while (i > 0)\n  {\n    bits_num += 1;\n    i >>= 1;\n  }\n\n  return bits_num;\n}\n\nfloat_bits get_in_nbits(float_bits val, int n)\n{\n  float_bits out, lsb;\n  float_bits half = 1 << (n - 1);\n  out = val & (0xffffffff >> (32 - n));\n  lsb = (val & (0xffffffff >> (32 - n - 1))) >> n;\n\n  if (out < half)\n    return 0;\n  else if (out > half)\n    return 1;\n  else\n    return lsb ? 1 : 0;\n}\n\nfloat_bits float_i2f(int i)\n{\n  float_bits sign, val;\n  float_bits exp, frac, in;\n  int bits_num;\n\n  split_int(i, &sign, &val);\n  bits_num  = get_bits(val);\n  /* printf(\"sign = %d, val = %d, bits_num = %d\\n\", sign, val, bits_num); */\n  if (i == 0)\n    return 0;\n  else if (bits_num < 25)\n  {\n    exp = 127 + bits_num - 1;\n    frac = (val << (24 - bits_num)) & 0x007fffff;\n    in = 0;\n  }\n  else\n  {\n    float_bits out_bits = bits_num - 24;\n    in = get_in_nbits(val, out_bits);\n    exp = 127 + bits_num - 1;\n    frac = (val >> out_bits) & 0x007fffff;\n  }\n  return make_float(sign, exp, frac, in);\n}\n\nint make_int(float_bits sign, float_bits val, float_bits in)\n{\n  if (0 == sign)\n    return val + in;\n  else\n    return ~val + 1 + in;\n}\n\nint float_f2i(float_bits f)\n{\n  float_bits sign, exp, frac;\n  float_bits val, in;\n  split_float(f, &sign, &exp, &frac);\n  if (exp == 0)\n    return 0;\n  else if (exp > 30 + 127)\n    return 0x80000000;\n  else if (exp > 22 + 127)\n  {\n    val = (frac | 0x00800000) << (exp - 127 - 23);\n    in = 0;\n  }\n  else\n  {\n    float_bits out_bits = 23 - (exp - 127);\n    val = frac | 0x00800000;\n    in = get_in_nbits(val, out_bits);\n    val >>= out_bits;\n  }\n  return make_int(sign, val, in);\n}\n```","slug":"计算机系统基础第二章习题","published":1,"updated":"2023-05-04T03:44:17.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhj8pre60006maqh9aup7vgi","content":"<h1 id=\"第二章\">第二章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>真值</strong>: 机器数真正的值<br>\n<strong>机器数</strong>: 数值数据在计算机内部编码表示后的数<br>\n<strong>数值数据</strong>: 用来表示数量的多少, 可比较其大小,\n分为整数和实数, 整数又分为无符号整数和带符号整数<br>\n<strong>非数值数据</strong>: 没有大小之分的位串, 不表示数量的多少,\n主要用来表示字符数据和逻辑数据<br>\n<strong>无符号整数</strong>:\n所有的二进位都用来表示数值而没有符号位<br>\n<strong>带符号整数</strong>: 用一个二进位表示符号<br>\n<strong>定点数</strong>: 小数点位置约定在固定位置<br>\n<strong>原码</strong>: 由符号位直接跟数值位构成<br>\n<span id=\"more\"></span><br>\n<strong>补码</strong>: 正数的补码符号为0, 数值部分是它本身;\n负数的补码等于模于该负数绝对值之差<br>\n<strong>变形补码</strong>: 采用双符号位的补码表示方法<br>\n<strong>溢出</strong>: 当相加得到的和超出了n位数可表示的范围时,\n剩下的低n位数不能正确表示运算<br>\n<strong>浮点数</strong>: 小数点位置约定为可浮动的数<br>\n<strong>尾数</strong>: 对于任意一个实数X, 可以表示为: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.852ex\" height=\"2.628ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -911.5 9658.8 1161.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1129.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2185.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2574.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3352.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3852.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(422,413) scale(0.707)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5002.9,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6003.1,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7276.3,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8276.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(792,413) scale(0.707)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g></g></g></g></svg></mjx-container></span><br>\nM是一个二进制定点小数, 称为数X的尾数 <strong>阶</strong>:\nE是一个二进制定点小数, 称为数X的阶或指数<br>\n<strong>阶码</strong>:\n浮点数的阶都用一种称之为\"移码\"的编码方式。通常将阶的编码表示称为阶码<br>\n<strong>移码</strong>: 为了简化比较操作, 对数加上一个正的常数\n<strong>阶码下溢</strong>: 阶数小于最小的阶<br>\n<strong>规格化数</strong>: 真致的尾数部分中最高位具有非零数字<br>\n<strong>左规</strong>: 尾数每左移一位, 阶码减1<br>\n<strong>右规</strong>: 尾数每右移一位, 阶码加1<br>\n<strong>非规格化数</strong>: 阶码为全0, 尾数最高位有一个或几个连续的0,\n但不全为0<br>\n<strong>数字零</strong>: 根据浮点数的表示格式, 只要尾数为0,\n阶码取任何值其值都为0, 这样的数被称为机器数<br>\n<strong>非数(NaN)</strong>: 没有定义的数<br>\n<strong>BCD码</strong>:十进制数采用二进制编码,\n通过专门的十进制数运算指令进行处理<br>\n<strong>逻辑数</strong>: 将n位数据看成是由n个一位数据组成,\n每个取值为0或1<br>\n<strong>ASCII码</strong>: 美国标准信息交换码<br>\n<strong>汉字输入码</strong>: 每个汉字用对应的按键进行的编码表示<br>\n<strong>汉字内码</strong>: 汉字在计算机内部存储的编码方式<br>\n<strong>机器字长</strong>: CPU内部用于整数运算的数据通路的宽度<br>\n<strong>大端方式</strong>: 将数据的最高有效字节存放在小地址单元中<br>\n<strong>小端方式</strong>: 将数据的最高有效字节存放在大地址单元中<br>\n<strong>最高有效位</strong>: 用最高有效字字节(Most Significant\nBit/MSB)表示最高位<br>\n<strong>最高有效字节(MSB)</strong>:\n以字节为一个排列基本单元表示时的最高位<br>\n<strong>最低有效位</strong>: 用最低有效字字节(Least Significant\nBit/MSB)表示最低位<br>\n<strong>最低有效字节(LSB)</strong>:\n以字节为一个排列基本单元表示时的最低位<br>\n<strong>掩码</strong>: 通过于给定的一个位模式进行按位与,\n可以提取所需要的位, 这里的位模式称为\"掩码\"<br>\n<strong>算数位移</strong>: 左移时, 高位移出, 低位补0;\n如果移出的高位不同于移位后的符号位, 也即, 若左移前、后符号位不同,\n则发生\"溢出\", 右移时, 低位移出, 高位补符号<br>\n<strong>逻辑位移</strong>: 左移时, 高位衣橱, 低位补0; 右移时, 低位移出,\n高位补0<br>\n<strong>0扩展</strong>: 在短的无符号数前面添加足够的0<br>\n<strong>符号扩展</strong>: 在短的带符号整数前添加足够多的符号位<br>\n<strong>零标志ZF</strong>: 表示结果为0,\n当结果的所有位都为0时，ZF=1<br>\n<strong>溢出标志</strong>: 表示带符号整数的加减运算发生溢出,\n当X和Y‘的最高位相同且不同于结果的最高位时, OF=1<br>\n<strong>符号标志SF</strong>: 表示带符号整数加减运算结果的符号位,\n直接取结果的最高位作为SF<br>\n<strong>进位/借位标志</strong>:\n表示无符号数加减运算时的进/借位,加法时CF就应等于进位输出C; 减法时,\n应将进位输出C取反来作为借位标志. 综合起来, 可得: <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.188ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.64ex\" height=\"1.783ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 6471 788\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1786.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2842.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3487.6,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4059.6,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4710.8,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5711,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>问题1<br>\n</li>\n</ol>\n<ol type=\"1\">\n<li>二进制只有两种基本状态,\n使用有两个稳定状态的物理器件就可以表示二进制数的每一位,\n而制造有两个稳定状态的物理器件要比制造有多个稳定状态的物理器件容易很多。例如,\n用高、低两个电位,\n或用脉冲的有无、脉冲的正负极性等可以很方便、很可靠地表示\"0\"和\"1\"</li>\n<li>二进制的编码、计数和运算规则都很简单, 可用开关电路实现,\n简便易行</li>\n<li>两个符号\"1\"和\"0\"正好于逻辑命题的两个值\"真\"和\"假\"相对应,\n为计算机中实现逻辑运算和程序中的逻辑判断提供了便利的条件,\n特别是能通过逻辑门电路方便地实现算数运算</li>\n</ol>\n<p>问题2 在计算机外部, 为了书写和阅读的方便,\n采用八、十或十六进制表示形式</p>\n<ol start=\"2\" type=\"1\">\n<li><p>常用的定点数编码方式有原码、补码、反码和移码,\n源码用来表示浮点数的尾数部分, 补码用来表示带符号整数,\n反码有时用作数码变换的中间表示形式或用于数据校验,\n移码用于表示浮点数的阶数</p></li>\n<li><p>补码表示可以实现加减运算的统一, 即用加法来实现减法运算</p></li>\n<li><p>阶的位数决定了表示范围, 尾数决定了表示精度.\n表示浮点数的两个定点数的位数有限, 尾数左移动, 阶数减1; 尾数右移,\n阶数加1</p></li>\n<li><p>为了在浮点数运算中尽可能多地保留有效数字的位数,\n使有效数字尽量占满尾数位数, 必须在运算过程中对浮点数进行\"规格化\".\n对浮点数的尾数进行规格化, 除了能得到尽量多的有效位数以外,\n还可以使浮点数的表示具有唯一性. 有左规和右规两种规格化操作</p></li>\n<li><p>有时需要计算机内部能够表示和处理十进制数据,\n以方便直接进行十进制的输入输出或直接用十进制数进行计算</p></li>\n<li><p>因为汉字数量巨大,\n给汉字在计算机内部的表示、汉字的传输于交换、汉字的输入和输出等带来了一系列问题.\n内码和字模码是二进制编码, 输入码不是二进制编码.\n因为输入码需要对应键盘上的一个或几个按键,\n因此码元是西文键盘中的某个按键;\n汉字被输入到计算机内部后,需要进行存储、查找、传送, 因此需要用二进制编码;\n汉字经过计算机处理后,\n需要在屏幕上显示需要有对应的汉字字形,需要预先存放在计算机内</p></li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<ol type=\"1\">\n<li>(25.8125)<sub>10</sub>=(11001.1101)<sub>2</sub>=(31.64)<sub>8</sub>=(19.d)<sub>16</sub></li>\n<li>(101101.011)<sub>2</sub>=(45.375)<sub>10</sub>=(55.3)<sub>8</sub>=(2d.6)<sub>16</sub>=(01000101.001111110101)<sub>8421</sub></li>\n<li>(010110010110.0011)<sub>8421</sub>=(596.3)<sub>10</sub>=(1001010100.01001100...)<sub>2</sub>=(254.4c...)<sub>16</sub></li>\n<li>(4e.c)<sub>16</sub>=(78.75)<sub>10</sub>=(1001110.1100)<sub>2</sub></li>\n</ol>\n<h2 id=\"section-3\">4.</h2>\n<p>00001001 10001001 00000010 10000010 00010100 10010100 00000000\n10000000</p>\n<h2 id=\"section-4\">5.</h2>\n<p>00001001 11110111 00000001 11111111 00010100 11101100 00000000\n00000000</p>\n<h2 id=\"section-5\">6.</h2>\n<ol type=\"1\">\n<li>-25 (2) -128 (3) 82 (4) -45</li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<ol type=\"1\">\n<li>4235 2155876491</li>\n<li>4235 -2139090805</li>\n<li>5.934499e-42 1.176088e-38</li>\n</ol>\n<h2 id=\"section-7\">8.</h2>\n<table>\n<colgroup>\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>关系表达式</th>\n<th>运算类型</th>\n<th>结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0 == 0U</td>\n<td>无符号整数</td>\n<td>1</td>\n<td>00...0B(0) &gt; 00...0B(0)</td>\n</tr>\n<tr class=\"even\">\n<td>-1 &lt; 0</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>11...1B(-1) &lt; 00...0B(0)</td>\n</tr>\n<tr class=\"odd\">\n<td>-1 &lt; 0U</td>\n<td>无符号整数</td>\n<td>0</td>\n<td>11...1B(2<sup>32</sup>-1) &gt; 00...0B(0)</td>\n</tr>\n<tr class=\"even\">\n<td>2147483647 &gt; -2147484647 - 1</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>011...1B(2<sup>31</sup>-1) &gt; 100...0B(-2<sup>31</sup>)</td>\n</tr>\n<tr class=\"odd\">\n<td>2147483637U &gt; -2147483647 - 1</td>\n<td>无符号整数</td>\n<td>0</td>\n<td>011...1B(2<sup>31</sup>-1) &lt; 100...0B(2<sup>31</sup>)</td>\n</tr>\n<tr class=\"even\">\n<td>2147483637 &gt; (int) 2147483648U</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>011...1B(2<sup>31</sup>-1) &gt; 100...0B(-2<sup>31</sup>)</td>\n</tr>\n<tr class=\"odd\">\n<td>-1 &gt; -2</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>111...1B(-1) &gt; 111...0B(-2)</td>\n</tr>\n<tr class=\"even\">\n<td>(unsigned) -1 &gt; -2</td>\n<td>无符号整数</td>\n<td>1</td>\n<td>111...1B(2<sup>32</sup>-1) &gt; 111...0B(2<sup>32</sup>-2)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-8\">9.</h2>\n<ol type=\"1\">\n<li>ffff8000H (2) 020aH (3) fffaH</li>\n<li>40H (5) bf8ccccdH (6) 4025000000000000</li>\n</ol>\n<h2 id=\"section-9\">10.</h2>\n<ol type=\"1\">\n<li>-65530 (2) -8196 (3) 4294967290</li>\n<li><ul>\n<li><ol start=\"5\" type=\"1\">\n<li>-800.0 (6) -10.25</li>\n</ol></li>\n</ul></li>\n</ol>\n<h2 id=\"section-10\">11.</h2>\n<p>mystring1 = hello, world mystring2 = we are happy!</p>\n<h2 id=\"section-11\">12.</h2>\n<p>char <em>mystring1: 2EH 2FH 6DH 79H 66H 69H 6CH 65H char\n</em>mystring2: 4FH 4BH 2CH 20H 67H 6FH 6FH 64H 21H</p>\n<h2 id=\"section-12\">13.</h2>\n<ol type=\"1\">\n<li><em>x: a, </em>y: a^b</li>\n<li><em>x: b, </em>y: a^b</li>\n<li><em>x: b, </em>y: a</li>\n</ol>\n<h2 id=\"section-13\">14.</h2>\n<p>当len为奇数时, 中间值会变为0. 最后一次循环left和right都取中间值.\n最后一次循环中调用xor_swap函数后的返回值是0.\n将<code>left&lt;=right</code>改为<code>left&lt;right</code>可以消除该问题</p>\n<h2 id=\"section-14\">15.</h2>\n<table>\n<colgroup>\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th><code>x</code></th>\n<th><code>y</code></th>\n<th><code>x^y</code></th>\n<th><code>x&amp;y</code></th>\n<th><code>x|y</code></th>\n<th><code>~x|~y</code></th>\n<th><code>x&amp;!y</code></th>\n<th><code>x&amp;&amp;y</code></th>\n<th><code>x||y</code></th>\n<th><code>!x||!y</code></th>\n<th><code>x&amp;&amp;~y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><code>0x5F</code></td>\n<td><code>0xA0</code></td>\n<td><code>0xFF</code></td>\n<td><code>0x00</code></td>\n<td><code>0xFF</code></td>\n<td><code>0xFF</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n<td><code>0x01</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n</tr>\n<tr class=\"even\">\n<td><code>0xC7</code></td>\n<td><code>0xF0</code></td>\n<td><code>0x37</code></td>\n<td><code>0xC0</code></td>\n<td><code>0xF7</code></td>\n<td><code>0x3F</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n<td><code>0x01</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n</tr>\n<tr class=\"odd\">\n<td><code>0x07</code></td>\n<td><code>0x55</code></td>\n<td><code>0x52</code></td>\n<td><code>0x05</code></td>\n<td><code>0x57</code></td>\n<td><code>0xFA</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n<td><code>0x01</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-15\">16.</h2>\n<ol type=\"1\">\n<li><code>(x&gt;&gt;(n-8))&lt;&lt;(n-8)</code></li>\n<li><code>x &amp; 0xFF</code></li>\n<li><code>~(x | 0xFF)</code> 或\n<code>((~x)&gt;&gt;8)&lt;&lt;8 或 ((x^ ~0xFF) &gt;&gt; 8) &lt;&lt; 8&gt;&gt;</code></li>\n<li><code>x | 0xFF</code></li>\n</ol>\n<h2 id=\"section-16\">17.</h2>\n<p><code>0x1b8</code>: <code>440</code> <code>0xfffffe58</code>:\n<code>-424</code> <code>0xfffffe74</code>: <code>-396</code>\n<code>0xfffffec8</code>: <code>-312</code> <code>0xfffffeec</code>:\n<code>-276</code></p>\n<h2 id=\"section-17\">18.</h2>\n<p>当str2的长度大于str1时不正确,\n因为所有的类型都转换为<code>unsigned int</code>.\n应该将<code>strlen(str1) - strlen(str2) &gt; 0</code>改为<code>strlen(str1) &gt; strlen(str2)</code></p>\n<h2 id=\"section-18\">19.</h2>\n<table>\n<tr>\n<th colspan=\"2\">\nw\n</th>\n<th colspan=\"2\">\nfunc1(w)\n</th>\n<th colspan=\"2\">\nfunc2(w)\n</th>\n</tr>\n<tr>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n</tr>\n<tr>\n<td>\n0x0000007f\n</td>\n<td>\n127\n</td>\n<td>\n0x0000007f\n</td>\n<td>\n127\n</td>\n<td>\n0x0000007f\n</td>\n<td>\n127\n</td>\n</tr>\n<tr>\n<td>\n<code>0x00000080</code>\n</td>\n<td>\n<code>128</code>\n</td>\n<td>\n<code>0x00000080</code>\n</td>\n<td>\n128\n</td>\n<td>\n<code>0xffffff80</code>\n</td>\n<td>\n-128\n</td>\n</tr>\n<tr>\n<td>\n<code>0x000000ff</code>\n</td>\n<td>\n255\n</td>\n<td>\n<code>0x000000ff</code>\n</td>\n<td>\n255\n</td>\n<td>\n<code>0xffffffff</code>\n</td>\n<td>\n-1\n</td>\n</tr>\n<tr>\n<td>\n0x00000100\n</td>\n<td>\n256\n</td>\n<td>\n0x00000000\n</td>\n<td>\n0\n</td>\n<td>\n0x00000000\n</td>\n<td>\n0\n</td>\n</tr>\n</table>\n<h2 id=\"section-19\">20.</h2>\n<table>\n<tr>\n<th rowspan=\"2\">\n模式\n</th>\n<th colspan=\"2\">\nx\n</th>\n<th colspan=\"2\">\ny\n</th>\n<th colspan=\"2\">\nx*y(截断前)\n</th>\n<th colspan=\"2\">\nx*y(截断后)\n</th>\n</tr>\n<tr>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n</tr>\n<tr>\n<td>\n无符号\n</td>\n<td>\n110\n</td>\n<td>\n6\n</td>\n<td>\n010\n</td>\n<td>\n2\n</td>\n<td>\n001100\n</td>\n<td>\n12\n</td>\n<td>\n100\n</td>\n<td>\n4\n</td>\n</tr>\n<tr>\n<td>\n带符号\n</td>\n<td>\n110\n</td>\n<td>\n-2\n</td>\n<td>\n010\n</td>\n<td>\n2\n</td>\n<td>\n111100\n</td>\n<td>\n-4\n</td>\n<td>\n100\n</td>\n<td>\n4\n</td>\n</tr>\n<tr>\n<td>\n无符号\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n<td>\n000111\n</td>\n<td>\n7\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n</tr>\n<tr>\n<td>\n带符号\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n<td>\n111111\n</td>\n<td>\n-1\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n</tr>\n<tr>\n<td>\n无符号\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n<td>\n110001\n</td>\n<td>\n49\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n带符号\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n<td>\n000001\n</td>\n<td>\n1\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n</tr>\n</table>\n<h2 id=\"section-20\">21.</h2>\n<p><code>M = 15</code>, <code>N = 4</code></p>\n<h2 id=\"section-21\">22.</h2>\n<ol type=\"1\">\n<li>0~2<sup>16</sup>-1</li>\n<li>2<sup>-1</sup>~(1-2<sup>-17</sup>)</li>\n<li>-2<sup>-15</sup>~2<sup>15</sup>-1</li>\n<li>-2<sup>-15</sup>~2<sup>15</sup>-1</li>\n<li>2<sup>-129</sup>~(1-2<sup>-8</sup>)*2<sup>127</sup></li>\n</ol>\n<h2 id=\"section-22\">23.</h2>\n<p><code>+1.75: 0x3fe00000</code> <code>+19: 0x41980000</code>\n<code>-1/8: 0xbe000000</code> <code>258: 0x43810000</code></p>\n<h2 id=\"section-23\">24.</h2>\n<p>32位补码: <code>0x00001002</code> IEEE 754单精度浮点格式:\n<code>0x45801000</code> 浮点数的尾数的前12位和32位补码的后12为一致,\n因为4098是正数, 其补码和原码一致</p>\n<h2 id=\"section-24\">25.</h2>\n<p>32位补码: <code>0x80000001</code> IEEE 754单精度浮点格式:\n<code>0xcf000000</code></p>\n<h2 id=\"section-25\">26.</h2>\n<table>\n<tr>\n<th rowspan=\"2\">\n项目\n</th>\n<th rowspan=\"2\">\n阶码\n</th>\n<th rowspan=\"2\">\n尾数\n</th>\n<th colspan=\"2\">\n单精度\n</th>\n<th colspan=\"2\">\n双精度\n</th>\n</tr>\n<tr>\n<td>\n以2的幂次表示的值\n</td>\n<td>\n以10的幂次表示的值\n</td>\n<td>\n以2的幂次表示的值\n</td>\n<td>\n以10的幂次表示的值\n</td>\n</tr>\n<tr>\n<td>\n0\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n<code>0...00</code>\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n<code>01111111</code>\n</td>\n<td>\n<code>0...00</code>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n</tr>\n<tr>\n<td>\n最大规格化数\n</td>\n<td>\n<code>11111110</code>\n</td>\n<td>\n<code>1...11</code>\n</td>\n<td>\n(2-2<sup>-23</sup>)×2<sup>127</sup>\n</td>\n<td>\n3.4×10<sup>38</sup>\n</td>\n<td>\n(2-2<sup>-52</sup>)×2<sup>1023\n</sup></td>\n<td>\n1.8×10<sup>308</sup>\n</td>\n</tr>\n<tr>\n<td>\n最小规格化数\n</td>\n<td>\n<code>00000001</code>\n</td>\n<td>\n<code>00...0</code>\n</td>\n<td>\n1×2<sup>-126</sup>\n</td>\n<td>\n1.2×10<sup>-38</sup>\n</td>\n<td>\n1×2<sup>-1022</sup>\n</td>\n<td>\n2.2×10<sup>-308</sup>\n</td>\n</tr>\n<tr>\n<td>\n最大非规格化数\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n<code>11...1</code>\n</td>\n<td>\n(1-2<sup>-23</sup>)×2<sup>-126</sup>\n</td>\n<td>\n1.2×10<sup>-38</sup>\n</td>\n<td>\n(1-2<sup>-52</sup>)×2<sup>-1022</sup>\n</td>\n<td>\n2.2×10<sup>-308</sup>\n</td>\n</tr>\n<tr>\n<td>\n最小非规格化数\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n<code>00...1</code>\n</td>\n<td>\n1×2<sup>-149</sup>\n</td>\n<td>\n1.4×10<sup>-45</sup>\n</td>\n<td>\n1×2<sup>-1074</sup>\n</td>\n<td>\n5.0×10<sup>-324</sup>\n</td>\n</tr>\n<tr>\n<td>\n+∞\n</td>\n<td>\n<code>11111111</code>\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\nNaN\n</td>\n<td>\n<code>11111111</code>\n</td>\n<td>\n≠<code>00000000</code>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n</table>\n<h2 id=\"section-26\">27.</h2>\n<p>E=<code>01000101</code> <code>01000101</code> e=<code>01100101</code>\n<code>11100101</code> 7=<code>00110111</code> <code>00110111</code>\nG=<code>01000111</code> <code>11000111</code> Z=<code>01011010</code>\n<code>11011010</code></p>\n<h2 id=\"section-27\">28.</h2>\n<p>大端模式 | 100 | 101 | 102 | 103 | | --- | --- | --- | --- | | be |\n00 | 00 | 00 |</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>108</th>\n<th>109</th>\n<th>110</th>\n<th>111</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>40</td>\n<td>f0</td>\n<td>00</td>\n<td>00</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr class=\"header\">\n<th>112</th>\n<th>113</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>64</td>\n<td>00</td>\n</tr>\n</tbody>\n</table>\n<p>小端模式 | 100 | 101 | 102 | 103 | | --- | --- | --- | --- | | 00 |\n00 | 00 | be |</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>108</th>\n<th>109</th>\n<th>110</th>\n<th>111</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>00</td>\n<td>00</td>\n<td>f0</td>\n<td>40</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr class=\"header\">\n<th>112</th>\n<th>113</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>00</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-28\">29.</h2>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>表示</th>\n<th>X</th>\n<th>x</th>\n<th>Y</th>\n<th>y</th>\n<th>X+Y</th>\n<th>x+y</th>\n<th>OF</th>\n<th>SF</th>\n<th>CF</th>\n<th>X-Y</th>\n<th>x-y</th>\n<th>OF</th>\n<th>SF</th>\n<th>CF</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>无符号</td>\n<td><code>0xB0</code></td>\n<td>176</td>\n<td><code>0x8C</code></td>\n<td>140</td>\n<td><code>0x3C</code></td>\n<td>60</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td><code>0x24</code></td>\n<td>36</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr class=\"even\">\n<td>带符号</td>\n<td><code>0xB0</code></td>\n<td>-80</td>\n<td><code>0x8C</code></td>\n<td>-116</td>\n<td><code>0x3C</code></td>\n<td>60</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td><code>0x24</code></td>\n<td>36</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr class=\"odd\">\n<td>无符号</td>\n<td><code>0x7E</code></td>\n<td>126</td>\n<td><code>0x5D</code></td>\n<td>93</td>\n<td><code>0xDB</code></td>\n<td>219</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td><code>0x21</code></td>\n<td>33</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr class=\"even\">\n<td>带符号</td>\n<td><code>0x7E</code></td>\n<td>126</td>\n<td><code>0x5D</code></td>\n<td>93</td>\n<td><code>0xDB</code></td>\n<td>-37</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td><code>0x21</code></td>\n<td>33</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-29\">30.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ch_mul_overflow</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> z = x * y;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> lx = x;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> ly = y;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> lz = lx * ly;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (lz == (((<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span>)z &lt;&lt; <span class=\"number\">32</span>) &gt;&gt; <span class=\"number\">32</span>)) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"section-30\">31.</h2>\n<p>不能, 函数传参时依旧会截断,\n应该写一个判断<code>count &lt; 0x3fffffff</code></p>\n<h2 id=\"section-31\">32.</h2>\n<p><code>x&gt;&gt;6 - x&gt;&gt;3 - x</code></p>\n<h2 id=\"section-32\">33.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">div32</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> b = (x &gt;&gt; <span class=\"number\">31</span>) &amp; <span class=\"number\">0x1f</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x + b) &gt;&gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-33\">34.</h2>\n<ol type=\"1\">\n<li>FALSE, <code>ox0000ffff</code></li>\n<li>FALSE, <code>0x80000000</code></li>\n<li>TRUE, x与-x必然有一个小于等于0, 且<code>0x80000000</code>也成立</li>\n<li>FALSE, <code>0x80000000</code></li>\n<li>TRUE, 当<code>x = 0xf</code>时,\n<code>(x &lt;&lt; 28)</code>符号位为1</li>\n<li>FALSE, <code>y = 0x80000000</code></li>\n<li>FALSE, <code>x = 0, y = 0</code></li>\n<li>TRUE, 无符号和有符号的运算一致</li>\n<li>TRUE, 右移会损失位数</li>\n<li>TRUE, 左移和乘等价</li>\n<li>FALSE, <code>x = -1, y = -1</code></li>\n<li>TRUE, 运算后的类型会转化为无符号整数, 乘法的低位相等</li>\n<li>TRUE, 无符号和有符号的运算一致</li>\n<li>TRUE, 取反和原类型相加等于<code>0xffffffff</code></li>\n</ol>\n<h2 id=\"section-34\">35.</h2>\n<ol type=\"1\">\n<li>TRUE, 浮点满足该等式</li>\n<li>FALSE, <code>x = 0xffffffff</code></li>\n<li>FALSE, <code>x = 0x40000000, y = 0x40000000</code></li>\n<li>TRUE, 双精度可以表示整数所有位</li>\n<li>TRUE, 双精度可以表示整数所有位</li>\n<li>FALSE, <code>dx = 0, dy = 1</code></li>\n</ol>\n<h2 id=\"section-35\">36.</h2>\n<p>当尾数的整数部分出现进位时, 需要左规;当尾数的整数部分为0时, 需要右规.\n左规时, 尾数左移, 阶数-1; 右规时, 尾数右移, 阶数+1</p>\n<h2 id=\"section-36\">37.</h2>\n<p>通过阶码上溢判断</p>\n<h2 id=\"section-37\">38.</h2>\n<p>浮点数: <code>0x800001</code> 双精度:\n<code>0x10000000000001</code></p>\n<h2 id=\"section-38\">39.</h2>\n<ol type=\"1\">\n<li>0.75+(-65.25) = 1.1×2<sup>-1</sup>-1.00000101×2<sup>6</sup> =\n(0.00000011-1.00000101)×2<sup>6</sup> = 1.0000001×2<sup>6</sup></li>\n<li>0.75-(-65.25) = 1.1×2<sup>-1</sup>+1.00000101×2<sup>6</sup> =\n(0.00000011+1.00000101)×2<sup>6</sup> = 1.00001×2<sup>6</sup></li>\n</ol>\n<h2 id=\"section-39\">40.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> <span class=\"title function_\">fpower2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"built_in\">exp</span>, frac, u;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">-149</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( x &lt; <span class=\"number\">-126</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    frac = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) &gt;&gt; (<span class=\"number\">126</span> - x);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( x &lt; <span class=\"number\">126</span> )</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">127</span> + x;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">255</span>;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  u = <span class=\"built_in\">exp</span> &lt;&lt; <span class=\"number\">23</span> | frac;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u2f(u);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-40\">41.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">is_nan</span><span class=\"params\">(float_bits f)</span> {<span class=\"keyword\">return</span> (((f &lt;&lt; <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">24</span>) == <span class=\"number\">0xff</span>) &amp;&amp; ((f &lt;&lt; <span class=\"number\">9</span>) != <span class=\"number\">0</span>);}</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">is_inf</span><span class=\"params\">(float_bits f)</span> {<span class=\"keyword\">return</span> (((f &lt;&lt; <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">24</span>) == <span class=\"number\">0xff</span>) &amp;&amp; ((f &lt;&lt; <span class=\"number\">9</span>) == <span class=\"number\">0</span>);}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_abs</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_nan(f))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f &amp; <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_neg</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_nan(f))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f ^ <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">get_in</span><span class=\"params\">(float_bits frac)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> out, lsb;</span><br><span class=\"line\">  out = frac &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">  lsb = (frac &amp; <span class=\"number\">2</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (out == <span class=\"number\">1</span>) &amp;&amp; (lsb == <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">make_float</span><span class=\"params\">(float_bits sign, float_bits <span class=\"built_in\">exp</span>, float_bits frac, float_bits in)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((sign &lt;&lt; <span class=\"number\">31</span>) | (<span class=\"built_in\">exp</span> &lt;&lt; <span class=\"number\">23</span>) | frac) + in;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">split_float</span><span class=\"params\">(float_bits f, float_bits *sign, float_bits *<span class=\"built_in\">exp</span>, float_bits *frac)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  *<span class=\"built_in\">exp</span> = (f &amp; <span class=\"number\">0x7fffffff</span>) &gt;&gt; <span class=\"number\">23</span>;</span><br><span class=\"line\">  *frac = f &amp; <span class=\"number\">0x007fffff</span>;</span><br><span class=\"line\">  *sign = f &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_half</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, <span class=\"built_in\">exp</span>, frac;</span><br><span class=\"line\">  split_float(f, &amp;sign, &amp;<span class=\"built_in\">exp</span>, &amp;frac);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> in;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    in = get_in(frac);</span><br><span class=\"line\">    frac &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    frac = frac &amp; <span class=\"number\">0x00800000</span>;</span><br><span class=\"line\">    in = get_in(frac);</span><br><span class=\"line\">    frac &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &lt; <span class=\"number\">255</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> -= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_float(sign, <span class=\"built_in\">exp</span>, frac, in);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_twice</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, <span class=\"built_in\">exp</span>, frac;</span><br><span class=\"line\">  split_float(f, &amp;sign, &amp;<span class=\"built_in\">exp</span>, &amp;frac);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    frac &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((sign &lt;&lt; <span class=\"number\">31</span>) | frac);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &lt; <span class=\"number\">254</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">254</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_float(sign, <span class=\"built_in\">exp</span>, frac, <span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">split_int</span><span class=\"params\">(<span class=\"type\">int</span> i, float_bits *sign, float_bits *val)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> ui = i;</span><br><span class=\"line\">  *sign = ui &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == *sign)</span><br><span class=\"line\">  *val = ui;</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">  *val = ~ui + <span class=\"number\">1</span>; </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">get_bits</span><span class=\"params\">(float_bits i)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> bits_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    bits_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    i &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> bits_num;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">get_in_nbits</span><span class=\"params\">(float_bits val, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits out, lsb;</span><br><span class=\"line\">  float_bits half = <span class=\"number\">1</span> &lt;&lt; (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  out = val &amp; (<span class=\"number\">0xffffffff</span> &gt;&gt; (<span class=\"number\">32</span> - n));</span><br><span class=\"line\">  lsb = (val &amp; (<span class=\"number\">0xffffffff</span> &gt;&gt; (<span class=\"number\">32</span> - n - <span class=\"number\">1</span>))) &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (out &lt; half)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (out &gt; half)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lsb ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_i2f</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, val;</span><br><span class=\"line\">  float_bits <span class=\"built_in\">exp</span>, frac, in;</span><br><span class=\"line\">  <span class=\"type\">int</span> bits_num;</span><br><span class=\"line\"></span><br><span class=\"line\">  split_int(i, &amp;sign, &amp;val);</span><br><span class=\"line\">  bits_num  = get_bits(val);</span><br><span class=\"line\">  <span class=\"comment\">/* printf(\"sign = %d, val = %d, bits_num = %d\\n\", sign, val, bits_num); */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bits_num &lt; <span class=\"number\">25</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">127</span> + bits_num - <span class=\"number\">1</span>;</span><br><span class=\"line\">    frac = (val &lt;&lt; (<span class=\"number\">24</span> - bits_num)) &amp; <span class=\"number\">0x007fffff</span>;</span><br><span class=\"line\">    in = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">    float_bits out_bits = bits_num - <span class=\"number\">24</span>;</span><br><span class=\"line\">    in = get_in_nbits(val, out_bits);</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">127</span> + bits_num - <span class=\"number\">1</span>;</span><br><span class=\"line\">    frac = (val &gt;&gt; out_bits) &amp; <span class=\"number\">0x007fffff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_float(sign, <span class=\"built_in\">exp</span>, frac, in);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">make_int</span><span class=\"params\">(float_bits sign, float_bits val, float_bits in)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == sign)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + in;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ~val + <span class=\"number\">1</span> + in;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">float_f2i</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, <span class=\"built_in\">exp</span>, frac;</span><br><span class=\"line\">  float_bits val, in;</span><br><span class=\"line\">  split_float(f, &amp;sign, &amp;<span class=\"built_in\">exp</span>, &amp;frac);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &gt; <span class=\"number\">30</span> + <span class=\"number\">127</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &gt; <span class=\"number\">22</span> + <span class=\"number\">127</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    val = (frac | <span class=\"number\">0x00800000</span>) &lt;&lt; (<span class=\"built_in\">exp</span> - <span class=\"number\">127</span> - <span class=\"number\">23</span>);</span><br><span class=\"line\">    in = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">    float_bits out_bits = <span class=\"number\">23</span> - (<span class=\"built_in\">exp</span> - <span class=\"number\">127</span>);</span><br><span class=\"line\">    val = frac | <span class=\"number\">0x00800000</span>;</span><br><span class=\"line\">    in = get_in_nbits(val, out_bits);</span><br><span class=\"line\">    val &gt;&gt;= out_bits;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_int(sign, val, in);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"第二章\">第二章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>真值</strong>: 机器数真正的值<br>\n<strong>机器数</strong>: 数值数据在计算机内部编码表示后的数<br>\n<strong>数值数据</strong>: 用来表示数量的多少, 可比较其大小,\n分为整数和实数, 整数又分为无符号整数和带符号整数<br>\n<strong>非数值数据</strong>: 没有大小之分的位串, 不表示数量的多少,\n主要用来表示字符数据和逻辑数据<br>\n<strong>无符号整数</strong>:\n所有的二进位都用来表示数值而没有符号位<br>\n<strong>带符号整数</strong>: 用一个二进位表示符号<br>\n<strong>定点数</strong>: 小数点位置约定在固定位置<br>\n<strong>原码</strong>: 由符号位直接跟数值位构成<br>","more":"<br>\n<strong>补码</strong>: 正数的补码符号为0, 数值部分是它本身;\n负数的补码等于模于该负数绝对值之差<br>\n<strong>变形补码</strong>: 采用双符号位的补码表示方法<br>\n<strong>溢出</strong>: 当相加得到的和超出了n位数可表示的范围时,\n剩下的低n位数不能正确表示运算<br>\n<strong>浮点数</strong>: 小数点位置约定为可浮动的数<br>\n<strong>尾数</strong>: 对于任意一个实数X, 可以表示为: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.852ex\" height=\"2.628ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -911.5 9658.8 1161.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1129.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2185.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2574.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3352.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3852.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(422,413) scale(0.707)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5002.9,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6003.1,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7276.3,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8276.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(792,413) scale(0.707)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"></path></g></g></g></g></svg></mjx-container></span><br>\nM是一个二进制定点小数, 称为数X的尾数 <strong>阶</strong>:\nE是一个二进制定点小数, 称为数X的阶或指数<br>\n<strong>阶码</strong>:\n浮点数的阶都用一种称之为\"移码\"的编码方式。通常将阶的编码表示称为阶码<br>\n<strong>移码</strong>: 为了简化比较操作, 对数加上一个正的常数\n<strong>阶码下溢</strong>: 阶数小于最小的阶<br>\n<strong>规格化数</strong>: 真致的尾数部分中最高位具有非零数字<br>\n<strong>左规</strong>: 尾数每左移一位, 阶码减1<br>\n<strong>右规</strong>: 尾数每右移一位, 阶码加1<br>\n<strong>非规格化数</strong>: 阶码为全0, 尾数最高位有一个或几个连续的0,\n但不全为0<br>\n<strong>数字零</strong>: 根据浮点数的表示格式, 只要尾数为0,\n阶码取任何值其值都为0, 这样的数被称为机器数<br>\n<strong>非数(NaN)</strong>: 没有定义的数<br>\n<strong>BCD码</strong>:十进制数采用二进制编码,\n通过专门的十进制数运算指令进行处理<br>\n<strong>逻辑数</strong>: 将n位数据看成是由n个一位数据组成,\n每个取值为0或1<br>\n<strong>ASCII码</strong>: 美国标准信息交换码<br>\n<strong>汉字输入码</strong>: 每个汉字用对应的按键进行的编码表示<br>\n<strong>汉字内码</strong>: 汉字在计算机内部存储的编码方式<br>\n<strong>机器字长</strong>: CPU内部用于整数运算的数据通路的宽度<br>\n<strong>大端方式</strong>: 将数据的最高有效字节存放在小地址单元中<br>\n<strong>小端方式</strong>: 将数据的最高有效字节存放在大地址单元中<br>\n<strong>最高有效位</strong>: 用最高有效字字节(Most Significant\nBit/MSB)表示最高位<br>\n<strong>最高有效字节(MSB)</strong>:\n以字节为一个排列基本单元表示时的最高位<br>\n<strong>最低有效位</strong>: 用最低有效字字节(Least Significant\nBit/MSB)表示最低位<br>\n<strong>最低有效字节(LSB)</strong>:\n以字节为一个排列基本单元表示时的最低位<br>\n<strong>掩码</strong>: 通过于给定的一个位模式进行按位与,\n可以提取所需要的位, 这里的位模式称为\"掩码\"<br>\n<strong>算数位移</strong>: 左移时, 高位移出, 低位补0;\n如果移出的高位不同于移位后的符号位, 也即, 若左移前、后符号位不同,\n则发生\"溢出\", 右移时, 低位移出, 高位补符号<br>\n<strong>逻辑位移</strong>: 左移时, 高位衣橱, 低位补0; 右移时, 低位移出,\n高位补0<br>\n<strong>0扩展</strong>: 在短的无符号数前面添加足够的0<br>\n<strong>符号扩展</strong>: 在短的带符号整数前添加足够多的符号位<br>\n<strong>零标志ZF</strong>: 表示结果为0,\n当结果的所有位都为0时，ZF=1<br>\n<strong>溢出标志</strong>: 表示带符号整数的加减运算发生溢出,\n当X和Y‘的最高位相同且不同于结果的最高位时, OF=1<br>\n<strong>符号标志SF</strong>: 表示带符号整数加减运算结果的符号位,\n直接取结果的最高位作为SF<br>\n<strong>进位/借位标志</strong>:\n表示无符号数加减运算时的进/借位,加法时CF就应等于进位输出C; 减法时,\n应将进位输出C取反来作为借位标志. 综合起来, 可得: <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.188ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.64ex\" height=\"1.783ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 6471 788\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1786.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2842.6,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3487.6,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4059.6,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4710.8,0)\"><path data-c=\"2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5711,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>问题1<br>\n</li>\n</ol>\n<ol type=\"1\">\n<li>二进制只有两种基本状态,\n使用有两个稳定状态的物理器件就可以表示二进制数的每一位,\n而制造有两个稳定状态的物理器件要比制造有多个稳定状态的物理器件容易很多。例如,\n用高、低两个电位,\n或用脉冲的有无、脉冲的正负极性等可以很方便、很可靠地表示\"0\"和\"1\"</li>\n<li>二进制的编码、计数和运算规则都很简单, 可用开关电路实现,\n简便易行</li>\n<li>两个符号\"1\"和\"0\"正好于逻辑命题的两个值\"真\"和\"假\"相对应,\n为计算机中实现逻辑运算和程序中的逻辑判断提供了便利的条件,\n特别是能通过逻辑门电路方便地实现算数运算</li>\n</ol>\n<p>问题2 在计算机外部, 为了书写和阅读的方便,\n采用八、十或十六进制表示形式</p>\n<ol start=\"2\" type=\"1\">\n<li><p>常用的定点数编码方式有原码、补码、反码和移码,\n源码用来表示浮点数的尾数部分, 补码用来表示带符号整数,\n反码有时用作数码变换的中间表示形式或用于数据校验,\n移码用于表示浮点数的阶数</p></li>\n<li><p>补码表示可以实现加减运算的统一, 即用加法来实现减法运算</p></li>\n<li><p>阶的位数决定了表示范围, 尾数决定了表示精度.\n表示浮点数的两个定点数的位数有限, 尾数左移动, 阶数减1; 尾数右移,\n阶数加1</p></li>\n<li><p>为了在浮点数运算中尽可能多地保留有效数字的位数,\n使有效数字尽量占满尾数位数, 必须在运算过程中对浮点数进行\"规格化\".\n对浮点数的尾数进行规格化, 除了能得到尽量多的有效位数以外,\n还可以使浮点数的表示具有唯一性. 有左规和右规两种规格化操作</p></li>\n<li><p>有时需要计算机内部能够表示和处理十进制数据,\n以方便直接进行十进制的输入输出或直接用十进制数进行计算</p></li>\n<li><p>因为汉字数量巨大,\n给汉字在计算机内部的表示、汉字的传输于交换、汉字的输入和输出等带来了一系列问题.\n内码和字模码是二进制编码, 输入码不是二进制编码.\n因为输入码需要对应键盘上的一个或几个按键,\n因此码元是西文键盘中的某个按键;\n汉字被输入到计算机内部后,需要进行存储、查找、传送, 因此需要用二进制编码;\n汉字经过计算机处理后,\n需要在屏幕上显示需要有对应的汉字字形,需要预先存放在计算机内</p></li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<ol type=\"1\">\n<li>(25.8125)<sub>10</sub>=(11001.1101)<sub>2</sub>=(31.64)<sub>8</sub>=(19.d)<sub>16</sub></li>\n<li>(101101.011)<sub>2</sub>=(45.375)<sub>10</sub>=(55.3)<sub>8</sub>=(2d.6)<sub>16</sub>=(01000101.001111110101)<sub>8421</sub></li>\n<li>(010110010110.0011)<sub>8421</sub>=(596.3)<sub>10</sub>=(1001010100.01001100...)<sub>2</sub>=(254.4c...)<sub>16</sub></li>\n<li>(4e.c)<sub>16</sub>=(78.75)<sub>10</sub>=(1001110.1100)<sub>2</sub></li>\n</ol>\n<h2 id=\"section-3\">4.</h2>\n<p>00001001 10001001 00000010 10000010 00010100 10010100 00000000\n10000000</p>\n<h2 id=\"section-4\">5.</h2>\n<p>00001001 11110111 00000001 11111111 00010100 11101100 00000000\n00000000</p>\n<h2 id=\"section-5\">6.</h2>\n<ol type=\"1\">\n<li>-25 (2) -128 (3) 82 (4) -45</li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<ol type=\"1\">\n<li>4235 2155876491</li>\n<li>4235 -2139090805</li>\n<li>5.934499e-42 1.176088e-38</li>\n</ol>\n<h2 id=\"section-7\">8.</h2>\n<table>\n<colgroup>\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n<col style=\"width: 25%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>关系表达式</th>\n<th>运算类型</th>\n<th>结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0 == 0U</td>\n<td>无符号整数</td>\n<td>1</td>\n<td>00...0B(0) &gt; 00...0B(0)</td>\n</tr>\n<tr class=\"even\">\n<td>-1 &lt; 0</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>11...1B(-1) &lt; 00...0B(0)</td>\n</tr>\n<tr class=\"odd\">\n<td>-1 &lt; 0U</td>\n<td>无符号整数</td>\n<td>0</td>\n<td>11...1B(2<sup>32</sup>-1) &gt; 00...0B(0)</td>\n</tr>\n<tr class=\"even\">\n<td>2147483647 &gt; -2147484647 - 1</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>011...1B(2<sup>31</sup>-1) &gt; 100...0B(-2<sup>31</sup>)</td>\n</tr>\n<tr class=\"odd\">\n<td>2147483637U &gt; -2147483647 - 1</td>\n<td>无符号整数</td>\n<td>0</td>\n<td>011...1B(2<sup>31</sup>-1) &lt; 100...0B(2<sup>31</sup>)</td>\n</tr>\n<tr class=\"even\">\n<td>2147483637 &gt; (int) 2147483648U</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>011...1B(2<sup>31</sup>-1) &gt; 100...0B(-2<sup>31</sup>)</td>\n</tr>\n<tr class=\"odd\">\n<td>-1 &gt; -2</td>\n<td>带符号整数</td>\n<td>1</td>\n<td>111...1B(-1) &gt; 111...0B(-2)</td>\n</tr>\n<tr class=\"even\">\n<td>(unsigned) -1 &gt; -2</td>\n<td>无符号整数</td>\n<td>1</td>\n<td>111...1B(2<sup>32</sup>-1) &gt; 111...0B(2<sup>32</sup>-2)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-8\">9.</h2>\n<ol type=\"1\">\n<li>ffff8000H (2) 020aH (3) fffaH</li>\n<li>40H (5) bf8ccccdH (6) 4025000000000000</li>\n</ol>\n<h2 id=\"section-9\">10.</h2>\n<ol type=\"1\">\n<li>-65530 (2) -8196 (3) 4294967290</li>\n<li><ul>\n<li><ol start=\"5\" type=\"1\">\n<li>-800.0 (6) -10.25</li>\n</ol></li>\n</ul></li>\n</ol>\n<h2 id=\"section-10\">11.</h2>\n<p>mystring1 = hello, world mystring2 = we are happy!</p>\n<h2 id=\"section-11\">12.</h2>\n<p>char <em>mystring1: 2EH 2FH 6DH 79H 66H 69H 6CH 65H char\n</em>mystring2: 4FH 4BH 2CH 20H 67H 6FH 6FH 64H 21H</p>\n<h2 id=\"section-12\">13.</h2>\n<ol type=\"1\">\n<li><em>x: a, </em>y: a^b</li>\n<li><em>x: b, </em>y: a^b</li>\n<li><em>x: b, </em>y: a</li>\n</ol>\n<h2 id=\"section-13\">14.</h2>\n<p>当len为奇数时, 中间值会变为0. 最后一次循环left和right都取中间值.\n最后一次循环中调用xor_swap函数后的返回值是0.\n将<code>left&lt;=right</code>改为<code>left&lt;right</code>可以消除该问题</p>\n<h2 id=\"section-14\">15.</h2>\n<table>\n<colgroup>\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n<col style=\"width: 9%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th><code>x</code></th>\n<th><code>y</code></th>\n<th><code>x^y</code></th>\n<th><code>x&amp;y</code></th>\n<th><code>x|y</code></th>\n<th><code>~x|~y</code></th>\n<th><code>x&amp;!y</code></th>\n<th><code>x&amp;&amp;y</code></th>\n<th><code>x||y</code></th>\n<th><code>!x||!y</code></th>\n<th><code>x&amp;&amp;~y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><code>0x5F</code></td>\n<td><code>0xA0</code></td>\n<td><code>0xFF</code></td>\n<td><code>0x00</code></td>\n<td><code>0xFF</code></td>\n<td><code>0xFF</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n<td><code>0x01</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n</tr>\n<tr class=\"even\">\n<td><code>0xC7</code></td>\n<td><code>0xF0</code></td>\n<td><code>0x37</code></td>\n<td><code>0xC0</code></td>\n<td><code>0xF7</code></td>\n<td><code>0x3F</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n<td><code>0x01</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n</tr>\n<tr class=\"odd\">\n<td><code>0x07</code></td>\n<td><code>0x55</code></td>\n<td><code>0x52</code></td>\n<td><code>0x05</code></td>\n<td><code>0x57</code></td>\n<td><code>0xFA</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n<td><code>0x01</code></td>\n<td><code>0x00</code></td>\n<td><code>0x01</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-15\">16.</h2>\n<ol type=\"1\">\n<li><code>(x&gt;&gt;(n-8))&lt;&lt;(n-8)</code></li>\n<li><code>x &amp; 0xFF</code></li>\n<li><code>~(x | 0xFF)</code> 或\n<code>((~x)&gt;&gt;8)&lt;&lt;8 或 ((x^ ~0xFF) &gt;&gt; 8) &lt;&lt; 8&gt;&gt;</code></li>\n<li><code>x | 0xFF</code></li>\n</ol>\n<h2 id=\"section-16\">17.</h2>\n<p><code>0x1b8</code>: <code>440</code> <code>0xfffffe58</code>:\n<code>-424</code> <code>0xfffffe74</code>: <code>-396</code>\n<code>0xfffffec8</code>: <code>-312</code> <code>0xfffffeec</code>:\n<code>-276</code></p>\n<h2 id=\"section-17\">18.</h2>\n<p>当str2的长度大于str1时不正确,\n因为所有的类型都转换为<code>unsigned int</code>.\n应该将<code>strlen(str1) - strlen(str2) &gt; 0</code>改为<code>strlen(str1) &gt; strlen(str2)</code></p>\n<h2 id=\"section-18\">19.</h2>\n<table>\n<tr>\n<th colspan=\"2\">\nw\n</th>\n<th colspan=\"2\">\nfunc1(w)\n</th>\n<th colspan=\"2\">\nfunc2(w)\n</th>\n</tr>\n<tr>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n</tr>\n<tr>\n<td>\n0x0000007f\n</td>\n<td>\n127\n</td>\n<td>\n0x0000007f\n</td>\n<td>\n127\n</td>\n<td>\n0x0000007f\n</td>\n<td>\n127\n</td>\n</tr>\n<tr>\n<td>\n<code>0x00000080</code>\n</td>\n<td>\n<code>128</code>\n</td>\n<td>\n<code>0x00000080</code>\n</td>\n<td>\n128\n</td>\n<td>\n<code>0xffffff80</code>\n</td>\n<td>\n-128\n</td>\n</tr>\n<tr>\n<td>\n<code>0x000000ff</code>\n</td>\n<td>\n255\n</td>\n<td>\n<code>0x000000ff</code>\n</td>\n<td>\n255\n</td>\n<td>\n<code>0xffffffff</code>\n</td>\n<td>\n-1\n</td>\n</tr>\n<tr>\n<td>\n0x00000100\n</td>\n<td>\n256\n</td>\n<td>\n0x00000000\n</td>\n<td>\n0\n</td>\n<td>\n0x00000000\n</td>\n<td>\n0\n</td>\n</tr>\n</table>\n<h2 id=\"section-19\">20.</h2>\n<table>\n<tr>\n<th rowspan=\"2\">\n模式\n</th>\n<th colspan=\"2\">\nx\n</th>\n<th colspan=\"2\">\ny\n</th>\n<th colspan=\"2\">\nx*y(截断前)\n</th>\n<th colspan=\"2\">\nx*y(截断后)\n</th>\n</tr>\n<tr>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n<td>\n机器数\n</td>\n<td>\n值\n</td>\n</tr>\n<tr>\n<td>\n无符号\n</td>\n<td>\n110\n</td>\n<td>\n6\n</td>\n<td>\n010\n</td>\n<td>\n2\n</td>\n<td>\n001100\n</td>\n<td>\n12\n</td>\n<td>\n100\n</td>\n<td>\n4\n</td>\n</tr>\n<tr>\n<td>\n带符号\n</td>\n<td>\n110\n</td>\n<td>\n-2\n</td>\n<td>\n010\n</td>\n<td>\n2\n</td>\n<td>\n111100\n</td>\n<td>\n-4\n</td>\n<td>\n100\n</td>\n<td>\n4\n</td>\n</tr>\n<tr>\n<td>\n无符号\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n<td>\n000111\n</td>\n<td>\n7\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n</tr>\n<tr>\n<td>\n带符号\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n<td>\n111111\n</td>\n<td>\n-1\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n</tr>\n<tr>\n<td>\n无符号\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n<td>\n111\n</td>\n<td>\n7\n</td>\n<td>\n110001\n</td>\n<td>\n49\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n带符号\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n<td>\n111\n</td>\n<td>\n-1\n</td>\n<td>\n000001\n</td>\n<td>\n1\n</td>\n<td>\n001\n</td>\n<td>\n1\n</td>\n</tr>\n</table>\n<h2 id=\"section-20\">21.</h2>\n<p><code>M = 15</code>, <code>N = 4</code></p>\n<h2 id=\"section-21\">22.</h2>\n<ol type=\"1\">\n<li>0~2<sup>16</sup>-1</li>\n<li>2<sup>-1</sup>~(1-2<sup>-17</sup>)</li>\n<li>-2<sup>-15</sup>~2<sup>15</sup>-1</li>\n<li>-2<sup>-15</sup>~2<sup>15</sup>-1</li>\n<li>2<sup>-129</sup>~(1-2<sup>-8</sup>)*2<sup>127</sup></li>\n</ol>\n<h2 id=\"section-22\">23.</h2>\n<p><code>+1.75: 0x3fe00000</code> <code>+19: 0x41980000</code>\n<code>-1/8: 0xbe000000</code> <code>258: 0x43810000</code></p>\n<h2 id=\"section-23\">24.</h2>\n<p>32位补码: <code>0x00001002</code> IEEE 754单精度浮点格式:\n<code>0x45801000</code> 浮点数的尾数的前12位和32位补码的后12为一致,\n因为4098是正数, 其补码和原码一致</p>\n<h2 id=\"section-24\">25.</h2>\n<p>32位补码: <code>0x80000001</code> IEEE 754单精度浮点格式:\n<code>0xcf000000</code></p>\n<h2 id=\"section-25\">26.</h2>\n<table>\n<tr>\n<th rowspan=\"2\">\n项目\n</th>\n<th rowspan=\"2\">\n阶码\n</th>\n<th rowspan=\"2\">\n尾数\n</th>\n<th colspan=\"2\">\n单精度\n</th>\n<th colspan=\"2\">\n双精度\n</th>\n</tr>\n<tr>\n<td>\n以2的幂次表示的值\n</td>\n<td>\n以10的幂次表示的值\n</td>\n<td>\n以2的幂次表示的值\n</td>\n<td>\n以10的幂次表示的值\n</td>\n</tr>\n<tr>\n<td>\n0\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n<code>0...00</code>\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n<code>01111111</code>\n</td>\n<td>\n<code>0...00</code>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n<td>\n1×2<sup>0</sup>\n</td>\n</tr>\n<tr>\n<td>\n最大规格化数\n</td>\n<td>\n<code>11111110</code>\n</td>\n<td>\n<code>1...11</code>\n</td>\n<td>\n(2-2<sup>-23</sup>)×2<sup>127</sup>\n</td>\n<td>\n3.4×10<sup>38</sup>\n</td>\n<td>\n(2-2<sup>-52</sup>)×2<sup>1023\n</sup></td>\n<td>\n1.8×10<sup>308</sup>\n</td>\n</tr>\n<tr>\n<td>\n最小规格化数\n</td>\n<td>\n<code>00000001</code>\n</td>\n<td>\n<code>00...0</code>\n</td>\n<td>\n1×2<sup>-126</sup>\n</td>\n<td>\n1.2×10<sup>-38</sup>\n</td>\n<td>\n1×2<sup>-1022</sup>\n</td>\n<td>\n2.2×10<sup>-308</sup>\n</td>\n</tr>\n<tr>\n<td>\n最大非规格化数\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n<code>11...1</code>\n</td>\n<td>\n(1-2<sup>-23</sup>)×2<sup>-126</sup>\n</td>\n<td>\n1.2×10<sup>-38</sup>\n</td>\n<td>\n(1-2<sup>-52</sup>)×2<sup>-1022</sup>\n</td>\n<td>\n2.2×10<sup>-308</sup>\n</td>\n</tr>\n<tr>\n<td>\n最小非规格化数\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n<code>00...1</code>\n</td>\n<td>\n1×2<sup>-149</sup>\n</td>\n<td>\n1.4×10<sup>-45</sup>\n</td>\n<td>\n1×2<sup>-1074</sup>\n</td>\n<td>\n5.0×10<sup>-324</sup>\n</td>\n</tr>\n<tr>\n<td>\n+∞\n</td>\n<td>\n<code>11111111</code>\n</td>\n<td>\n<code>00000000</code>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\nNaN\n</td>\n<td>\n<code>11111111</code>\n</td>\n<td>\n≠<code>00000000</code>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n</table>\n<h2 id=\"section-26\">27.</h2>\n<p>E=<code>01000101</code> <code>01000101</code> e=<code>01100101</code>\n<code>11100101</code> 7=<code>00110111</code> <code>00110111</code>\nG=<code>01000111</code> <code>11000111</code> Z=<code>01011010</code>\n<code>11011010</code></p>\n<h2 id=\"section-27\">28.</h2>\n<p>大端模式 | 100 | 101 | 102 | 103 | | --- | --- | --- | --- | | be |\n00 | 00 | 00 |</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>108</th>\n<th>109</th>\n<th>110</th>\n<th>111</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>40</td>\n<td>f0</td>\n<td>00</td>\n<td>00</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr class=\"header\">\n<th>112</th>\n<th>113</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>64</td>\n<td>00</td>\n</tr>\n</tbody>\n</table>\n<p>小端模式 | 100 | 101 | 102 | 103 | | --- | --- | --- | --- | | 00 |\n00 | 00 | be |</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>108</th>\n<th>109</th>\n<th>110</th>\n<th>111</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>00</td>\n<td>00</td>\n<td>f0</td>\n<td>40</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr class=\"header\">\n<th>112</th>\n<th>113</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>00</td>\n<td>64</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-28\">29.</h2>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n<col style=\"width: 6%\">\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>表示</th>\n<th>X</th>\n<th>x</th>\n<th>Y</th>\n<th>y</th>\n<th>X+Y</th>\n<th>x+y</th>\n<th>OF</th>\n<th>SF</th>\n<th>CF</th>\n<th>X-Y</th>\n<th>x-y</th>\n<th>OF</th>\n<th>SF</th>\n<th>CF</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>无符号</td>\n<td><code>0xB0</code></td>\n<td>176</td>\n<td><code>0x8C</code></td>\n<td>140</td>\n<td><code>0x3C</code></td>\n<td>60</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td><code>0x24</code></td>\n<td>36</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr class=\"even\">\n<td>带符号</td>\n<td><code>0xB0</code></td>\n<td>-80</td>\n<td><code>0x8C</code></td>\n<td>-116</td>\n<td><code>0x3C</code></td>\n<td>60</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td><code>0x24</code></td>\n<td>36</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr class=\"odd\">\n<td>无符号</td>\n<td><code>0x7E</code></td>\n<td>126</td>\n<td><code>0x5D</code></td>\n<td>93</td>\n<td><code>0xDB</code></td>\n<td>219</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td><code>0x21</code></td>\n<td>33</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr class=\"even\">\n<td>带符号</td>\n<td><code>0x7E</code></td>\n<td>126</td>\n<td><code>0x5D</code></td>\n<td>93</td>\n<td><code>0xDB</code></td>\n<td>-37</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td><code>0x21</code></td>\n<td>33</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"section-29\">30.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ch_mul_overflow</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> z = x * y;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> lx = x;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> ly = y;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> lz = lx * ly;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (lz == (((<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span>)z &lt;&lt; <span class=\"number\">32</span>) &gt;&gt; <span class=\"number\">32</span>)) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"section-30\">31.</h2>\n<p>不能, 函数传参时依旧会截断,\n应该写一个判断<code>count &lt; 0x3fffffff</code></p>\n<h2 id=\"section-31\">32.</h2>\n<p><code>x&gt;&gt;6 - x&gt;&gt;3 - x</code></p>\n<h2 id=\"section-32\">33.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">div32</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> b = (x &gt;&gt; <span class=\"number\">31</span>) &amp; <span class=\"number\">0x1f</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x + b) &gt;&gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-33\">34.</h2>\n<ol type=\"1\">\n<li>FALSE, <code>ox0000ffff</code></li>\n<li>FALSE, <code>0x80000000</code></li>\n<li>TRUE, x与-x必然有一个小于等于0, 且<code>0x80000000</code>也成立</li>\n<li>FALSE, <code>0x80000000</code></li>\n<li>TRUE, 当<code>x = 0xf</code>时,\n<code>(x &lt;&lt; 28)</code>符号位为1</li>\n<li>FALSE, <code>y = 0x80000000</code></li>\n<li>FALSE, <code>x = 0, y = 0</code></li>\n<li>TRUE, 无符号和有符号的运算一致</li>\n<li>TRUE, 右移会损失位数</li>\n<li>TRUE, 左移和乘等价</li>\n<li>FALSE, <code>x = -1, y = -1</code></li>\n<li>TRUE, 运算后的类型会转化为无符号整数, 乘法的低位相等</li>\n<li>TRUE, 无符号和有符号的运算一致</li>\n<li>TRUE, 取反和原类型相加等于<code>0xffffffff</code></li>\n</ol>\n<h2 id=\"section-34\">35.</h2>\n<ol type=\"1\">\n<li>TRUE, 浮点满足该等式</li>\n<li>FALSE, <code>x = 0xffffffff</code></li>\n<li>FALSE, <code>x = 0x40000000, y = 0x40000000</code></li>\n<li>TRUE, 双精度可以表示整数所有位</li>\n<li>TRUE, 双精度可以表示整数所有位</li>\n<li>FALSE, <code>dx = 0, dy = 1</code></li>\n</ol>\n<h2 id=\"section-35\">36.</h2>\n<p>当尾数的整数部分出现进位时, 需要左规;当尾数的整数部分为0时, 需要右规.\n左规时, 尾数左移, 阶数-1; 右规时, 尾数右移, 阶数+1</p>\n<h2 id=\"section-36\">37.</h2>\n<p>通过阶码上溢判断</p>\n<h2 id=\"section-37\">38.</h2>\n<p>浮点数: <code>0x800001</code> 双精度:\n<code>0x10000000000001</code></p>\n<h2 id=\"section-38\">39.</h2>\n<ol type=\"1\">\n<li>0.75+(-65.25) = 1.1×2<sup>-1</sup>-1.00000101×2<sup>6</sup> =\n(0.00000011-1.00000101)×2<sup>6</sup> = 1.0000001×2<sup>6</sup></li>\n<li>0.75-(-65.25) = 1.1×2<sup>-1</sup>+1.00000101×2<sup>6</sup> =\n(0.00000011+1.00000101)×2<sup>6</sup> = 1.00001×2<sup>6</sup></li>\n</ol>\n<h2 id=\"section-39\">40.</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> <span class=\"title function_\">fpower2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"built_in\">exp</span>, frac, u;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">-149</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( x &lt; <span class=\"number\">-126</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    frac = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) &gt;&gt; (<span class=\"number\">126</span> - x);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( x &lt; <span class=\"number\">126</span> )</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">127</span> + x;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">255</span>;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  u = <span class=\"built_in\">exp</span> &lt;&lt; <span class=\"number\">23</span> | frac;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u2f(u);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-40\">41.</h2>\n<ol type=\"1\">\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">is_nan</span><span class=\"params\">(float_bits f)</span> {<span class=\"keyword\">return</span> (((f &lt;&lt; <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">24</span>) == <span class=\"number\">0xff</span>) &amp;&amp; ((f &lt;&lt; <span class=\"number\">9</span>) != <span class=\"number\">0</span>);}</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">is_inf</span><span class=\"params\">(float_bits f)</span> {<span class=\"keyword\">return</span> (((f &lt;&lt; <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">24</span>) == <span class=\"number\">0xff</span>) &amp;&amp; ((f &lt;&lt; <span class=\"number\">9</span>) == <span class=\"number\">0</span>);}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_abs</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_nan(f))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f &amp; <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_neg</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_nan(f))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f ^ <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">get_in</span><span class=\"params\">(float_bits frac)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> out, lsb;</span><br><span class=\"line\">  out = frac &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">  lsb = (frac &amp; <span class=\"number\">2</span>) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (out == <span class=\"number\">1</span>) &amp;&amp; (lsb == <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">make_float</span><span class=\"params\">(float_bits sign, float_bits <span class=\"built_in\">exp</span>, float_bits frac, float_bits in)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((sign &lt;&lt; <span class=\"number\">31</span>) | (<span class=\"built_in\">exp</span> &lt;&lt; <span class=\"number\">23</span>) | frac) + in;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">split_float</span><span class=\"params\">(float_bits f, float_bits *sign, float_bits *<span class=\"built_in\">exp</span>, float_bits *frac)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  *<span class=\"built_in\">exp</span> = (f &amp; <span class=\"number\">0x7fffffff</span>) &gt;&gt; <span class=\"number\">23</span>;</span><br><span class=\"line\">  *frac = f &amp; <span class=\"number\">0x007fffff</span>;</span><br><span class=\"line\">  *sign = f &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_half</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, <span class=\"built_in\">exp</span>, frac;</span><br><span class=\"line\">  split_float(f, &amp;sign, &amp;<span class=\"built_in\">exp</span>, &amp;frac);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> in;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    in = get_in(frac);</span><br><span class=\"line\">    frac &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    frac = frac &amp; <span class=\"number\">0x00800000</span>;</span><br><span class=\"line\">    in = get_in(frac);</span><br><span class=\"line\">    frac &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &lt; <span class=\"number\">255</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> -= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_float(sign, <span class=\"built_in\">exp</span>, frac, in);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_twice</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, <span class=\"built_in\">exp</span>, frac;</span><br><span class=\"line\">  split_float(f, &amp;sign, &amp;<span class=\"built_in\">exp</span>, &amp;frac);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    frac &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((sign &lt;&lt; <span class=\"number\">31</span>) | frac);</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &lt; <span class=\"number\">254</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">254</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    frac = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_float(sign, <span class=\"built_in\">exp</span>, frac, <span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">split_int</span><span class=\"params\">(<span class=\"type\">int</span> i, float_bits *sign, float_bits *val)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> ui = i;</span><br><span class=\"line\">  *sign = ui &gt;&gt; <span class=\"number\">31</span>;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == *sign)</span><br><span class=\"line\">  *val = ui;</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">  *val = ~ui + <span class=\"number\">1</span>; </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">get_bits</span><span class=\"params\">(float_bits i)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"type\">int</span> bits_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    bits_num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    i &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> bits_num;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">get_in_nbits</span><span class=\"params\">(float_bits val, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits out, lsb;</span><br><span class=\"line\">  float_bits half = <span class=\"number\">1</span> &lt;&lt; (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  out = val &amp; (<span class=\"number\">0xffffffff</span> &gt;&gt; (<span class=\"number\">32</span> - n));</span><br><span class=\"line\">  lsb = (val &amp; (<span class=\"number\">0xffffffff</span> &gt;&gt; (<span class=\"number\">32</span> - n - <span class=\"number\">1</span>))) &gt;&gt; n;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (out &lt; half)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (out &gt; half)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lsb ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">float_bits <span class=\"title function_\">float_i2f</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, val;</span><br><span class=\"line\">  float_bits <span class=\"built_in\">exp</span>, frac, in;</span><br><span class=\"line\">  <span class=\"type\">int</span> bits_num;</span><br><span class=\"line\"></span><br><span class=\"line\">  split_int(i, &amp;sign, &amp;val);</span><br><span class=\"line\">  bits_num  = get_bits(val);</span><br><span class=\"line\">  <span class=\"comment\">/* printf(\"sign = %d, val = %d, bits_num = %d\\n\", sign, val, bits_num); */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bits_num &lt; <span class=\"number\">25</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">127</span> + bits_num - <span class=\"number\">1</span>;</span><br><span class=\"line\">    frac = (val &lt;&lt; (<span class=\"number\">24</span> - bits_num)) &amp; <span class=\"number\">0x007fffff</span>;</span><br><span class=\"line\">    in = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">    float_bits out_bits = bits_num - <span class=\"number\">24</span>;</span><br><span class=\"line\">    in = get_in_nbits(val, out_bits);</span><br><span class=\"line\">    <span class=\"built_in\">exp</span> = <span class=\"number\">127</span> + bits_num - <span class=\"number\">1</span>;</span><br><span class=\"line\">    frac = (val &gt;&gt; out_bits) &amp; <span class=\"number\">0x007fffff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_float(sign, <span class=\"built_in\">exp</span>, frac, in);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">make_int</span><span class=\"params\">(float_bits sign, float_bits val, float_bits in)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == sign)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val + in;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ~val + <span class=\"number\">1</span> + in;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">float_f2i</span><span class=\"params\">(float_bits f)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  float_bits sign, <span class=\"built_in\">exp</span>, frac;</span><br><span class=\"line\">  float_bits val, in;</span><br><span class=\"line\">  split_float(f, &amp;sign, &amp;<span class=\"built_in\">exp</span>, &amp;frac);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &gt; <span class=\"number\">30</span> + <span class=\"number\">127</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">exp</span> &gt; <span class=\"number\">22</span> + <span class=\"number\">127</span>)</span><br><span class=\"line\">  {</span><br><span class=\"line\">    val = (frac | <span class=\"number\">0x00800000</span>) &lt;&lt; (<span class=\"built_in\">exp</span> - <span class=\"number\">127</span> - <span class=\"number\">23</span>);</span><br><span class=\"line\">    in = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  {</span><br><span class=\"line\">    float_bits out_bits = <span class=\"number\">23</span> - (<span class=\"built_in\">exp</span> - <span class=\"number\">127</span>);</span><br><span class=\"line\">    val = frac | <span class=\"number\">0x00800000</span>;</span><br><span class=\"line\">    in = get_in_nbits(val, out_bits);</span><br><span class=\"line\">    val &gt;&gt;= out_bits;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> make_int(sign, val, in);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"计算机系统基础第四章习题","date":"2023-05-10T17:54:16.000Z","mathjax":true,"_content":"# 第四章\n\n## 1.\n**链接**: 将一个程序的所有关联模块对应的目标代码文件结合在一起, 以形成一个可执行文件的过程  \n**可重定位目标文件**: 对每个模块进行预处理、编译、汇编生成的二进制代码  \n**可执行目标文件**: 将若干可重定位目标文件(可能包括若干标准库函数目标模块)组合起来的二进制文件  \n**符号解析**: 将每个符号的引用与一个确定的符号定义建立关联  \n**重定位**: 重新确定代码和数据的地址并更新指令中被引用符号地址的工作\n**ELF目标文件格式**: 可执行可链接格式  \n**ELF头**: ELF头位于目标文件的起始位置, 包含文件结构说明信息   \n**节头表**: 节头表由若干个表项组成, 每个表项描述相应的一个节的节名、在文件中的偏移、大小、访问属性、对齐方式等, 目标文件中的每个节都有一个表项与之对应  \n**程序头表(段头表)**: 程序头表用于描述可执行文件中的代和属于与存储空间的映射, 一个表项对应一个连续的存储段或特殊节  \n**只读代码段**: 只读不可写  \n**可读写数据段**: 可读写\n**全局符号**: 包括非静态的函数名和被定义为不带static属性的全局变量名  \n**外部符号**: 在其他模块定义的外部函数名和外部变量名  \n**本地符号**: 带static属性的函数名和全局变量名  \n**强符号**: 函数名和已初始化的全局变量名是强符号  \n**弱符号**: 未初始化的全局变量名是弱符号  \n**多重定义符号**: 多次被定义的符号  \n**静态库**: 将多个目标模块打包成一个单独的库文件  \n**符号的定义**: 程序中的符号包括全局静态变量名和函数名, 他们在程序中可能出现在定义处  \n**符号的引用**: 出现在引用处  \n**未解析符号**: 还未与对应定义符号关联的引用符号  \n**重定位信息**: 在可重定位目标文件的`.rel.text`节和`.rel.data`节中, 存放着每个需重定位的符号的重定位信息\n**运行时堆**: 可读写数据段后面4KB对齐的高地址处, 通过调用malloc库函数动态向高地址分配空间  \n**用户栈**: 从用户空间的最大地址往低地址方向增长  \n**动态链接**: 在可执行目标文件装入或运行时被动态地装入内存并自动被链接  \n**共享库(目标)文件**: 其中记录了相应的代码、数据、重定位和符号表信息\n**位置无关代码(PIC)**: 共享库代码的加载位置可以是不确定的, 而且共享库代码的长度发生变化也不影响调用它的程序  \n**全局偏移量表(GOT)**: 设置在数据段起始处的用于存放全局变量地址的表  \n**延迟绑定**: 对于模块间过程的引用不在加载时进行重定位, 而是延迟到第一次函数调用时进行重定位  \n**过程链接表(PLT)**: PLT是.text节的一部分, 每个表项中实际上包含的是3条代码, 占16字节  \n\n## 2.\n(1) 链接可以将C语言源程序模块组合起来生成一个可执行目标文件. 从源程序到可执行及其代码的转换过程需要预处理、编译、汇编和链接. \n(2) 使用链接的第一个好处就是\"模块化\", 它能使一个程序被划分成多个模块, 由不同的程序员进行编写, 并且可以构建公共的函数库以提供给不同的程序进行重用. 采用链接的第二个好处是\"效率高\", 每个模块可以分开编译, 在程序修改时只需重新编译那些修改过的源程序文件, 然后再重新链接, 因而从时间上来说能够提高程序开发的效率; 同时, 因为源程序文件中无须包含共享库的所有代码, 只要直接调用即可, 而且在可执行文件运行时的内存中, 也只需要包含所调用函数的代码而不需要包含整个共享库, 所以链接也有效地提高了空间利用率.\n(3)\n与ELF可重定位目标文件格式相比, ELF可执行目标文件的不同点主要有: \n1. ELF头中的字段`e_entry`给出了系统将控制权转移到的起始虚拟地址(入口点), 即执行程序时第一条指令的地址. 而在可重定位文件中, 此字段为0.\n2. 通常情况下, 会带有一个`.init`节和一个`.fini`节, 其中`.init`节定义了一个`_init`函数, 用于可执行目标文件开始执行时的初始化工作, 当程序开始运行时, 系统会在进程进入主函数之前, 现执行这个节中的指令代码. `_fini`节中包含进程终止时要执行的指令代码, 当程序退出时, 系统会执行这个节中的指令代码.\n3. 少了`.rel.text`和`.rel.data`等重定位信息节. 因为可执行目标文件中的指令和数据已被重定位, 故可去掉用于重定位的节.\n4. 多了一个程序头表, 也称段头表, 他是一个结构数组. \n   \n(4) 符号解析和重定位\n(5) \n.text: 目标代码部分\n.rodata: 只读数据, 如printf语句中的格式串、开关语句(如switch-case)的跳转表等\n.data: 已初始化的全局变量\n.bss: 未初始化的全局变量\n(6) 同上\n(7) 可执行目标文件中有只读代码段和可读写数据段是可装入段. ELF头、程序头表、.init节、.fini节、.text节、.rodata节构成了只读代码段. .data节和.bss节构成了可读写数据段. \n(8) 程序头表\n(9) \n1. 引入统一的虚拟地址空间简化了链接器的设计和实现.\n2. 引入虚拟地址空间也简化了程序加载过程.\n\n(10) 共享库的动态链接有两个方面的特点: 一是\"共享性\", 二是\"动态性\".\n\n## 3.\n|符号|是否在`test.o`的符号表中|定义模块|符号类型|节|\n|-|-|-|-|-|\n|a|是|`main.o`|外部|`UND`|\n|val|是|`test.o`|全局|`.bss`|\n|sum|是|`test.o`|全局|`.text`|\n|i|否||||\n> 在linux32下`val = 0`则被分配在`.bss`中, 否则被分配在`.data`中.\n\n## 4.\n|符号|是否在`swap.o`的符号表中|定义模块|符号类型|节|\n|-|-|-|-|-|\n|buf|是|`main.o`|外部|`UND`|\n|bufp0|是|`swap.o`|全局|`.data`|\n|bufp1|是|`swap.o`|本地|`.bss`|\n|incr|是|`swap.o`|本地|`.text`|\n|count|是|`swap.o`|本地|`.bss`|\n|swap|是|`swap.o`|全局|`.text`|\n|temp|否||||\n> 经过变成发现`bufp0`的节是`.data.rel`\n\n## 5.\n(1) 在`main.c`中, x, z, main为强符号, y, proc1是弱符号; 在`proc1.c`中, proc1为强符号, x为弱符号.\n(2) `x=0, z=0`\nproc1()函数调c用前\n|地址|内容|\n|-|-|\n|&x|257|\n|&z|2|\nproc()函数调用后\n|地址|内容|\n|-|-|\n|&x|0|\n|&z|0|\n`x=0, z=-16392`\n(3)\n```C\n/* 1 */\nunsigned x;\n\nvoid proc1()\n{\n    x = 257;\n}\n\n/* 2 */\ndouble x;\n\nvoid proc1()\n{\n    x = 1.0000019073486899;\n}\n```\n## 6.\n(1)\n1. REF(m1.main)&rarr;DEF(m1.main)\n2. REF(m2.main)&rarr;DEF(m2.main)\n3. 链接错误, p1不是函数指针\n4. REF(m2.p1)&rarr;DEF(m2.p1)\n\n(2)\n1. 链接错误, `m1.c`和`m2.c`中的main都为强定义\n2. 链接错误, `m1.c`和`m2.c`中的main都为强定义\n3. 链接错误, `m1.c`和`m2.c`中的x都为强定义\n\n(3)\n1. RFF(m1.main)&rarr;DEF(m1.main)\n2. REF(m2.main)&rarr;DEF(m1.main)\n3. 链接错误, 在`m1.c`中重复定义p1\n4. 不存在关联\n5. REF(m2.x)&rarr;DEF(m2.x)\n\n(4)\n1. REF(m1.x)&rarr;DEF(m2.x)\n2. REF(m2.x)&rarr;DEF(m2.x)\n3. REF(m1.y)&rarr;DEF(m1.y);DEF(m2.y)\n4. RED(m2.y)&rarr;DEF(m1.y);DEF(m2.y)\n\n## 7.\n`m2.c`中的`main`为弱类型, 因此它指向了`m1.c`中的main函数.\n\n## 8.\n其中的28字节用于储存未初始化的局部变量的`.bss`节\n\n## 9.\n`gcc -static -o p p.o libx.a liby.a`\n`gcc -static -o p p.o liby.a libx.a liby.a`\n`gcc -static -o p p.o libx.a liby.a libx.a libz.a`\n\n## 10.\n符号名:`swap`\n相对于`.text`节起始位置的位移: `0x7`\n所在指令行号: `6`\n重定位类型: `R_386_PC32`重定位类型\n重定位前内容: `0xfffffffc`, `-4`\n重定位后内容: `0x00000009`, `9`\n计算过程: `0x8048384 - (0x8048386 + 0x7 - (-4))`\n\n## 11.\n|序号|符号|位移|指令所在行号|重定位类型|重定位前内容|重定位后内容|\n|-|-|-|-|-|-|-|\n|1|bufp1(.bss)|0x8|6~7|R_386_32|0x00000000|0x8049620|\n|2|buf|0xc|6~7|R_386_32|0x00000000|0x80495cc|\n|3|bufp0|0x11|10|R_386_32|0x00000000|0x80495d0|\n|4|bufp0|0x1b|14|R_386_32|0x00000000|0x80495d0|\n|5|bufp1|0x21|16|R_386_32|0x00000000|0x8049620|\n|6|bufp1|0x2a|29|R_386_32|0x00000000|0x8049620|\n","source":"_posts/计算机系统基础第四章习题.md","raw":"---\ntitle: 计算机系统基础第四章习题\ndate: 2023-05-11 01:54:16\nmathjax: true\ncategories:\n    - 计算机\ntags:\n    - 计算机系统基础\n---\n# 第四章\n\n## 1.\n**链接**: 将一个程序的所有关联模块对应的目标代码文件结合在一起, 以形成一个可执行文件的过程  \n**可重定位目标文件**: 对每个模块进行预处理、编译、汇编生成的二进制代码  \n**可执行目标文件**: 将若干可重定位目标文件(可能包括若干标准库函数目标模块)组合起来的二进制文件  \n**符号解析**: 将每个符号的引用与一个确定的符号定义建立关联  \n**重定位**: 重新确定代码和数据的地址并更新指令中被引用符号地址的工作\n**ELF目标文件格式**: 可执行可链接格式  \n**ELF头**: ELF头位于目标文件的起始位置, 包含文件结构说明信息   \n**节头表**: 节头表由若干个表项组成, 每个表项描述相应的一个节的节名、在文件中的偏移、大小、访问属性、对齐方式等, 目标文件中的每个节都有一个表项与之对应  \n**程序头表(段头表)**: 程序头表用于描述可执行文件中的代和属于与存储空间的映射, 一个表项对应一个连续的存储段或特殊节  \n**只读代码段**: 只读不可写  \n**可读写数据段**: 可读写\n**全局符号**: 包括非静态的函数名和被定义为不带static属性的全局变量名  \n**外部符号**: 在其他模块定义的外部函数名和外部变量名  \n**本地符号**: 带static属性的函数名和全局变量名  \n**强符号**: 函数名和已初始化的全局变量名是强符号  \n**弱符号**: 未初始化的全局变量名是弱符号  \n**多重定义符号**: 多次被定义的符号  \n**静态库**: 将多个目标模块打包成一个单独的库文件  \n**符号的定义**: 程序中的符号包括全局静态变量名和函数名, 他们在程序中可能出现在定义处  \n**符号的引用**: 出现在引用处  \n**未解析符号**: 还未与对应定义符号关联的引用符号  \n**重定位信息**: 在可重定位目标文件的`.rel.text`节和`.rel.data`节中, 存放着每个需重定位的符号的重定位信息\n**运行时堆**: 可读写数据段后面4KB对齐的高地址处, 通过调用malloc库函数动态向高地址分配空间  \n**用户栈**: 从用户空间的最大地址往低地址方向增长  \n**动态链接**: 在可执行目标文件装入或运行时被动态地装入内存并自动被链接  \n**共享库(目标)文件**: 其中记录了相应的代码、数据、重定位和符号表信息\n**位置无关代码(PIC)**: 共享库代码的加载位置可以是不确定的, 而且共享库代码的长度发生变化也不影响调用它的程序  \n**全局偏移量表(GOT)**: 设置在数据段起始处的用于存放全局变量地址的表  \n**延迟绑定**: 对于模块间过程的引用不在加载时进行重定位, 而是延迟到第一次函数调用时进行重定位  \n**过程链接表(PLT)**: PLT是.text节的一部分, 每个表项中实际上包含的是3条代码, 占16字节  \n\n## 2.\n(1) 链接可以将C语言源程序模块组合起来生成一个可执行目标文件. 从源程序到可执行及其代码的转换过程需要预处理、编译、汇编和链接. \n(2) 使用链接的第一个好处就是\"模块化\", 它能使一个程序被划分成多个模块, 由不同的程序员进行编写, 并且可以构建公共的函数库以提供给不同的程序进行重用. 采用链接的第二个好处是\"效率高\", 每个模块可以分开编译, 在程序修改时只需重新编译那些修改过的源程序文件, 然后再重新链接, 因而从时间上来说能够提高程序开发的效率; 同时, 因为源程序文件中无须包含共享库的所有代码, 只要直接调用即可, 而且在可执行文件运行时的内存中, 也只需要包含所调用函数的代码而不需要包含整个共享库, 所以链接也有效地提高了空间利用率.\n(3)\n与ELF可重定位目标文件格式相比, ELF可执行目标文件的不同点主要有: \n1. ELF头中的字段`e_entry`给出了系统将控制权转移到的起始虚拟地址(入口点), 即执行程序时第一条指令的地址. 而在可重定位文件中, 此字段为0.\n2. 通常情况下, 会带有一个`.init`节和一个`.fini`节, 其中`.init`节定义了一个`_init`函数, 用于可执行目标文件开始执行时的初始化工作, 当程序开始运行时, 系统会在进程进入主函数之前, 现执行这个节中的指令代码. `_fini`节中包含进程终止时要执行的指令代码, 当程序退出时, 系统会执行这个节中的指令代码.\n3. 少了`.rel.text`和`.rel.data`等重定位信息节. 因为可执行目标文件中的指令和数据已被重定位, 故可去掉用于重定位的节.\n4. 多了一个程序头表, 也称段头表, 他是一个结构数组. \n   \n(4) 符号解析和重定位\n(5) \n.text: 目标代码部分\n.rodata: 只读数据, 如printf语句中的格式串、开关语句(如switch-case)的跳转表等\n.data: 已初始化的全局变量\n.bss: 未初始化的全局变量\n(6) 同上\n(7) 可执行目标文件中有只读代码段和可读写数据段是可装入段. ELF头、程序头表、.init节、.fini节、.text节、.rodata节构成了只读代码段. .data节和.bss节构成了可读写数据段. \n(8) 程序头表\n(9) \n1. 引入统一的虚拟地址空间简化了链接器的设计和实现.\n2. 引入虚拟地址空间也简化了程序加载过程.\n\n(10) 共享库的动态链接有两个方面的特点: 一是\"共享性\", 二是\"动态性\".\n\n## 3.\n|符号|是否在`test.o`的符号表中|定义模块|符号类型|节|\n|-|-|-|-|-|\n|a|是|`main.o`|外部|`UND`|\n|val|是|`test.o`|全局|`.bss`|\n|sum|是|`test.o`|全局|`.text`|\n|i|否||||\n> 在linux32下`val = 0`则被分配在`.bss`中, 否则被分配在`.data`中.\n\n## 4.\n|符号|是否在`swap.o`的符号表中|定义模块|符号类型|节|\n|-|-|-|-|-|\n|buf|是|`main.o`|外部|`UND`|\n|bufp0|是|`swap.o`|全局|`.data`|\n|bufp1|是|`swap.o`|本地|`.bss`|\n|incr|是|`swap.o`|本地|`.text`|\n|count|是|`swap.o`|本地|`.bss`|\n|swap|是|`swap.o`|全局|`.text`|\n|temp|否||||\n> 经过变成发现`bufp0`的节是`.data.rel`\n\n## 5.\n(1) 在`main.c`中, x, z, main为强符号, y, proc1是弱符号; 在`proc1.c`中, proc1为强符号, x为弱符号.\n(2) `x=0, z=0`\nproc1()函数调c用前\n|地址|内容|\n|-|-|\n|&x|257|\n|&z|2|\nproc()函数调用后\n|地址|内容|\n|-|-|\n|&x|0|\n|&z|0|\n`x=0, z=-16392`\n(3)\n```C\n/* 1 */\nunsigned x;\n\nvoid proc1()\n{\n    x = 257;\n}\n\n/* 2 */\ndouble x;\n\nvoid proc1()\n{\n    x = 1.0000019073486899;\n}\n```\n## 6.\n(1)\n1. REF(m1.main)&rarr;DEF(m1.main)\n2. REF(m2.main)&rarr;DEF(m2.main)\n3. 链接错误, p1不是函数指针\n4. REF(m2.p1)&rarr;DEF(m2.p1)\n\n(2)\n1. 链接错误, `m1.c`和`m2.c`中的main都为强定义\n2. 链接错误, `m1.c`和`m2.c`中的main都为强定义\n3. 链接错误, `m1.c`和`m2.c`中的x都为强定义\n\n(3)\n1. RFF(m1.main)&rarr;DEF(m1.main)\n2. REF(m2.main)&rarr;DEF(m1.main)\n3. 链接错误, 在`m1.c`中重复定义p1\n4. 不存在关联\n5. REF(m2.x)&rarr;DEF(m2.x)\n\n(4)\n1. REF(m1.x)&rarr;DEF(m2.x)\n2. REF(m2.x)&rarr;DEF(m2.x)\n3. REF(m1.y)&rarr;DEF(m1.y);DEF(m2.y)\n4. RED(m2.y)&rarr;DEF(m1.y);DEF(m2.y)\n\n## 7.\n`m2.c`中的`main`为弱类型, 因此它指向了`m1.c`中的main函数.\n\n## 8.\n其中的28字节用于储存未初始化的局部变量的`.bss`节\n\n## 9.\n`gcc -static -o p p.o libx.a liby.a`\n`gcc -static -o p p.o liby.a libx.a liby.a`\n`gcc -static -o p p.o libx.a liby.a libx.a libz.a`\n\n## 10.\n符号名:`swap`\n相对于`.text`节起始位置的位移: `0x7`\n所在指令行号: `6`\n重定位类型: `R_386_PC32`重定位类型\n重定位前内容: `0xfffffffc`, `-4`\n重定位后内容: `0x00000009`, `9`\n计算过程: `0x8048384 - (0x8048386 + 0x7 - (-4))`\n\n## 11.\n|序号|符号|位移|指令所在行号|重定位类型|重定位前内容|重定位后内容|\n|-|-|-|-|-|-|-|\n|1|bufp1(.bss)|0x8|6~7|R_386_32|0x00000000|0x8049620|\n|2|buf|0xc|6~7|R_386_32|0x00000000|0x80495cc|\n|3|bufp0|0x11|10|R_386_32|0x00000000|0x80495d0|\n|4|bufp0|0x1b|14|R_386_32|0x00000000|0x80495d0|\n|5|bufp1|0x21|16|R_386_32|0x00000000|0x8049620|\n|6|bufp1|0x2a|29|R_386_32|0x00000000|0x8049620|\n","slug":"计算机系统基础第四章习题","published":1,"updated":"2023-05-13T07:58:20.491Z","_id":"clhj8pre8000amaqh8bchdt7s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第四章\">第四章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>链接</strong>:\n将一个程序的所有关联模块对应的目标代码文件结合在一起,\n以形成一个可执行文件的过程<br>\n<strong>可重定位目标文件</strong>:\n对每个模块进行预处理、编译、汇编生成的二进制代码<br>\n<strong>可执行目标文件</strong>:\n将若干可重定位目标文件(可能包括若干标准库函数目标模块)组合起来的二进制文件<br>\n<strong>符号解析</strong>:\n将每个符号的引用与一个确定的符号定义建立关联<br>\n<strong>重定位</strong>:\n重新确定代码和数据的地址并更新指令中被引用符号地址的工作\n<strong>ELF目标文件格式</strong>: 可执行可链接格式<br>\n<strong>ELF头</strong>: ELF头位于目标文件的起始位置,\n包含文件结构说明信息<br>\n<strong>节头表</strong>: 节头表由若干个表项组成,\n每个表项描述相应的一个节的节名、在文件中的偏移、大小、访问属性、对齐方式等,\n目标文件中的每个节都有一个表项与之对应<br>\n<strong>程序头表(段头表)</strong>:\n程序头表用于描述可执行文件中的代和属于与存储空间的映射,\n一个表项对应一个连续的存储段或特殊节<br>\n<strong>只读代码段</strong>: 只读不可写<br>\n<strong>可读写数据段</strong>: 可读写 <strong>全局符号</strong>:\n包括非静态的函数名和被定义为不带static属性的全局变量名<br>\n<strong>外部符号</strong>: 在其他模块定义的外部函数名和外部变量名<br>\n<strong>本地符号</strong>: 带static属性的函数名和全局变量名<br>\n<strong>强符号</strong>: 函数名和已初始化的全局变量名是强符号<br>\n<strong>弱符号</strong>: 未初始化的全局变量名是弱符号<br>\n<strong>多重定义符号</strong>: 多次被定义的符号<br>\n<strong>静态库</strong>: 将多个目标模块打包成一个单独的库文件<br>\n<strong>符号的定义</strong>: 程序中的符号包括全局静态变量名和函数名,\n他们在程序中可能出现在定义处<br>\n<strong>符号的引用</strong>: 出现在引用处<br>\n<strong>未解析符号</strong>: 还未与对应定义符号关联的引用符号<br>\n<strong>重定位信息</strong>:\n在可重定位目标文件的<code>.rel.text</code>节和<code>.rel.data</code>节中,\n存放着每个需重定位的符号的重定位信息 <strong>运行时堆</strong>:\n可读写数据段后面4KB对齐的高地址处,\n通过调用malloc库函数动态向高地址分配空间<br>\n<strong>用户栈</strong>: 从用户空间的最大地址往低地址方向增长<br>\n<strong>动态链接</strong>:\n在可执行目标文件装入或运行时被动态地装入内存并自动被链接<br>\n<strong>共享库(目标)文件</strong>:\n其中记录了相应的代码、数据、重定位和符号表信息\n<strong>位置无关代码(PIC)</strong>: 共享库代码的加载位置可以是不确定的,\n而且共享库代码的长度发生变化也不影响调用它的程序<br>\n<strong>全局偏移量表(GOT)</strong>:\n设置在数据段起始处的用于存放全局变量地址的表<br>\n<strong>延迟绑定</strong>: 对于模块间过程的引用不在加载时进行重定位,\n而是延迟到第一次函数调用时进行重定位<br>\n<strong>过程链接表(PLT)</strong>: PLT是.text节的一部分,\n每个表项中实际上包含的是3条代码, 占16字节</p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>链接可以将C语言源程序模块组合起来生成一个可执行目标文件.\n从源程序到可执行及其代码的转换过程需要预处理、编译、汇编和链接.</li>\n<li>使用链接的第一个好处就是\"模块化\", 它能使一个程序被划分成多个模块,\n由不同的程序员进行编写,\n并且可以构建公共的函数库以提供给不同的程序进行重用.\n采用链接的第二个好处是\"效率高\", 每个模块可以分开编译,\n在程序修改时只需重新编译那些修改过的源程序文件, 然后再重新链接,\n因而从时间上来说能够提高程序开发的效率; 同时,\n因为源程序文件中无须包含共享库的所有代码, 只要直接调用即可,\n而且在可执行文件运行时的内存中,\n也只需要包含所调用函数的代码而不需要包含整个共享库,\n所以链接也有效地提高了空间利用率.</li>\n<li>与ELF可重定位目标文件格式相比, ELF可执行目标文件的不同点主要有:</li>\n</ol>\n<ol type=\"1\">\n<li>ELF头中的字段<code>e_entry</code>给出了系统将控制权转移到的起始虚拟地址(入口点),\n即执行程序时第一条指令的地址. 而在可重定位文件中, 此字段为0.</li>\n<li>通常情况下,\n会带有一个<code>.init</code>节和一个<code>.fini</code>节,\n其中<code>.init</code>节定义了一个<code>_init</code>函数,\n用于可执行目标文件开始执行时的初始化工作, 当程序开始运行时,\n系统会在进程进入主函数之前, 现执行这个节中的指令代码.\n<code>_fini</code>节中包含进程终止时要执行的指令代码, 当程序退出时,\n系统会执行这个节中的指令代码.</li>\n<li>少了<code>.rel.text</code>和<code>.rel.data</code>等重定位信息节.\n因为可执行目标文件中的指令和数据已被重定位, 故可去掉用于重定位的节.</li>\n<li>多了一个程序头表, 也称段头表, 他是一个结构数组.</li>\n</ol>\n<ol start=\"4\" type=\"1\">\n<li>符号解析和重定位</li>\n<li>.text: 目标代码部分 .rodata: 只读数据,\n如printf语句中的格式串、开关语句(如switch-case)的跳转表等 .data:\n已初始化的全局变量 .bss: 未初始化的全局变量</li>\n<li>同上</li>\n<li>可执行目标文件中有只读代码段和可读写数据段是可装入段.\nELF头、程序头表、.init节、.fini节、.text节、.rodata节构成了只读代码段.\n.data节和.bss节构成了可读写数据段.</li>\n<li>程序头表</li>\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>引入统一的虚拟地址空间简化了链接器的设计和实现.</li>\n<li>引入虚拟地址空间也简化了程序加载过程.</li>\n</ol>\n<ol start=\"10\" type=\"1\">\n<li>共享库的动态链接有两个方面的特点: 一是\"共享性\", 二是\"动态性\".</li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>符号</th>\n<th>是否在<code>test.o</code>的符号表中</th>\n<th>定义模块</th>\n<th>符号类型</th>\n<th>节</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>a</td>\n<td>是</td>\n<td><code>main.o</code></td>\n<td>外部</td>\n<td><code>UND</code></td>\n</tr>\n<tr class=\"even\">\n<td>val</td>\n<td>是</td>\n<td><code>test.o</code></td>\n<td>全局</td>\n<td><code>.bss</code></td>\n</tr>\n<tr class=\"odd\">\n<td>sum</td>\n<td>是</td>\n<td><code>test.o</code></td>\n<td>全局</td>\n<td><code>.text</code></td>\n</tr>\n<tr class=\"even\">\n<td>i</td>\n<td>否</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在linux32下<code>val = 0</code>则被分配在<code>.bss</code>中,\n否则被分配在<code>.data</code>中.</p>\n</blockquote>\n<h2 id=\"section-3\">4.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>符号</th>\n<th>是否在<code>swap.o</code>的符号表中</th>\n<th>定义模块</th>\n<th>符号类型</th>\n<th>节</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>buf</td>\n<td>是</td>\n<td><code>main.o</code></td>\n<td>外部</td>\n<td><code>UND</code></td>\n</tr>\n<tr class=\"even\">\n<td>bufp0</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>全局</td>\n<td><code>.data</code></td>\n</tr>\n<tr class=\"odd\">\n<td>bufp1</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>本地</td>\n<td><code>.bss</code></td>\n</tr>\n<tr class=\"even\">\n<td>incr</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>本地</td>\n<td><code>.text</code></td>\n</tr>\n<tr class=\"odd\">\n<td>count</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>本地</td>\n<td><code>.bss</code></td>\n</tr>\n<tr class=\"even\">\n<td>swap</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>全局</td>\n<td><code>.text</code></td>\n</tr>\n<tr class=\"odd\">\n<td>temp</td>\n<td>否</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>经过变成发现<code>bufp0</code>的节是<code>.data.rel</code></p>\n</blockquote>\n<h2 id=\"section-4\">5.</h2>\n<ol type=\"1\">\n<li>在<code>main.c</code>中, x, z, main为强符号, y, proc1是弱符号;\n在<code>proc1.c</code>中, proc1为强符号, x为弱符号.</li>\n<li><code>x=0, z=0</code> proc1()函数调c用前 |地址|内容| |-|-|\n|&amp;x|257| |&amp;z|2| proc()函数调用后 |地址|内容| |-|-| |&amp;x|0|\n|&amp;z|0| <code>x=0, z=-16392</code></li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">proc1</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    x = <span class=\"number\">257</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"><span class=\"type\">double</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">proc1</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    x = <span class=\"number\">1.0000019073486899</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-5\">6.</h2></li>\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>REF(m1.main)→DEF(m1.main)</li>\n<li>REF(m2.main)→DEF(m2.main)</li>\n<li>链接错误, p1不是函数指针</li>\n<li>REF(m2.p1)→DEF(m2.p1)</li>\n</ol>\n<ol start=\"2\" type=\"1\">\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>链接错误,\n<code>m1.c</code>和<code>m2.c</code>中的main都为强定义</li>\n<li>链接错误,\n<code>m1.c</code>和<code>m2.c</code>中的main都为强定义</li>\n<li>链接错误, <code>m1.c</code>和<code>m2.c</code>中的x都为强定义</li>\n</ol>\n<ol start=\"3\" type=\"1\">\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>RFF(m1.main)→DEF(m1.main)</li>\n<li>REF(m2.main)→DEF(m1.main)</li>\n<li>链接错误, 在<code>m1.c</code>中重复定义p1</li>\n<li>不存在关联</li>\n<li>REF(m2.x)→DEF(m2.x)</li>\n</ol>\n<ol start=\"4\" type=\"1\">\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>REF(m1.x)→DEF(m2.x)</li>\n<li>REF(m2.x)→DEF(m2.x)</li>\n<li>REF(m1.y)→DEF(m1.y);DEF(m2.y)</li>\n<li>RED(m2.y)→DEF(m1.y);DEF(m2.y)</li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<p><code>m2.c</code>中的<code>main</code>为弱类型,\n因此它指向了<code>m1.c</code>中的main函数.</p>\n<h2 id=\"section-7\">8.</h2>\n<p>其中的28字节用于储存未初始化的局部变量的<code>.bss</code>节</p>\n<h2 id=\"section-8\">9.</h2>\n<p><code>gcc -static -o p p.o libx.a liby.a</code>\n<code>gcc -static -o p p.o liby.a libx.a liby.a</code>\n<code>gcc -static -o p p.o libx.a liby.a libx.a libz.a</code></p>\n<h2 id=\"section-9\">10.</h2>\n<p>符号名:<code>swap</code> 相对于<code>.text</code>节起始位置的位移:\n<code>0x7</code> 所在指令行号: <code>6</code> 重定位类型:\n<code>R_386_PC32</code>重定位类型 重定位前内容: <code>0xfffffffc</code>,\n<code>-4</code> 重定位后内容: <code>0x00000009</code>, <code>9</code>\n计算过程: <code>0x8048384 - (0x8048386 + 0x7 - (-4))</code></p>\n<h2 id=\"section-10\">11.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>符号</th>\n<th>位移</th>\n<th>指令所在行号</th>\n<th>重定位类型</th>\n<th>重定位前内容</th>\n<th>重定位后内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>bufp1(.bss)</td>\n<td>0x8</td>\n<td>6~7</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x8049620</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>buf</td>\n<td>0xc</td>\n<td>6~7</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x80495cc</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>bufp0</td>\n<td>0x11</td>\n<td>10</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x80495d0</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>bufp0</td>\n<td>0x1b</td>\n<td>14</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x80495d0</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>bufp1</td>\n<td>0x21</td>\n<td>16</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x8049620</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>bufp1</td>\n<td>0x2a</td>\n<td>29</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x8049620</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第四章\">第四章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>链接</strong>:\n将一个程序的所有关联模块对应的目标代码文件结合在一起,\n以形成一个可执行文件的过程<br>\n<strong>可重定位目标文件</strong>:\n对每个模块进行预处理、编译、汇编生成的二进制代码<br>\n<strong>可执行目标文件</strong>:\n将若干可重定位目标文件(可能包括若干标准库函数目标模块)组合起来的二进制文件<br>\n<strong>符号解析</strong>:\n将每个符号的引用与一个确定的符号定义建立关联<br>\n<strong>重定位</strong>:\n重新确定代码和数据的地址并更新指令中被引用符号地址的工作\n<strong>ELF目标文件格式</strong>: 可执行可链接格式<br>\n<strong>ELF头</strong>: ELF头位于目标文件的起始位置,\n包含文件结构说明信息<br>\n<strong>节头表</strong>: 节头表由若干个表项组成,\n每个表项描述相应的一个节的节名、在文件中的偏移、大小、访问属性、对齐方式等,\n目标文件中的每个节都有一个表项与之对应<br>\n<strong>程序头表(段头表)</strong>:\n程序头表用于描述可执行文件中的代和属于与存储空间的映射,\n一个表项对应一个连续的存储段或特殊节<br>\n<strong>只读代码段</strong>: 只读不可写<br>\n<strong>可读写数据段</strong>: 可读写 <strong>全局符号</strong>:\n包括非静态的函数名和被定义为不带static属性的全局变量名<br>\n<strong>外部符号</strong>: 在其他模块定义的外部函数名和外部变量名<br>\n<strong>本地符号</strong>: 带static属性的函数名和全局变量名<br>\n<strong>强符号</strong>: 函数名和已初始化的全局变量名是强符号<br>\n<strong>弱符号</strong>: 未初始化的全局变量名是弱符号<br>\n<strong>多重定义符号</strong>: 多次被定义的符号<br>\n<strong>静态库</strong>: 将多个目标模块打包成一个单独的库文件<br>\n<strong>符号的定义</strong>: 程序中的符号包括全局静态变量名和函数名,\n他们在程序中可能出现在定义处<br>\n<strong>符号的引用</strong>: 出现在引用处<br>\n<strong>未解析符号</strong>: 还未与对应定义符号关联的引用符号<br>\n<strong>重定位信息</strong>:\n在可重定位目标文件的<code>.rel.text</code>节和<code>.rel.data</code>节中,\n存放着每个需重定位的符号的重定位信息 <strong>运行时堆</strong>:\n可读写数据段后面4KB对齐的高地址处,\n通过调用malloc库函数动态向高地址分配空间<br>\n<strong>用户栈</strong>: 从用户空间的最大地址往低地址方向增长<br>\n<strong>动态链接</strong>:\n在可执行目标文件装入或运行时被动态地装入内存并自动被链接<br>\n<strong>共享库(目标)文件</strong>:\n其中记录了相应的代码、数据、重定位和符号表信息\n<strong>位置无关代码(PIC)</strong>: 共享库代码的加载位置可以是不确定的,\n而且共享库代码的长度发生变化也不影响调用它的程序<br>\n<strong>全局偏移量表(GOT)</strong>:\n设置在数据段起始处的用于存放全局变量地址的表<br>\n<strong>延迟绑定</strong>: 对于模块间过程的引用不在加载时进行重定位,\n而是延迟到第一次函数调用时进行重定位<br>\n<strong>过程链接表(PLT)</strong>: PLT是.text节的一部分,\n每个表项中实际上包含的是3条代码, 占16字节</p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>链接可以将C语言源程序模块组合起来生成一个可执行目标文件.\n从源程序到可执行及其代码的转换过程需要预处理、编译、汇编和链接.</li>\n<li>使用链接的第一个好处就是\"模块化\", 它能使一个程序被划分成多个模块,\n由不同的程序员进行编写,\n并且可以构建公共的函数库以提供给不同的程序进行重用.\n采用链接的第二个好处是\"效率高\", 每个模块可以分开编译,\n在程序修改时只需重新编译那些修改过的源程序文件, 然后再重新链接,\n因而从时间上来说能够提高程序开发的效率; 同时,\n因为源程序文件中无须包含共享库的所有代码, 只要直接调用即可,\n而且在可执行文件运行时的内存中,\n也只需要包含所调用函数的代码而不需要包含整个共享库,\n所以链接也有效地提高了空间利用率.</li>\n<li>与ELF可重定位目标文件格式相比, ELF可执行目标文件的不同点主要有:</li>\n</ol>\n<ol type=\"1\">\n<li>ELF头中的字段<code>e_entry</code>给出了系统将控制权转移到的起始虚拟地址(入口点),\n即执行程序时第一条指令的地址. 而在可重定位文件中, 此字段为0.</li>\n<li>通常情况下,\n会带有一个<code>.init</code>节和一个<code>.fini</code>节,\n其中<code>.init</code>节定义了一个<code>_init</code>函数,\n用于可执行目标文件开始执行时的初始化工作, 当程序开始运行时,\n系统会在进程进入主函数之前, 现执行这个节中的指令代码.\n<code>_fini</code>节中包含进程终止时要执行的指令代码, 当程序退出时,\n系统会执行这个节中的指令代码.</li>\n<li>少了<code>.rel.text</code>和<code>.rel.data</code>等重定位信息节.\n因为可执行目标文件中的指令和数据已被重定位, 故可去掉用于重定位的节.</li>\n<li>多了一个程序头表, 也称段头表, 他是一个结构数组.</li>\n</ol>\n<ol start=\"4\" type=\"1\">\n<li>符号解析和重定位</li>\n<li>.text: 目标代码部分 .rodata: 只读数据,\n如printf语句中的格式串、开关语句(如switch-case)的跳转表等 .data:\n已初始化的全局变量 .bss: 未初始化的全局变量</li>\n<li>同上</li>\n<li>可执行目标文件中有只读代码段和可读写数据段是可装入段.\nELF头、程序头表、.init节、.fini节、.text节、.rodata节构成了只读代码段.\n.data节和.bss节构成了可读写数据段.</li>\n<li>程序头表</li>\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>引入统一的虚拟地址空间简化了链接器的设计和实现.</li>\n<li>引入虚拟地址空间也简化了程序加载过程.</li>\n</ol>\n<ol start=\"10\" type=\"1\">\n<li>共享库的动态链接有两个方面的特点: 一是\"共享性\", 二是\"动态性\".</li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>符号</th>\n<th>是否在<code>test.o</code>的符号表中</th>\n<th>定义模块</th>\n<th>符号类型</th>\n<th>节</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>a</td>\n<td>是</td>\n<td><code>main.o</code></td>\n<td>外部</td>\n<td><code>UND</code></td>\n</tr>\n<tr class=\"even\">\n<td>val</td>\n<td>是</td>\n<td><code>test.o</code></td>\n<td>全局</td>\n<td><code>.bss</code></td>\n</tr>\n<tr class=\"odd\">\n<td>sum</td>\n<td>是</td>\n<td><code>test.o</code></td>\n<td>全局</td>\n<td><code>.text</code></td>\n</tr>\n<tr class=\"even\">\n<td>i</td>\n<td>否</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在linux32下<code>val = 0</code>则被分配在<code>.bss</code>中,\n否则被分配在<code>.data</code>中.</p>\n</blockquote>\n<h2 id=\"section-3\">4.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>符号</th>\n<th>是否在<code>swap.o</code>的符号表中</th>\n<th>定义模块</th>\n<th>符号类型</th>\n<th>节</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>buf</td>\n<td>是</td>\n<td><code>main.o</code></td>\n<td>外部</td>\n<td><code>UND</code></td>\n</tr>\n<tr class=\"even\">\n<td>bufp0</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>全局</td>\n<td><code>.data</code></td>\n</tr>\n<tr class=\"odd\">\n<td>bufp1</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>本地</td>\n<td><code>.bss</code></td>\n</tr>\n<tr class=\"even\">\n<td>incr</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>本地</td>\n<td><code>.text</code></td>\n</tr>\n<tr class=\"odd\">\n<td>count</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>本地</td>\n<td><code>.bss</code></td>\n</tr>\n<tr class=\"even\">\n<td>swap</td>\n<td>是</td>\n<td><code>swap.o</code></td>\n<td>全局</td>\n<td><code>.text</code></td>\n</tr>\n<tr class=\"odd\">\n<td>temp</td>\n<td>否</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>经过变成发现<code>bufp0</code>的节是<code>.data.rel</code></p>\n</blockquote>\n<h2 id=\"section-4\">5.</h2>\n<ol type=\"1\">\n<li>在<code>main.c</code>中, x, z, main为强符号, y, proc1是弱符号;\n在<code>proc1.c</code>中, proc1为强符号, x为弱符号.</li>\n<li><code>x=0, z=0</code> proc1()函数调c用前 |地址|内容| |-|-|\n|&amp;x|257| |&amp;z|2| proc()函数调用后 |地址|内容| |-|-| |&amp;x|0|\n|&amp;z|0| <code>x=0, z=-16392</code></li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">proc1</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    x = <span class=\"number\">257</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"><span class=\"type\">double</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">proc1</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    x = <span class=\"number\">1.0000019073486899</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"section-5\">6.</h2></li>\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>REF(m1.main)→DEF(m1.main)</li>\n<li>REF(m2.main)→DEF(m2.main)</li>\n<li>链接错误, p1不是函数指针</li>\n<li>REF(m2.p1)→DEF(m2.p1)</li>\n</ol>\n<ol start=\"2\" type=\"1\">\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>链接错误,\n<code>m1.c</code>和<code>m2.c</code>中的main都为强定义</li>\n<li>链接错误,\n<code>m1.c</code>和<code>m2.c</code>中的main都为强定义</li>\n<li>链接错误, <code>m1.c</code>和<code>m2.c</code>中的x都为强定义</li>\n</ol>\n<ol start=\"3\" type=\"1\">\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>RFF(m1.main)→DEF(m1.main)</li>\n<li>REF(m2.main)→DEF(m1.main)</li>\n<li>链接错误, 在<code>m1.c</code>中重复定义p1</li>\n<li>不存在关联</li>\n<li>REF(m2.x)→DEF(m2.x)</li>\n</ol>\n<ol start=\"4\" type=\"1\">\n<li></li>\n</ol>\n<ol type=\"1\">\n<li>REF(m1.x)→DEF(m2.x)</li>\n<li>REF(m2.x)→DEF(m2.x)</li>\n<li>REF(m1.y)→DEF(m1.y);DEF(m2.y)</li>\n<li>RED(m2.y)→DEF(m1.y);DEF(m2.y)</li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<p><code>m2.c</code>中的<code>main</code>为弱类型,\n因此它指向了<code>m1.c</code>中的main函数.</p>\n<h2 id=\"section-7\">8.</h2>\n<p>其中的28字节用于储存未初始化的局部变量的<code>.bss</code>节</p>\n<h2 id=\"section-8\">9.</h2>\n<p><code>gcc -static -o p p.o libx.a liby.a</code>\n<code>gcc -static -o p p.o liby.a libx.a liby.a</code>\n<code>gcc -static -o p p.o libx.a liby.a libx.a libz.a</code></p>\n<h2 id=\"section-9\">10.</h2>\n<p>符号名:<code>swap</code> 相对于<code>.text</code>节起始位置的位移:\n<code>0x7</code> 所在指令行号: <code>6</code> 重定位类型:\n<code>R_386_PC32</code>重定位类型 重定位前内容: <code>0xfffffffc</code>,\n<code>-4</code> 重定位后内容: <code>0x00000009</code>, <code>9</code>\n计算过程: <code>0x8048384 - (0x8048386 + 0x7 - (-4))</code></p>\n<h2 id=\"section-10\">11.</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>符号</th>\n<th>位移</th>\n<th>指令所在行号</th>\n<th>重定位类型</th>\n<th>重定位前内容</th>\n<th>重定位后内容</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>bufp1(.bss)</td>\n<td>0x8</td>\n<td>6~7</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x8049620</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>buf</td>\n<td>0xc</td>\n<td>6~7</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x80495cc</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>bufp0</td>\n<td>0x11</td>\n<td>10</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x80495d0</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>bufp0</td>\n<td>0x1b</td>\n<td>14</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x80495d0</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>bufp1</td>\n<td>0x21</td>\n<td>16</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x8049620</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>bufp1</td>\n<td>0x2a</td>\n<td>29</td>\n<td>R_386_32</td>\n<td>0x00000000</td>\n<td>0x8049620</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"计算机系统基础第五章习题","date":"2023-05-13T15:10:14.000Z","mathjax":true,"_content":"\n# 第五章\n\n## 1.\n**指令周期**: CPU取出并执行一条指令的时间成为指令周期  \n**机器周期**: 一个指令周期可分为取指令、读操作数、执行并写结果等多个基本工作周期, 称为机器周期  \n**控制信号**: 对指令进行译码生成的控制信息\n**控制部件**: 控制部件根据每条指令功能的不同生成对数据通路的控制信号  \n**功能部件**: 数据通路中专门进行数据运算的部件  \n**执行部件**: 数据通路中专门进行数据运算的部件  \n**操作元件**: 组合逻辑元件  \n**状态元件**: 时序逻辑元件  \n**多路选择器**: 多路选择器需要控制信号Select来确定选择哪个输入被输出  \n**程序计数器(PC)**: 用来存放即将执行指令的地址  \n**指令寄存器(IR)**: IR用以存放现行指令  \n**指令译码器(ID)**: ID对指令寄存器中的操作码部分进行分析解释, 产生相应的译码信号提供给操作控制信号形成部件  \n**硬连线控制器**: 硬连线路控制器的基本实现思路是, 将指令执行过程中每个时钟周期所包含的控制信号取值组合看成一个状态, 每来一个时钟周期, 控制信号会有一组新的取值, 也就是一个新的状态, 这样, 所有指令的执行过程就可以用一个有限状态转换图来描述. 实现时, 用一个组合逻辑电路(一般为PLA电路)来生成控制信号, 用一个状态寄存器实现状态之间的转换  \n**微程序控制器**: 微程序控制器的基本实现思路是, 仿照程序设计方法, 将每条指令的执行过程用一个微程序来表示, 将指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令, 每条微指令实际上就是一个0/1序列, 一个微程序由若干条微指令组成  \n**控制存储器(CS)**: 指令对应的微程序事先存放在的一个只读存储器  \n**微指令**: 指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令  \n**微程序**: 一个微程序由若干条微指令组成  \n**内部异常**: 由CPU内部的异常引起的意外事件  \n**外部中断**: 设备控制器向CPU发出的要求CPU对这些情况进行处理的中断请求  \n**指令流水线**: 将指令的各阶段看成相应的流水段, 指令的执行过程就构成了一条指令流水线  \n**指令吞吐率**: 单位时间内执行的指令个数\n**流水段寄存器**: 用来保存对应组合逻辑处理的结果  \n**流水线冒险**: 一些使流水无法正确、按时执行后续指令, 从而引起流水线阻塞或停顿  \n<!--more-->\n**结构冒险**: 也称为硬件资源冲突, 引起结构冒险的原因在于同一个部件同时被不同指令所用, 也就是说它是由硬件资源竞争造成的  \n**数据冒险**: 也称为数据相关, 引起数据冒险的原因在于, 后面指令用到前面指令的运算结果时, 前面指令的结果还没产生  \n**控制冒险**: 由于发生了指令执行顺序改变而引起的流水线阻塞  \n**流水线阻塞**: 流水线无法正确、按时执行后续指令  \n**空操作**: 除修改PC外其他什么操作都不做  \n**转发(旁路)**: 在数据通路中一旦产生运算结果或一旦存储器读出数据, 就把它们通过一条旁路直接送到相关后续指令在ALU阶段的ALU输入端  \n**延迟时间损失片**: 由于流水线阻塞而带来的延迟执行周期数  \n**静态多发射**: 通过编译器静态推测来辅助完成\"指令打包\"和\"冒险处理\"  \n**动态多发射**: 由处理器硬件动态进行流水线调度来完成\"指令打包\"和\"冒险处理\", 能在一个时钟周期内执行一条以上指令  \n**超流水线**: 通过增加流水线级数来使更多的指令同时在流水线中重叠执行  \n**超长指令字(VLIW)**: 静态多发射指令最初被称为\"超长指令字\"  \n**超标量流水线**: 采用动态多发射流水线技术\n**动态流水线调度**: 处理器通过指令相关性检测和动态分支预测等手段, 投机性地不按指令顺序执行, 当发生流水线阻塞时, 根据指令的依赖关系, 动态地到后面找一些没有依赖关系的指令提前执行  \n**乱序执行**: 动态流水线调度  \n\n## 2.\n(1) CPU最基本的部件是数据通路和控制部件, CPU的基本职能是周而复始地执行指令\n(2) 每条指令的执行都会改变PC中的值, 因而CPU能够不断地执行新的指令\n(3) 一条指令的执行要经过取指令、指令译码、计算源操作数地址并取操作数、执行数据操作、计算目的操作数地址并存结果、计算下条指令地址这几个步骤. 对于取指令和指令译码, 所有指令的操作都一样, 其余步骤不同指令的操作可能不同\n(4) 取指令部件的功能是从PC所指的存储单元中取出指令送到指令寄存器(IR). 控制器的功能是对指令进行译码, 将译码结果与状态/标志信号和时序信号等进行组合, 产生指令执行过程中所需的控制信号\n(5) 因为为了使CPU能从执行指令状态转入等待状态, 需要有一个控制信号, 该控制信号用WMFC表示, 在同步方式下, 存储器总是在读信号read发出后的固定几个时钟周期内准备好数据， 因而CPU不必等待主存发回MFC信号\n(6) 硬连线控制器诉对快, 适合于实现简单、规整的指令系统. 微程序控制器因为采用软件设计思想, 不管指令多复杂, 只要事先将其包含的操作所用的控制信号存储在控存中, 就可以在指令执行时将控制信号取出, 以控制指令的执行\n(7) 硬连线路控制器适合于实现简单、规整的指令系统, 而微程序控制器只要事先将其包含的操作所用的控制信号存储在控存中, 就可以在指令执行时将控制信号取出, 以控制指令的执行\n(8) 流水下方式下, 一条指令执行时间加长了, 程序的执行时间缩短了\n(9) 1. 指南长度应尽量一致 2. 指令格式应尽量规整 3. 采用load/store型指令风格 4. 数据和指令在存储器中要\"对齐\"存放\n\n## 3.\n(1) 40ps\n(2) 280ps\n\n## 4.\nPC~out~, MOVb, MAR~in~  \nMemR  \nPC~out~, INCb, Y~in~  \nY~out~, MOVa, PC~in~  \nMDR~out~, MOVb, IR~in~  \nPC~out~, MOVb, MAR~in~  \nMemR  \nPC~out~, INCb, Y~in~  \nY~out~, MOVa, PC~in~  \nSP~out, DECb, Y~in~  \nY~out~, MOVa, SP~in~  \nSP~out~, MOVb, MAR~in~  \nMemW  \n\n## 5.\n(1)\n|时钟|功能|有效控制信号|\n|-|-|-|\n|C1|Y&larr;MDR|MDR~out~, Y~in~|\n|C2|Z&larr;(R1)+Y|R1~out~, add(Z~in~)|\n|C3|R1&larr;(Z)|Z~out~, R1~in~|\n\n3个时钟周期\n\n(2)\n|时钟|功能|有效控制信号|\n|-|-|-|\n|C1|MAR&larr;MDR|MDR~out~, MAR~in~|\n|C2(2)|MDR&larr;M(MAR)|MemR|\n|C3|Y&larr;MDR|MDR~out~, Y~in~|\n|C4|Z&larr;(R1)+Y|R1~out~, add(Z~in~)|\n|C5|R1&larr;(Z)|Z~out~, R1~in~|\n\n6个时钟周期\n\n(3)\n|时钟|功能|有效控制信号|\n|-|-|-|\n|C1|MAR&larr;MDR|MDR~out~, MAR~in~|\n|C2(2)|MDR&larr;M(MAR)|MemR|\n|C3|MAR&larr;MDR|MDR~out~, MAR~in~|\n|C4(2)|MDR&larr;M(MAR)|MemR|\n|C5|Y&larr;MDR|MDR~out~, Y~in~|\n|C6|Z&larr;(R1)+Y|R1~out~, add(Z~in~)|\n|C7|R1&larr;(Z)|Z~out~, R1~in~|\n\n9个时钟周期\n\n## 6.\n(1) 否, 因为时钟周期由最慢的存储单元决定\n(2) 此时的ALU操作时间是180ps, 因此无影响\n(3) 此时的ALU操作时间是210ps, 此时会变慢\n\n## 7.\n(1) \n(2) \n(3) \n\n## 8.\n(1)\n(2)\n(3)\n(4)\n\n## 9.\n\n## 10.\n(1)\n(2)\n\n## 11.\n\n","source":"_posts/计算机系统基础第五章习题.md","raw":"---\ntitle: 计算机系统基础第五章习题\ndate: 2023-05-13 23:10:14\nmathjax: true\ncategories:\n    - 计算机\ntags:\n    - 计算机系统基础\n---\n\n# 第五章\n\n## 1.\n**指令周期**: CPU取出并执行一条指令的时间成为指令周期  \n**机器周期**: 一个指令周期可分为取指令、读操作数、执行并写结果等多个基本工作周期, 称为机器周期  \n**控制信号**: 对指令进行译码生成的控制信息\n**控制部件**: 控制部件根据每条指令功能的不同生成对数据通路的控制信号  \n**功能部件**: 数据通路中专门进行数据运算的部件  \n**执行部件**: 数据通路中专门进行数据运算的部件  \n**操作元件**: 组合逻辑元件  \n**状态元件**: 时序逻辑元件  \n**多路选择器**: 多路选择器需要控制信号Select来确定选择哪个输入被输出  \n**程序计数器(PC)**: 用来存放即将执行指令的地址  \n**指令寄存器(IR)**: IR用以存放现行指令  \n**指令译码器(ID)**: ID对指令寄存器中的操作码部分进行分析解释, 产生相应的译码信号提供给操作控制信号形成部件  \n**硬连线控制器**: 硬连线路控制器的基本实现思路是, 将指令执行过程中每个时钟周期所包含的控制信号取值组合看成一个状态, 每来一个时钟周期, 控制信号会有一组新的取值, 也就是一个新的状态, 这样, 所有指令的执行过程就可以用一个有限状态转换图来描述. 实现时, 用一个组合逻辑电路(一般为PLA电路)来生成控制信号, 用一个状态寄存器实现状态之间的转换  \n**微程序控制器**: 微程序控制器的基本实现思路是, 仿照程序设计方法, 将每条指令的执行过程用一个微程序来表示, 将指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令, 每条微指令实际上就是一个0/1序列, 一个微程序由若干条微指令组成  \n**控制存储器(CS)**: 指令对应的微程序事先存放在的一个只读存储器  \n**微指令**: 指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令  \n**微程序**: 一个微程序由若干条微指令组成  \n**内部异常**: 由CPU内部的异常引起的意外事件  \n**外部中断**: 设备控制器向CPU发出的要求CPU对这些情况进行处理的中断请求  \n**指令流水线**: 将指令的各阶段看成相应的流水段, 指令的执行过程就构成了一条指令流水线  \n**指令吞吐率**: 单位时间内执行的指令个数\n**流水段寄存器**: 用来保存对应组合逻辑处理的结果  \n**流水线冒险**: 一些使流水无法正确、按时执行后续指令, 从而引起流水线阻塞或停顿  \n<!--more-->\n**结构冒险**: 也称为硬件资源冲突, 引起结构冒险的原因在于同一个部件同时被不同指令所用, 也就是说它是由硬件资源竞争造成的  \n**数据冒险**: 也称为数据相关, 引起数据冒险的原因在于, 后面指令用到前面指令的运算结果时, 前面指令的结果还没产生  \n**控制冒险**: 由于发生了指令执行顺序改变而引起的流水线阻塞  \n**流水线阻塞**: 流水线无法正确、按时执行后续指令  \n**空操作**: 除修改PC外其他什么操作都不做  \n**转发(旁路)**: 在数据通路中一旦产生运算结果或一旦存储器读出数据, 就把它们通过一条旁路直接送到相关后续指令在ALU阶段的ALU输入端  \n**延迟时间损失片**: 由于流水线阻塞而带来的延迟执行周期数  \n**静态多发射**: 通过编译器静态推测来辅助完成\"指令打包\"和\"冒险处理\"  \n**动态多发射**: 由处理器硬件动态进行流水线调度来完成\"指令打包\"和\"冒险处理\", 能在一个时钟周期内执行一条以上指令  \n**超流水线**: 通过增加流水线级数来使更多的指令同时在流水线中重叠执行  \n**超长指令字(VLIW)**: 静态多发射指令最初被称为\"超长指令字\"  \n**超标量流水线**: 采用动态多发射流水线技术\n**动态流水线调度**: 处理器通过指令相关性检测和动态分支预测等手段, 投机性地不按指令顺序执行, 当发生流水线阻塞时, 根据指令的依赖关系, 动态地到后面找一些没有依赖关系的指令提前执行  \n**乱序执行**: 动态流水线调度  \n\n## 2.\n(1) CPU最基本的部件是数据通路和控制部件, CPU的基本职能是周而复始地执行指令\n(2) 每条指令的执行都会改变PC中的值, 因而CPU能够不断地执行新的指令\n(3) 一条指令的执行要经过取指令、指令译码、计算源操作数地址并取操作数、执行数据操作、计算目的操作数地址并存结果、计算下条指令地址这几个步骤. 对于取指令和指令译码, 所有指令的操作都一样, 其余步骤不同指令的操作可能不同\n(4) 取指令部件的功能是从PC所指的存储单元中取出指令送到指令寄存器(IR). 控制器的功能是对指令进行译码, 将译码结果与状态/标志信号和时序信号等进行组合, 产生指令执行过程中所需的控制信号\n(5) 因为为了使CPU能从执行指令状态转入等待状态, 需要有一个控制信号, 该控制信号用WMFC表示, 在同步方式下, 存储器总是在读信号read发出后的固定几个时钟周期内准备好数据， 因而CPU不必等待主存发回MFC信号\n(6) 硬连线控制器诉对快, 适合于实现简单、规整的指令系统. 微程序控制器因为采用软件设计思想, 不管指令多复杂, 只要事先将其包含的操作所用的控制信号存储在控存中, 就可以在指令执行时将控制信号取出, 以控制指令的执行\n(7) 硬连线路控制器适合于实现简单、规整的指令系统, 而微程序控制器只要事先将其包含的操作所用的控制信号存储在控存中, 就可以在指令执行时将控制信号取出, 以控制指令的执行\n(8) 流水下方式下, 一条指令执行时间加长了, 程序的执行时间缩短了\n(9) 1. 指南长度应尽量一致 2. 指令格式应尽量规整 3. 采用load/store型指令风格 4. 数据和指令在存储器中要\"对齐\"存放\n\n## 3.\n(1) 40ps\n(2) 280ps\n\n## 4.\nPC~out~, MOVb, MAR~in~  \nMemR  \nPC~out~, INCb, Y~in~  \nY~out~, MOVa, PC~in~  \nMDR~out~, MOVb, IR~in~  \nPC~out~, MOVb, MAR~in~  \nMemR  \nPC~out~, INCb, Y~in~  \nY~out~, MOVa, PC~in~  \nSP~out, DECb, Y~in~  \nY~out~, MOVa, SP~in~  \nSP~out~, MOVb, MAR~in~  \nMemW  \n\n## 5.\n(1)\n|时钟|功能|有效控制信号|\n|-|-|-|\n|C1|Y&larr;MDR|MDR~out~, Y~in~|\n|C2|Z&larr;(R1)+Y|R1~out~, add(Z~in~)|\n|C3|R1&larr;(Z)|Z~out~, R1~in~|\n\n3个时钟周期\n\n(2)\n|时钟|功能|有效控制信号|\n|-|-|-|\n|C1|MAR&larr;MDR|MDR~out~, MAR~in~|\n|C2(2)|MDR&larr;M(MAR)|MemR|\n|C3|Y&larr;MDR|MDR~out~, Y~in~|\n|C4|Z&larr;(R1)+Y|R1~out~, add(Z~in~)|\n|C5|R1&larr;(Z)|Z~out~, R1~in~|\n\n6个时钟周期\n\n(3)\n|时钟|功能|有效控制信号|\n|-|-|-|\n|C1|MAR&larr;MDR|MDR~out~, MAR~in~|\n|C2(2)|MDR&larr;M(MAR)|MemR|\n|C3|MAR&larr;MDR|MDR~out~, MAR~in~|\n|C4(2)|MDR&larr;M(MAR)|MemR|\n|C5|Y&larr;MDR|MDR~out~, Y~in~|\n|C6|Z&larr;(R1)+Y|R1~out~, add(Z~in~)|\n|C7|R1&larr;(Z)|Z~out~, R1~in~|\n\n9个时钟周期\n\n## 6.\n(1) 否, 因为时钟周期由最慢的存储单元决定\n(2) 此时的ALU操作时间是180ps, 因此无影响\n(3) 此时的ALU操作时间是210ps, 此时会变慢\n\n## 7.\n(1) \n(2) \n(3) \n\n## 8.\n(1)\n(2)\n(3)\n(4)\n\n## 9.\n\n## 10.\n(1)\n(2)\n\n## 11.\n\n","slug":"计算机系统基础第五章习题","published":1,"updated":"2023-05-21T04:31:00.649Z","_id":"clhr7xtsp0000hvqha11pe2xe","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第五章\">第五章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>指令周期</strong>:\nCPU取出并执行一条指令的时间成为指令周期<br>\n<strong>机器周期</strong>:\n一个指令周期可分为取指令、读操作数、执行并写结果等多个基本工作周期,\n称为机器周期<br>\n<strong>控制信号</strong>: 对指令进行译码生成的控制信息\n<strong>控制部件</strong>:\n控制部件根据每条指令功能的不同生成对数据通路的控制信号<br>\n<strong>功能部件</strong>: 数据通路中专门进行数据运算的部件<br>\n<strong>执行部件</strong>: 数据通路中专门进行数据运算的部件<br>\n<strong>操作元件</strong>: 组合逻辑元件<br>\n<strong>状态元件</strong>: 时序逻辑元件<br>\n<strong>多路选择器</strong>:\n多路选择器需要控制信号Select来确定选择哪个输入被输出<br>\n<strong>程序计数器(PC)</strong>: 用来存放即将执行指令的地址<br>\n<strong>指令寄存器(IR)</strong>: IR用以存放现行指令<br>\n<strong>指令译码器(ID)</strong>:\nID对指令寄存器中的操作码部分进行分析解释,\n产生相应的译码信号提供给操作控制信号形成部件<br>\n<strong>硬连线控制器</strong>: 硬连线路控制器的基本实现思路是,\n将指令执行过程中每个时钟周期所包含的控制信号取值组合看成一个状态,\n每来一个时钟周期, 控制信号会有一组新的取值, 也就是一个新的状态, 这样,\n所有指令的执行过程就可以用一个有限状态转换图来描述. 实现时,\n用一个组合逻辑电路(一般为PLA电路)来生成控制信号,\n用一个状态寄存器实现状态之间的转换<br>\n<strong>微程序控制器</strong>: 微程序控制器的基本实现思路是,\n仿照程序设计方法, 将每条指令的执行过程用一个微程序来表示,\n将指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令,\n每条微指令实际上就是一个0/1序列, 一个微程序由若干条微指令组成<br>\n<strong>控制存储器(CS)</strong>:\n指令对应的微程序事先存放在的一个只读存储器<br>\n<strong>微指令</strong>:\n指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令<br>\n<strong>微程序</strong>: 一个微程序由若干条微指令组成<br>\n<strong>内部异常</strong>: 由CPU内部的异常引起的意外事件<br>\n<strong>外部中断</strong>:\n设备控制器向CPU发出的要求CPU对这些情况进行处理的中断请求<br>\n<strong>指令流水线</strong>: 将指令的各阶段看成相应的流水段,\n指令的执行过程就构成了一条指令流水线<br>\n<strong>指令吞吐率</strong>: 单位时间内执行的指令个数\n<strong>流水段寄存器</strong>: 用来保存对应组合逻辑处理的结果<br>\n<strong>流水线冒险</strong>: 一些使流水无法正确、按时执行后续指令,\n从而引起流水线阻塞或停顿<br>\n<span id=\"more\"></span> <strong>结构冒险</strong>: 也称为硬件资源冲突,\n引起结构冒险的原因在于同一个部件同时被不同指令所用,\n也就是说它是由硬件资源竞争造成的<br>\n<strong>数据冒险</strong>: 也称为数据相关, 引起数据冒险的原因在于,\n后面指令用到前面指令的运算结果时, 前面指令的结果还没产生<br>\n<strong>控制冒险</strong>:\n由于发生了指令执行顺序改变而引起的流水线阻塞<br>\n<strong>流水线阻塞</strong>: 流水线无法正确、按时执行后续指令<br>\n<strong>空操作</strong>: 除修改PC外其他什么操作都不做<br>\n<strong>转发(旁路)</strong>:\n在数据通路中一旦产生运算结果或一旦存储器读出数据,\n就把它们通过一条旁路直接送到相关后续指令在ALU阶段的ALU输入端<br>\n<strong>延迟时间损失片</strong>:\n由于流水线阻塞而带来的延迟执行周期数<br>\n<strong>静态多发射</strong>:\n通过编译器静态推测来辅助完成\"指令打包\"和\"冒险处理\"<br>\n<strong>动态多发射</strong>:\n由处理器硬件动态进行流水线调度来完成\"指令打包\"和\"冒险处理\",\n能在一个时钟周期内执行一条以上指令<br>\n<strong>超流水线</strong>:\n通过增加流水线级数来使更多的指令同时在流水线中重叠执行<br>\n<strong>超长指令字(VLIW)</strong>:\n静态多发射指令最初被称为\"超长指令字\"<br>\n<strong>超标量流水线</strong>: 采用动态多发射流水线技术\n<strong>动态流水线调度</strong>:\n处理器通过指令相关性检测和动态分支预测等手段, 投机性地不按指令顺序执行,\n当发生流水线阻塞时, 根据指令的依赖关系,\n动态地到后面找一些没有依赖关系的指令提前执行<br>\n<strong>乱序执行</strong>: 动态流水线调度</p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>CPU最基本的部件是数据通路和控制部件,\nCPU的基本职能是周而复始地执行指令</li>\n<li>每条指令的执行都会改变PC中的值, 因而CPU能够不断地执行新的指令</li>\n<li>一条指令的执行要经过取指令、指令译码、计算源操作数地址并取操作数、执行数据操作、计算目的操作数地址并存结果、计算下条指令地址这几个步骤.\n对于取指令和指令译码, 所有指令的操作都一样,\n其余步骤不同指令的操作可能不同</li>\n<li>取指令部件的功能是从PC所指的存储单元中取出指令送到指令寄存器(IR).\n控制器的功能是对指令进行译码,\n将译码结果与状态/标志信号和时序信号等进行组合,\n产生指令执行过程中所需的控制信号</li>\n<li>因为为了使CPU能从执行指令状态转入等待状态, 需要有一个控制信号,\n该控制信号用WMFC表示, 在同步方式下,\n存储器总是在读信号read发出后的固定几个时钟周期内准备好数据，\n因而CPU不必等待主存发回MFC信号</li>\n<li>硬连线控制器诉对快, 适合于实现简单、规整的指令系统.\n微程序控制器因为采用软件设计思想, 不管指令多复杂,\n只要事先将其包含的操作所用的控制信号存储在控存中,\n就可以在指令执行时将控制信号取出, 以控制指令的执行</li>\n<li>硬连线路控制器适合于实现简单、规整的指令系统,\n而微程序控制器只要事先将其包含的操作所用的控制信号存储在控存中,\n就可以在指令执行时将控制信号取出, 以控制指令的执行</li>\n<li>流水下方式下, 一条指令执行时间加长了, 程序的执行时间缩短了</li>\n<li><ol type=\"1\">\n<li>指南长度应尽量一致 2. 指令格式应尽量规整 3. 采用load/store型指令风格\n4. 数据和指令在存储器中要\"对齐\"存放</li>\n</ol></li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<ol type=\"1\">\n<li>40ps</li>\n<li>280ps</li>\n</ol>\n<h2 id=\"section-3\">4.</h2>\n<p>PC<sub>out</sub>, MOVb, MAR<sub>in</sub><br>\nMemR<br>\nPC<sub>out</sub>, INCb, Y<sub>in</sub><br>\nY<sub>out</sub>, MOVa, PC<sub>in</sub><br>\nMDR<sub>out</sub>, MOVb, IR<sub>in</sub><br>\nPC<sub>out</sub>, MOVb, MAR<sub>in</sub><br>\nMemR<br>\nPC<sub>out</sub>, INCb, Y<sub>in</sub><br>\nY<sub>out</sub>, MOVa, PC<sub>in</sub><br>\nSP~out, DECb, Y<sub>in</sub><br>\nY<sub>out</sub>, MOVa, SP<sub>in</sub><br>\nSP<sub>out</sub>, MOVb, MAR<sub>in</sub><br>\nMemW</p>\n<h2 id=\"section-4\">5.</h2>\n<ol type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>时钟</th>\n<th>功能</th>\n<th>有效控制信号</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>C1</td>\n<td>Y←MDR</td>\n<td>MDR<sub>out</sub>, Y<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C2</td>\n<td>Z←(R1)+Y</td>\n<td>R1<sub>out</sub>, add(Z<sub>in</sub>)</td>\n</tr>\n<tr class=\"odd\">\n<td>C3</td>\n<td>R1←(Z)</td>\n<td>Z<sub>out</sub>, R1<sub>in</sub></td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<p>3个时钟周期</p>\n<ol start=\"2\" type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>时钟</th>\n<th>功能</th>\n<th>有效控制信号</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>C1</td>\n<td>MAR←MDR</td>\n<td>MDR<sub>out</sub>, MAR<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C2(2)</td>\n<td>MDR←M(MAR)</td>\n<td>MemR</td>\n</tr>\n<tr class=\"odd\">\n<td>C3</td>\n<td>Y←MDR</td>\n<td>MDR<sub>out</sub>, Y<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C4</td>\n<td>Z←(R1)+Y</td>\n<td>R1<sub>out</sub>, add(Z<sub>in</sub>)</td>\n</tr>\n<tr class=\"odd\">\n<td>C5</td>\n<td>R1←(Z)</td>\n<td>Z<sub>out</sub>, R1<sub>in</sub></td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<p>6个时钟周期</p>\n<ol start=\"3\" type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>时钟</th>\n<th>功能</th>\n<th>有效控制信号</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>C1</td>\n<td>MAR←MDR</td>\n<td>MDR<sub>out</sub>, MAR<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C2(2)</td>\n<td>MDR←M(MAR)</td>\n<td>MemR</td>\n</tr>\n<tr class=\"odd\">\n<td>C3</td>\n<td>MAR←MDR</td>\n<td>MDR<sub>out</sub>, MAR<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C4(2)</td>\n<td>MDR←M(MAR)</td>\n<td>MemR</td>\n</tr>\n<tr class=\"odd\">\n<td>C5</td>\n<td>Y←MDR</td>\n<td>MDR<sub>out</sub>, Y<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C6</td>\n<td>Z←(R1)+Y</td>\n<td>R1<sub>out</sub>, add(Z<sub>in</sub>)</td>\n</tr>\n<tr class=\"odd\">\n<td>C7</td>\n<td>R1←(Z)</td>\n<td>Z<sub>out</sub>, R1<sub>in</sub></td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<p>9个时钟周期</p>\n<h2 id=\"section-5\">6.</h2>\n<ol type=\"1\">\n<li>否, 因为时钟周期由最慢的存储单元决定</li>\n<li>此时的ALU操作时间是180ps, 因此无影响</li>\n<li>此时的ALU操作时间是210ps, 此时会变慢</li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<ol type=\"1\">\n<li></li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"section-7\">8.</h2>\n<ol type=\"1\">\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"section-8\">9.</h2>\n<h2 id=\"section-9\">10.</h2>\n<ol type=\"1\">\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"section-10\">11.</h2>\n","site":{"data":{}},"excerpt":"<h1 id=\"第五章\">第五章</h1>\n<h2 id=\"section\">1.</h2>\n<p><strong>指令周期</strong>:\nCPU取出并执行一条指令的时间成为指令周期<br>\n<strong>机器周期</strong>:\n一个指令周期可分为取指令、读操作数、执行并写结果等多个基本工作周期,\n称为机器周期<br>\n<strong>控制信号</strong>: 对指令进行译码生成的控制信息\n<strong>控制部件</strong>:\n控制部件根据每条指令功能的不同生成对数据通路的控制信号<br>\n<strong>功能部件</strong>: 数据通路中专门进行数据运算的部件<br>\n<strong>执行部件</strong>: 数据通路中专门进行数据运算的部件<br>\n<strong>操作元件</strong>: 组合逻辑元件<br>\n<strong>状态元件</strong>: 时序逻辑元件<br>\n<strong>多路选择器</strong>:\n多路选择器需要控制信号Select来确定选择哪个输入被输出<br>\n<strong>程序计数器(PC)</strong>: 用来存放即将执行指令的地址<br>\n<strong>指令寄存器(IR)</strong>: IR用以存放现行指令<br>\n<strong>指令译码器(ID)</strong>:\nID对指令寄存器中的操作码部分进行分析解释,\n产生相应的译码信号提供给操作控制信号形成部件<br>\n<strong>硬连线控制器</strong>: 硬连线路控制器的基本实现思路是,\n将指令执行过程中每个时钟周期所包含的控制信号取值组合看成一个状态,\n每来一个时钟周期, 控制信号会有一组新的取值, 也就是一个新的状态, 这样,\n所有指令的执行过程就可以用一个有限状态转换图来描述. 实现时,\n用一个组合逻辑电路(一般为PLA电路)来生成控制信号,\n用一个状态寄存器实现状态之间的转换<br>\n<strong>微程序控制器</strong>: 微程序控制器的基本实现思路是,\n仿照程序设计方法, 将每条指令的执行过程用一个微程序来表示,\n将指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令,\n每条微指令实际上就是一个0/1序列, 一个微程序由若干条微指令组成<br>\n<strong>控制存储器(CS)</strong>:\n指令对应的微程序事先存放在的一个只读存储器<br>\n<strong>微指令</strong>:\n指令执行过程中每个时钟周期所包含的控制信号取值组合看成是由多个微命令组成的一条微指令<br>\n<strong>微程序</strong>: 一个微程序由若干条微指令组成<br>\n<strong>内部异常</strong>: 由CPU内部的异常引起的意外事件<br>\n<strong>外部中断</strong>:\n设备控制器向CPU发出的要求CPU对这些情况进行处理的中断请求<br>\n<strong>指令流水线</strong>: 将指令的各阶段看成相应的流水段,\n指令的执行过程就构成了一条指令流水线<br>\n<strong>指令吞吐率</strong>: 单位时间内执行的指令个数\n<strong>流水段寄存器</strong>: 用来保存对应组合逻辑处理的结果<br>\n<strong>流水线冒险</strong>: 一些使流水无法正确、按时执行后续指令,\n从而引起流水线阻塞或停顿<br>","more":"<strong>结构冒险</strong>: 也称为硬件资源冲突,\n引起结构冒险的原因在于同一个部件同时被不同指令所用,\n也就是说它是由硬件资源竞争造成的<br>\n<strong>数据冒险</strong>: 也称为数据相关, 引起数据冒险的原因在于,\n后面指令用到前面指令的运算结果时, 前面指令的结果还没产生<br>\n<strong>控制冒险</strong>:\n由于发生了指令执行顺序改变而引起的流水线阻塞<br>\n<strong>流水线阻塞</strong>: 流水线无法正确、按时执行后续指令<br>\n<strong>空操作</strong>: 除修改PC外其他什么操作都不做<br>\n<strong>转发(旁路)</strong>:\n在数据通路中一旦产生运算结果或一旦存储器读出数据,\n就把它们通过一条旁路直接送到相关后续指令在ALU阶段的ALU输入端<br>\n<strong>延迟时间损失片</strong>:\n由于流水线阻塞而带来的延迟执行周期数<br>\n<strong>静态多发射</strong>:\n通过编译器静态推测来辅助完成\"指令打包\"和\"冒险处理\"<br>\n<strong>动态多发射</strong>:\n由处理器硬件动态进行流水线调度来完成\"指令打包\"和\"冒险处理\",\n能在一个时钟周期内执行一条以上指令<br>\n<strong>超流水线</strong>:\n通过增加流水线级数来使更多的指令同时在流水线中重叠执行<br>\n<strong>超长指令字(VLIW)</strong>:\n静态多发射指令最初被称为\"超长指令字\"<br>\n<strong>超标量流水线</strong>: 采用动态多发射流水线技术\n<strong>动态流水线调度</strong>:\n处理器通过指令相关性检测和动态分支预测等手段, 投机性地不按指令顺序执行,\n当发生流水线阻塞时, 根据指令的依赖关系,\n动态地到后面找一些没有依赖关系的指令提前执行<br>\n<strong>乱序执行</strong>: 动态流水线调度</p>\n<h2 id=\"section-1\">2.</h2>\n<ol type=\"1\">\n<li>CPU最基本的部件是数据通路和控制部件,\nCPU的基本职能是周而复始地执行指令</li>\n<li>每条指令的执行都会改变PC中的值, 因而CPU能够不断地执行新的指令</li>\n<li>一条指令的执行要经过取指令、指令译码、计算源操作数地址并取操作数、执行数据操作、计算目的操作数地址并存结果、计算下条指令地址这几个步骤.\n对于取指令和指令译码, 所有指令的操作都一样,\n其余步骤不同指令的操作可能不同</li>\n<li>取指令部件的功能是从PC所指的存储单元中取出指令送到指令寄存器(IR).\n控制器的功能是对指令进行译码,\n将译码结果与状态/标志信号和时序信号等进行组合,\n产生指令执行过程中所需的控制信号</li>\n<li>因为为了使CPU能从执行指令状态转入等待状态, 需要有一个控制信号,\n该控制信号用WMFC表示, 在同步方式下,\n存储器总是在读信号read发出后的固定几个时钟周期内准备好数据，\n因而CPU不必等待主存发回MFC信号</li>\n<li>硬连线控制器诉对快, 适合于实现简单、规整的指令系统.\n微程序控制器因为采用软件设计思想, 不管指令多复杂,\n只要事先将其包含的操作所用的控制信号存储在控存中,\n就可以在指令执行时将控制信号取出, 以控制指令的执行</li>\n<li>硬连线路控制器适合于实现简单、规整的指令系统,\n而微程序控制器只要事先将其包含的操作所用的控制信号存储在控存中,\n就可以在指令执行时将控制信号取出, 以控制指令的执行</li>\n<li>流水下方式下, 一条指令执行时间加长了, 程序的执行时间缩短了</li>\n<li><ol type=\"1\">\n<li>指南长度应尽量一致 2. 指令格式应尽量规整 3. 采用load/store型指令风格\n4. 数据和指令在存储器中要\"对齐\"存放</li>\n</ol></li>\n</ol>\n<h2 id=\"section-2\">3.</h2>\n<ol type=\"1\">\n<li>40ps</li>\n<li>280ps</li>\n</ol>\n<h2 id=\"section-3\">4.</h2>\n<p>PC<sub>out</sub>, MOVb, MAR<sub>in</sub><br>\nMemR<br>\nPC<sub>out</sub>, INCb, Y<sub>in</sub><br>\nY<sub>out</sub>, MOVa, PC<sub>in</sub><br>\nMDR<sub>out</sub>, MOVb, IR<sub>in</sub><br>\nPC<sub>out</sub>, MOVb, MAR<sub>in</sub><br>\nMemR<br>\nPC<sub>out</sub>, INCb, Y<sub>in</sub><br>\nY<sub>out</sub>, MOVa, PC<sub>in</sub><br>\nSP~out, DECb, Y<sub>in</sub><br>\nY<sub>out</sub>, MOVa, SP<sub>in</sub><br>\nSP<sub>out</sub>, MOVb, MAR<sub>in</sub><br>\nMemW</p>\n<h2 id=\"section-4\">5.</h2>\n<ol type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>时钟</th>\n<th>功能</th>\n<th>有效控制信号</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>C1</td>\n<td>Y←MDR</td>\n<td>MDR<sub>out</sub>, Y<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C2</td>\n<td>Z←(R1)+Y</td>\n<td>R1<sub>out</sub>, add(Z<sub>in</sub>)</td>\n</tr>\n<tr class=\"odd\">\n<td>C3</td>\n<td>R1←(Z)</td>\n<td>Z<sub>out</sub>, R1<sub>in</sub></td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<p>3个时钟周期</p>\n<ol start=\"2\" type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>时钟</th>\n<th>功能</th>\n<th>有效控制信号</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>C1</td>\n<td>MAR←MDR</td>\n<td>MDR<sub>out</sub>, MAR<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C2(2)</td>\n<td>MDR←M(MAR)</td>\n<td>MemR</td>\n</tr>\n<tr class=\"odd\">\n<td>C3</td>\n<td>Y←MDR</td>\n<td>MDR<sub>out</sub>, Y<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C4</td>\n<td>Z←(R1)+Y</td>\n<td>R1<sub>out</sub>, add(Z<sub>in</sub>)</td>\n</tr>\n<tr class=\"odd\">\n<td>C5</td>\n<td>R1←(Z)</td>\n<td>Z<sub>out</sub>, R1<sub>in</sub></td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<p>6个时钟周期</p>\n<ol start=\"3\" type=\"1\">\n<li><table>\n<thead>\n<tr class=\"header\">\n<th>时钟</th>\n<th>功能</th>\n<th>有效控制信号</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>C1</td>\n<td>MAR←MDR</td>\n<td>MDR<sub>out</sub>, MAR<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C2(2)</td>\n<td>MDR←M(MAR)</td>\n<td>MemR</td>\n</tr>\n<tr class=\"odd\">\n<td>C3</td>\n<td>MAR←MDR</td>\n<td>MDR<sub>out</sub>, MAR<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C4(2)</td>\n<td>MDR←M(MAR)</td>\n<td>MemR</td>\n</tr>\n<tr class=\"odd\">\n<td>C5</td>\n<td>Y←MDR</td>\n<td>MDR<sub>out</sub>, Y<sub>in</sub></td>\n</tr>\n<tr class=\"even\">\n<td>C6</td>\n<td>Z←(R1)+Y</td>\n<td>R1<sub>out</sub>, add(Z<sub>in</sub>)</td>\n</tr>\n<tr class=\"odd\">\n<td>C7</td>\n<td>R1←(Z)</td>\n<td>Z<sub>out</sub>, R1<sub>in</sub></td>\n</tr>\n</tbody>\n</table></li>\n</ol>\n<p>9个时钟周期</p>\n<h2 id=\"section-5\">6.</h2>\n<ol type=\"1\">\n<li>否, 因为时钟周期由最慢的存储单元决定</li>\n<li>此时的ALU操作时间是180ps, 因此无影响</li>\n<li>此时的ALU操作时间是210ps, 此时会变慢</li>\n</ol>\n<h2 id=\"section-6\">7.</h2>\n<ol type=\"1\">\n<li></li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"section-7\">8.</h2>\n<ol type=\"1\">\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"section-8\">9.</h2>\n<h2 id=\"section-9\">10.</h2>\n<ol type=\"1\">\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"section-10\">11.</h2>"}],"PostAsset":[{"_id":"source/_posts/制作小分子力场/LigParGen.png","slug":"LigParGen.png","post":"clclmimzw0000ugvq80hf94vc","modified":0,"renderable":0},{"_id":"source/_posts/制作小分子力场/openbabel.png","slug":"openbabel.png","post":"clclmimzw0000ugvq80hf94vc","modified":0,"renderable":0},{"_id":"source/_posts/制作小分子力场/tppmktop.png","slug":"tppmktop.png","post":"clclmimzw0000ugvq80hf94vc","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clbds0fi200001qvq80qo3lsh","category_id":"clbdxieb90000ijvq3thmaffh","_id":"clbdxiebf0003ijvq40j29y5k"},{"post_id":"clbetkmpx0000scpv24l22241","category_id":"clbetkmq00001scpvetyn24jr","_id":"clbetkmq20004scpvd5g54bo6"},{"post_id":"clbqkri890000abvq4pmo6gvo","category_id":"clbqkri8c0001abvqezga0tsx","_id":"clbqkri8i0004abvqgz7hg3ul"},{"post_id":"clclmimzw0000ugvq80hf94vc","category_id":"clbetkmq00001scpvetyn24jr","_id":"clclmin0a0002ugvq7mlc76t8"},{"post_id":"clclmin0e0004ugvqeyfhh1vv","category_id":"clclmin0g0005ugvqhhcygud2","_id":"clclmin0j0008ugvq966g92ms"},{"post_id":"clcoj4f1o00002cvqb7i644fc","category_id":"clcoj4f1t00012cvq4lq714vy","_id":"clcoj4f1y00042cvqfvt4gix2"},{"post_id":"cle5fqocd0000mutfgtv86znr","category_id":"clbqkri8c0001abvqezga0tsx","_id":"cle5fqocl0003mutf4sr31a8q"},{"post_id":"cle5fqocf0001mutfbv6a8a31","category_id":"clbqkri8c0001abvqezga0tsx","_id":"cle5fqocm0004mutf97ejbvz0"},{"post_id":"cle5fqoco0008mutfaclt23m2","category_id":"clbqkri8c0001abvqezga0tsx","_id":"cle5fqocq000dmutf3q9egdjl"},{"post_id":"clhj8prdy0001maqh5emd47we","category_id":"clbetkmq00001scpvetyn24jr","_id":"clhj8pre70007maqhbz3f22nz"},{"post_id":"clhj8pre40003maqh7hsa95h8","category_id":"clbqkri8c0001abvqezga0tsx","_id":"clhj8pre9000bmaqhcnpm5s5a"},{"post_id":"clhj8pre50004maqh4p7bhgur","category_id":"clbqkri8c0001abvqezga0tsx","_id":"clhj8pre9000dmaqhccuf7487"},{"post_id":"clhj8pre60006maqh9aup7vgi","category_id":"clbqkri8c0001abvqezga0tsx","_id":"clhj8prea000fmaqha4iq85xh"},{"post_id":"clhj8pre8000amaqh8bchdt7s","category_id":"clbqkri8c0001abvqezga0tsx","_id":"clhj8prea000hmaqh8gwaa6ma"},{"post_id":"clhr7xtsp0000hvqha11pe2xe","category_id":"clbqkri8c0001abvqezga0tsx","_id":"clhr7xtsv0002hvqh21ca2a5z"}],"PostTag":[{"post_id":"clbds0fi200001qvq80qo3lsh","tag_id":"clbdxiebc0001ijvqh9xqho1b","_id":"clbdxiebe0002ijvq9svpgbvv"},{"post_id":"clbetkmpx0000scpv24l22241","tag_id":"clbetkmq10002scpvdaescbqi","_id":"clbetkmq20003scpv4oby7rwz"},{"post_id":"clbqkri890000abvq4pmo6gvo","tag_id":"clbqkri8f0002abvq1pmghu7e","_id":"clbqkri8i0005abvq8xdp5x71"},{"post_id":"clbqkri890000abvq4pmo6gvo","tag_id":"clbqkri8h0003abvqflqdcun6","_id":"clbqkri8i0006abvqfh3m2ntt"},{"post_id":"clclmimzw0000ugvq80hf94vc","tag_id":"clclmin050001ugvq2ojm96sk","_id":"clclmin0a0003ugvqe8rkdo31"},{"post_id":"clclmin0e0004ugvqeyfhh1vv","tag_id":"clclmin0i0006ugvq6y1dasot","_id":"clclmin0j0007ugvq82wt8hda"},{"post_id":"clcoj4f1o00002cvqb7i644fc","tag_id":"clcoj4f1w00022cvq99862035","_id":"clcoj4f1y00032cvqams04fr9"},{"post_id":"cle5fqocd0000mutfgtv86znr","tag_id":"cle5fqoch0002mutf49rzdkf4","_id":"cle5fqocn0006mutf7a4sfy42"},{"post_id":"cle5fqocf0001mutfbv6a8a31","tag_id":"cle5fqoch0002mutf49rzdkf4","_id":"cle5fqocp000amutf46hj5p9i"},{"post_id":"cle5fqoco0008mutfaclt23m2","tag_id":"cle5fqoch0002mutf49rzdkf4","_id":"cle5fqocq000cmutf5ox890a7"},{"post_id":"cle5fqoco0007mutffaly6d35","tag_id":"cle5fqocp0009mutf56t05k9t","_id":"cle5fqocq000fmutf990uemrq"},{"post_id":"clhj8pre40003maqh7hsa95h8","tag_id":"cle5fqocq000emutf9ujkbds7","_id":"clhj8pre60005maqhg8309aof"},{"post_id":"clhj8pre50004maqh4p7bhgur","tag_id":"cle5fqocq000emutf9ujkbds7","_id":"clhj8pre80009maqhcuxz1i8k"},{"post_id":"clhj8prdv0000maqh5wim8ehn","tag_id":"clhj8pre00002maqhfqbh6hse","_id":"clhj8pre9000cmaqhd05paa5y"},{"post_id":"clhj8pre60006maqh9aup7vgi","tag_id":"cle5fqocq000emutf9ujkbds7","_id":"clhj8prea000emaqh6zfeffy9"},{"post_id":"clhj8pre8000amaqh8bchdt7s","tag_id":"cle5fqocq000emutf9ujkbds7","_id":"clhj8prea000gmaqh49bm4v0e"},{"post_id":"clhj8prdy0001maqh5emd47we","tag_id":"clhj8pre70008maqh1vc5a265","_id":"clhj8prea000imaqhbhprhw4d"},{"post_id":"clhr7xtsp0000hvqha11pe2xe","tag_id":"cle5fqocq000emutf9ujkbds7","_id":"clhr7xtsv0001hvqhh3s23158"}],"Tag":[{"name":"数学分析","_id":"clbdxiebc0001ijvqh9xqho1b"},{"name":"pdb预处理","_id":"clbetkmq10002scpvdaescbqi"},{"name":"计算机程序的构造与解释","_id":"clbqkri8f0002abvq1pmghu7e"},{"name":"python","_id":"clbqkri8h0003abvqflqdcun6"},{"name":"力场构建","_id":"clclmin050001ugvq2ojm96sk"},{"name":"latex","_id":"clclmin0i0006ugvq6y1dasot"},{"name":"bash","_id":"clcoj4f1w00022cvq99862035"},{"name":"linux","_id":"cle5fqoch0002mutf49rzdkf4"},{"name":"git","_id":"cle5fqocp0009mutf56t05k9t"},{"name":"计算机系统基础","_id":"cle5fqocq000emutf9ujkbds7"},{"name":"ssh","_id":"clhj8pre00002maqhfqbh6hse"},{"name":"软件安装","_id":"clhj8pre70008maqh1vc5a265"}]}}