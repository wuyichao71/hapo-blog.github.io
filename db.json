{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/bash-shell的一些以前没用过的特性.md","hash":"173b29308b1fba11ada23afc9115bbb16ccc51e3","modified":1673265612000},{"_id":"source/_posts/Performing-MM-PBSA-on-Fugaku.md","hash":"bf5d3898df9d0f722ad4915f9a06aada01af83ea","modified":1750346232102},{"_id":"source/_posts/How-to-use-tsubame.md","hash":"9aa6bd69569601671087f7489a7fda96fc925109","modified":1750346232100},{"_id":"source/_posts/How-to-perform-MMPBSA.md","hash":"f6c65eab37cd80528122869a5aa6be9e7843abeb","modified":1750346232099},{"_id":"source/_posts/dcd文件格式.md","hash":"e4293ef63a3844c5fff00582655aef0716188596","modified":1750346232102},{"_id":"source/_posts/opensuse15-4安装Nvidia驱动.md","hash":"107a01f97f8ca71bad8c9ebbe739ed256402b652","modified":1750346232109},{"_id":"source/_posts/how-to-install-gpu-version-of-genesis-on-group-server.md","hash":"0ece074f54e5dae46457499d2a64716b16d504a2","modified":1750346232104},{"_id":"source/_posts/hello-world.md.bak","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1670334522000},{"_id":"source/_posts/lammps_software.md","hash":"504b5ffd082af80b172ee8571afe21391e012bd6","modified":1750346232104},{"_id":"source/_posts/opensuse15-4安装packman.md","hash":"bf822966bdbb92cd3c400e89ff79af15f0f39c46","modified":1675688638000},{"_id":"source/_posts/recipe-of-Makefile.md.bak","hash":"37af95ad397408d4f348d11c2f0e28c558e957f2","modified":1750346232112},{"_id":"source/_posts/使用Modeller补缺失残基.md","hash":"d2cd0c1939295a19335850a25e336d7e70a0a501","modified":1671078756000},{"_id":"source/_posts/ssh登陆相关.md","hash":"81aefa33dd5ff640bc1816830ba333c8153de20f","modified":1750346232112},{"_id":"source/_posts/如何使用git.md","hash":"8062c15409af7cf2634e5803042079848bf0c5c4","modified":1676453706000},{"_id":"source/_posts/制作小分子力场.md","hash":"806d89b8eb4b76c55acca35c186800d559b8e4d1","modified":1673256298000},{"_id":"source/_posts/在opensuse上外网远程连接.md","hash":"35280cfbca23d3d47b96f9f8e08c52510165d7e8","modified":1750346232114},{"_id":"source/_posts/在latex中定义新命令.md","hash":"df8f9508ebf7c6a740a120c1dfd00be20d22c076","modified":1673252220000},{"_id":"source/_posts/数学分析学习.md","hash":"2c14eb00e5911eb5c73f331e2d7b0a329e27b3d3","modified":1671078756000},{"_id":"source/_posts/计算机程序的构造与解释.md","hash":"35147dee8d5f998948e187fb8536a8d8b61c05e1","modified":1670686832000},{"_id":"source/_posts/安装amber22的坑.md","hash":"e55cf2affa0d7ebfbbc680af472d6d15289a70a6","modified":1750346232146},{"_id":"source/_posts/解决U盘刻盘空间变小问题.md","hash":"4652cd5c906ad8b503dd33044a13aa07c240ee76","modified":1675698680000},{"_id":"source/_posts/计算机系统基础第七章习题.md.bak","hash":"827fc731e8d071fa18de8b5c3116f41847dab875","modified":1750346232155},{"_id":"source/_posts/计算机系统基础第一章习题.md.bak","hash":"b7506af5761d80becb0e8921e0c27a9b88357abd","modified":1750346232153},{"_id":"source/_posts/计算机系统基础第二章习题.md.bak","hash":"72ceb6b2aa3f4a5f8688a50e8ef334581131a065","modified":1750346232159},{"_id":"source/_posts/计算机系统基础第三章习题.md.bak","hash":"e83652e2d311146a581ae66d6a7985f444636706","modified":1750346232157},{"_id":"source/_posts/计算机系统基础第八章习题.md.bak","hash":"45e2a521ea37861f6f3086855c10ba5b05379fae","modified":1750346232161},{"_id":"source/_posts/计算机系统基础第五章习题.md.bak","hash":"ae29f43f45837237a36cca584635715b11d10452","modified":1750346232159},{"_id":"source/_posts/计算机系统基础第四章习题.md.bak","hash":"7cefee9a06363c0d6dce7490f74d2b106577778e","modified":1750346232165},{"_id":"source/about/index.md","hash":"888f2d0903308c895f2964ef6d5e6f234292a9bf","modified":1670434928000},{"_id":"source/gallery/index.md","hash":"74c1a01479911df54705978a3b76733000d62d37","modified":1670433134000},{"_id":"source/_posts/计算机系统基础第六章习题.md.bak","hash":"475cec6dd27f5433c558dca9fd228027dc9cea0b","modified":1750346232163},{"_id":"source/schedule/index.md","hash":"5976be059b7b0d7212d80422938358857af896b7","modified":1672323452000},{"_id":"source/categories/index.md","hash":"0afcadd6af7f69b0ef961a8479e889b1c7ff310d","modified":1670434532000},{"_id":"source/projects/index.md","hash":"cc1efe74016e77c7881c34719bf3668683213085","modified":1750352910738},{"_id":"source/tags/index.md","hash":"745fb85a831982281309789474cd1a814a63eb54","modified":1670434706000},{"_id":"source/_posts/制作小分子力场/tppmktop.png","hash":"8886e032643134b685a359c55e49f0e690dadbdb","modified":1672583308000},{"_id":"source/_posts/制作小分子力场/openbabel.png","hash":"7f863b3c87de2408a5f6f21ed01b3480cf5acad2","modified":1672321526000},{"_id":"source/_posts/制作小分子力场/LigParGen.png","hash":"7c289f34e97dfa4ea28d81d24534f2f6273a646d","modified":1672581898000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1670440270000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1670440272000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1670440270000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1670440272000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1670440270000},{"_id":"themes/next/_config.yml","hash":"9be12f30cfff9b5ec0cd0783ee80b8e584b18d55","modified":1671205030000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1670440270000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1670440268000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1670440270000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1670440268000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1670440268000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1670440268000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1670440268000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1670440268000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1670440268000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1670440268000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1670440268000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1670440268000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1670440268000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1670440268000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1670440268000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1670440268000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1670440268000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1670440268000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1670440268000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1670440268000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1670440268000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1670440268000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1670440268000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1670440268000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1670440268000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1670440268000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1670440268000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1670440268000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1670440268000},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1670440268000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1670440268000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1670440268000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1670440268000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1670440268000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1670440270000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1670440272000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1670440268000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1670440270000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1670440270000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1670440270000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1670440270000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1670440268000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1670440270000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1670440268000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1670440268000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1670440268000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1670440268000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1670440268000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1670440272000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1670440272000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1670440272000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1670440272000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1670440270000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1670440272000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1670440272000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1670440272000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1670440272000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1670440272000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1670440272000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1670440272000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1670440272000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1670440270000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1670440268000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1670440270000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1670440270000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1670440268000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1670440268000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1670440270000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1670440268000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1670440268000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1670440268000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1670440268000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1670440268000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1670440268000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1670440268000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1670440268000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1670440268000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1670440268000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1670440268000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1670440268000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1670440268000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1670440268000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1670440268000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1670440268000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1670440268000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1670440266000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1670440266000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1670440266000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1670440268000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1670440268000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1670440268000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1670440268000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1670440268000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1670440268000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1670440268000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1670440268000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1670440268000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1670440268000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1670440268000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1670440268000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1670440268000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1670440268000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1670440268000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1670440268000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1670440268000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1670440268000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1670440272000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1670440268000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1670440272000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1670440266000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1670440272000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1670440272000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1670440272000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1670440272000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1670440272000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1670440270000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1670440270000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1670440272000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1670440272000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1670440272000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1670440270000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1670440272000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1670440270000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1670440272000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1670440270000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1670440270000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1670440272000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1670440272000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1670440272000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1670440272000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1670440272000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1670440270000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1670440270000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1670440270000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1670440270000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1670440270000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1670440270000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1670440270000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1670440270000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1670440270000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1670440270000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1670440270000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1670440270000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1670440270000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1670440270000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1670440270000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1670440270000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1670440270000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1670440270000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1670440270000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1670440270000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1670440270000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1670440270000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1670440270000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1670440268000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1670440268000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1670440268000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1670440270000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1670440268000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1670440270000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1670440268000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1670440268000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1670440268000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1670440268000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1670440268000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1670440268000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1670440268000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1670440266000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1670440266000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1670440266000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1670440266000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1670440268000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1670440266000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1670440266000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1670440268000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1670440266000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1670440268000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1670440266000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1670440266000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1670440268000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1670440268000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1670440266000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1670440264000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1670440264000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1670440266000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1670440266000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1670440266000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1670440268000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1670440268000},{"_id":"themes/next/source/images/avatar.jpg","hash":"24c315983945886ec3323119e44e7cffae9f5716","modified":1671199756000},{"_id":"public/categories/index.html","hash":"8548a8f4b11a976198e9340948506d1ecb0b290e","modified":1750352939634},{"_id":"public/about/index.html","hash":"02ab0e09f604bb3e7a78ba2c0bfa4cbb4baafd3c","modified":1750352939634},{"_id":"public/gallery/index.html","hash":"885191eb7cb2fb2a7740f360b05b0aaa8aef93ed","modified":1750352939634},{"_id":"public/projects/index.html","hash":"5083c64ba6c5420bb97bbb33e99c7bbc533bd2dd","modified":1750352939634},{"_id":"public/schedule/index.html","hash":"da98b42a42a25e6463c5b46b5a9e612ce7b31bf0","modified":1750352939634},{"_id":"public/tags/index.html","hash":"b284d9589e8430d1a6948d3d3249f2d5024129fb","modified":1750352939634},{"_id":"public/2025/06/19/lammps_software/index.html","hash":"d4c7b12a7f5a3dfffaed946057adae5079372033","modified":1750352939634},{"_id":"public/2025/06/19/dcd文件格式/index.html","hash":"fa2e607811256ab6861c97b0c761ab23fe29c697","modified":1750352939634},{"_id":"public/2024/10/04/How-to-perform-MMPBSA/index.html","hash":"6dbbef2fa151ab3b86139a7aedd0a3a6e8bd419b","modified":1750352939634},{"_id":"public/2024/10/03/how-to-install-gpu-version-of-genesis-on-group-server/index.html","hash":"bd7b33df7d814cba8934b0b989f470c951b3c434","modified":1750352939634},{"_id":"public/2024/10/02/How-to-use-tsubame/index.html","hash":"350733b4a26601573f9ed6cf6e35e160103ce46c","modified":1750352939634},{"_id":"public/2024/09/30/Performing-MM-PBSA-on-Fugaku/index.html","hash":"6a4685ea60e7c68522a35c43ba236c30935687b0","modified":1750352939634},{"_id":"public/2023/08/07/在opensuse上外网远程连接/index.html","hash":"07d417692f5efe0a99a9c1413dd6a7f540f0eb28","modified":1750352939634},{"_id":"public/2023/04/18/安装amber22的坑/index.html","hash":"15852cf3bbe56ae452ea2fdfa715296bd3850629","modified":1750352939634},{"_id":"public/2023/03/01/ssh登陆相关/index.html","hash":"8ed5c1aa26d659d4d0425eeaafec4ec797444d00","modified":1750352939634},{"_id":"public/2023/02/15/如何使用git/index.html","hash":"28548cf070505990849a6e1f3316d3e1f821c6df","modified":1750352939634},{"_id":"public/2023/02/07/opensuse15-4安装Nvidia驱动/index.html","hash":"f13522ce93f9ec351012abdce4c7505205ebe2b0","modified":1750352939634},{"_id":"public/2023/02/06/解决U盘刻盘空间变小问题/index.html","hash":"7a7dd8048ab465b3c4a671bab5b7ffd317a8503e","modified":1750352939634},{"_id":"public/2023/01/09/bash-shell的一些以前没用过的特性/index.html","hash":"3e43e0b679a05479e940bb16f1c93c6240d44bba","modified":1750352939634},{"_id":"public/2023/02/06/opensuse15-4安装packman/index.html","hash":"abf31f257909bef68f6817b82762548701302169","modified":1750352939634},{"_id":"public/2023/01/07/在latex中定义新命令/index.html","hash":"420c526a11700dcf239d6ebbc0eaab261abf16eb","modified":1750352939634},{"_id":"public/2022/12/10/计算机程序的构造与解释/index.html","hash":"52a380896d1f824827a3f0a9f86d73f15b8293de","modified":1750352939634},{"_id":"public/2022/12/29/制作小分子力场/index.html","hash":"3cc79a8dbcbd2cb655882ac03719c859f2cd23a1","modified":1750352939634},{"_id":"public/2022/12/08/使用Modeller补缺失残基/index.html","hash":"d7d79bb79bc99b5349b8956e9d2e4644610012ce","modified":1750352939634},{"_id":"public/2022/12/07/数学分析学习/index.html","hash":"37381128093556b15728c87a454a45755e225a1c","modified":1750352939634},{"_id":"public/categories/bash/index.html","hash":"d0bf6fa7c52ea55b03f9fe1fb1aeb5fddc5c7de9","modified":1750352939634},{"_id":"public/categories/MD/index.html","hash":"e2c3a359e0ab320d9e03123dcda8c5b5a9f8eafc","modified":1750352939634},{"_id":"public/categories/计算机/index.html","hash":"b6355bbf169ce5340c633162451a73ce42110099","modified":1750352939634},{"_id":"public/categories/分子模拟/index.html","hash":"52666ce56145b3ca19b1de0f75abf318a01bce81","modified":1750352939634},{"_id":"public/categories/数学/index.html","hash":"5c64cee0a2d18afd9c8fabe8c470d78ba900c992","modified":1750352939634},{"_id":"public/categories/latex/index.html","hash":"340f92a3fa565a672c0d5bc7fb3f31ea6d68e602","modified":1750352939634},{"_id":"public/archives/index.html","hash":"174bbb791b58267fee07816d2a3a86121fc18565","modified":1750352939634},{"_id":"public/archives/page/2/index.html","hash":"6a1f79cb29ce6ab4bab6472c90c33cc45cc20fcc","modified":1750352939634},{"_id":"public/archives/2022/index.html","hash":"9cb2decf8cd49a0eda60d207d0d2814c90b7d5a2","modified":1750352939634},{"_id":"public/archives/2022/12/index.html","hash":"0bfcc9de3662ccb4093aa3fc96b9c1fa0914e2ef","modified":1750352939634},{"_id":"public/archives/2023/index.html","hash":"b143142df79a6b1ab2500a7a762e7a594802a4c3","modified":1750352939634},{"_id":"public/archives/2023/01/index.html","hash":"9c23f03cf809daf0e1d32ff20872f74f1e5a6a3b","modified":1750352939634},{"_id":"public/archives/2023/02/index.html","hash":"9b8aa49066f8cd671f9941ff55dd6e5c521c2e0b","modified":1750352939634},{"_id":"public/archives/2023/03/index.html","hash":"39e032b9b6ccbada9eff8563541e70f9015ce72f","modified":1750352939634},{"_id":"public/archives/2023/04/index.html","hash":"dff271d733de6707e71d57123ee960fc8949c8b0","modified":1750352939634},{"_id":"public/archives/2023/08/index.html","hash":"d74e9425ad826d0a3cf332f79d90a6214fbd84e9","modified":1750352939634},{"_id":"public/archives/2024/index.html","hash":"ee80b6957a2c7c86c9d7b6088129d280c8b737f9","modified":1750352939634},{"_id":"public/archives/2024/09/index.html","hash":"a303f8b31a4f24e42a2abb7a82d3260df02c6f84","modified":1750352939634},{"_id":"public/archives/2024/10/index.html","hash":"2bdebf104e974efde36b9732f26acd70ea1ac44b","modified":1750352939634},{"_id":"public/index.html","hash":"9637d0a9fe19d42604d9fcba7e9e8edc99100ee3","modified":1750352939634},{"_id":"public/archives/2025/index.html","hash":"17290b2cb3a8365e6fda60faaa7344cb57101df5","modified":1750352939634},{"_id":"public/archives/2025/06/index.html","hash":"7e6ec75e940b337382a5166bba18744de93771a6","modified":1750352939634},{"_id":"public/tags/MD/index.html","hash":"9bff878e491b4355b4e9497aa02a37fd285e895a","modified":1750352939634},{"_id":"public/page/2/index.html","hash":"1d8ef6602b070d7f21ccba4c677d82beb8b949d4","modified":1750352939634},{"_id":"public/tags/bash/index.html","hash":"640aa88e34e8873c3bd39b8237b0f7c6fec421d2","modified":1750352939634},{"_id":"public/tags/C/index.html","hash":"3fc35f8da92dbce2b4dc53303c8cacbff1836bd9","modified":1750352939634},{"_id":"public/tags/Fortran/index.html","hash":"0ea2045d0bccd9ad9ea1b48a9630ccf4e78c6bb8","modified":1750352939634},{"_id":"public/tags/linux/index.html","hash":"8b30088749a66b0120e31c8067107b58edd65b8c","modified":1750352939634},{"_id":"public/tags/ssh/index.html","hash":"a5291c86e082eb832d52faba77182f8695a755ac","modified":1750352939634},{"_id":"public/tags/pdb预处理/index.html","hash":"4bd6ba57eb3dbe0953142d91e2bfdc608d44682d","modified":1750352939634},{"_id":"public/tags/力场构建/index.html","hash":"844777a8ad444b913a582b1275a195fd602e3ff4","modified":1750352939634},{"_id":"public/tags/latex/index.html","hash":"2d54d80c2f37cf87c4f48f14e56cbd76eb11bf6b","modified":1750352939634},{"_id":"public/tags/git/index.html","hash":"f907e335ceebf03387543bc834a8e2a81e6a522d","modified":1750352939634},{"_id":"public/tags/软件安装/index.html","hash":"aa3c8d008c95f72ace02ca5d6c480f4af8922a71","modified":1750352939634},{"_id":"public/tags/数学分析/index.html","hash":"f735ab13c49861277db3c704f6afae239dae32e5","modified":1750352939634},{"_id":"public/tags/计算机程序的构造与解释/index.html","hash":"98b873365f4023017e249d6e620f8e6c7ecae523","modified":1750352939634},{"_id":"public/tags/python/index.html","hash":"4401ed2a20e19e2cc6fd51a8abb3eefc0383f2aa","modified":1750352939634},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1750352939634},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1750352939634},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1750352939634},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1750352939634},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1750352939634},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1750352939634},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1750352939634},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1750352939634},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1750352939634},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1750352939634},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1750352939634},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1750352939634},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1750352939634},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1750352939634},{"_id":"public/css/main.css","hash":"983251b90e40b47632aec776039653c703834816","modified":1750352939634},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1750352939634},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1750352939634},{"_id":"public/2022/12/29/制作小分子力场/openbabel.png","hash":"7f863b3c87de2408a5f6f21ed01b3480cf5acad2","modified":1750352939634},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1750352939634},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1750352939634},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1750352939634},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1750352939634},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1750352939634},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1750352939634},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1750352939634},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1750352939634},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1750352939634},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1750352939634},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1750352939634},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1750352939634},{"_id":"public/2022/12/29/制作小分子力场/tppmktop.png","hash":"8886e032643134b685a359c55e49f0e690dadbdb","modified":1750352939634},{"_id":"public/2022/12/29/制作小分子力场/LigParGen.png","hash":"7c289f34e97dfa4ea28d81d24534f2f6273a646d","modified":1750352939634},{"_id":"public/images/avatar.jpg","hash":"24c315983945886ec3323119e44e7cffae9f5716","modified":1750352939634}],"Category":[{"name":"MD","_id":"cmc3my4pe0004l8vq1i4z2ng8"},{"name":"bash","_id":"cmc3my4ps000ql8vq8xehh1al"},{"name":"计算机","_id":"cmc3my4pw000yl8vqd58f82qa"},{"name":"分子模拟","_id":"cmc3my4q00019l8vq9cqz5vdw"},{"name":"latex","_id":"cmc3my4q2001hl8vqet67hm1z"},{"name":"数学","_id":"cmc3my4q6001tl8vq0mr757vn"}],"Data":[],"Page":[{"title":"categories","date":"2022-12-07T16:16:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-12-08 01:16:42\ntype: \"categories\"\n---\n","updated":"2022-12-07T17:35:32.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmc3my4p20000l8vq44k0162n","content":"","excerpt":"","more":""},{"title":"about","date":"2022-12-07T16:12:52.000Z","type":"about","_content":"<div align='center'>email: wuyichao71@126.com</div>\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-12-08 01:12:52\ntype: \"about\"\n---\n<div align='center'>email: wuyichao71@126.com</div>\n","updated":"2022-12-07T17:42:08.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmc3my4pb0002l8vq1rky9hsg","content":"<div align='center'>email: wuyichao71@126.com</div>\n","excerpt":"","more":"<div align='center'>email: wuyichao71@126.com</div>\n"},{"title":"gallery","date":"2022-12-07T16:12:12.000Z","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate: 2022-12-08 01:12:12\n---\n","updated":"2022-12-07T17:12:14.000Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"cmc3my4ph0006l8vqferx8n2x","content":"","excerpt":"","more":""},{"title":"projects","date":"2025-06-19T17:04:15.000Z","_content":"\n# Projects\n\n- [Blog](https://wuyichao71.github.io)\n- [Catbook](https://wuyichao71.github.io/catbook)\n- [GameBoard](https://wuyichao71.github.io/gameboard)\n- [md_library](https://github.com/wuyichao71/md_library)\n","source":"projects/index.md","raw":"---\ntitle: projects\ndate: 2025-06-20 02:04:15\n---\n\n# Projects\n\n- [Blog](https://wuyichao71.github.io)\n- [Catbook](https://wuyichao71.github.io/catbook)\n- [GameBoard](https://wuyichao71.github.io/gameboard)\n- [md_library](https://github.com/wuyichao71/md_library)\n","updated":"2025-06-19T17:08:30.738Z","path":"projects/index.html","comments":1,"layout":"page","_id":"cmc3my4pi0008l8vq3n1d03yb","content":"<h1 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h1><ul>\n<li><a href=\"https://wuyichao71.github.io/\">Blog</a></li>\n<li><a href=\"https://wuyichao71.github.io/catbook\">Catbook</a></li>\n<li><a href=\"https://wuyichao71.github.io/gameboard\">GameBoard</a></li>\n<li><a href=\"https://github.com/wuyichao71/md_library\">md_library</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Projects\"><a href=\"#Projects\" class=\"headerlink\" title=\"Projects\"></a>Projects</h1><ul>\n<li><a href=\"https://wuyichao71.github.io/\">Blog</a></li>\n<li><a href=\"https://wuyichao71.github.io/catbook\">Catbook</a></li>\n<li><a href=\"https://wuyichao71.github.io/gameboard\">GameBoard</a></li>\n<li><a href=\"https://github.com/wuyichao71/md_library\">md_library</a></li>\n</ul>\n"},{"title":"schedule","date":"2022-12-07T16:17:50.000Z","mathjax":true,"_content":"# 2022-12-29\n转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。  \n\n\n# 2022-12-16  \n暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。  \n\n其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。  \n\n最近发现mendeley真难用，装了一天就卸载了，还是用zotero。\n\n数学分析已经学到了函数极限部分，从$\\epsilon-N$语言到了$\\epsilon-\\delta$语言。\n\nSICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。\n<!--more-->","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2022-12-08 01:17:50\nmathjax: true\n---\n# 2022-12-29\n转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。  \n\n\n# 2022-12-16  \n暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。  \n\n其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。  \n\n最近发现mendeley真难用，装了一天就卸载了，还是用zotero。\n\n数学分析已经学到了函数极限部分，从$\\epsilon-N$语言到了$\\epsilon-\\delta$语言。\n\nSICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。\n<!--more-->","updated":"2022-12-29T14:17:32.000Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cmc3my4pk000al8vqdyxu23ue","content":"<h1 id=\"2022-12-29\"><a href=\"#2022-12-29\" class=\"headerlink\" title=\"2022-12-29\"></a>2022-12-29</h1><p>转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。  </p>\n<h1 id=\"2022-12-16\"><a href=\"#2022-12-16\" class=\"headerlink\" title=\"2022-12-16\"></a>2022-12-16</h1><p>暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。  </p>\n<p>其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。  </p>\n<p>最近发现mendeley真难用，装了一天就卸载了，还是用zotero。</p>\n<p>数学分析已经学到了函数极限部分，从$\\epsilon-N$语言到了$\\epsilon-\\delta$语言。</p>\n<p>SICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。</p>\n<span id=\"more\"></span>","excerpt":"<h1 id=\"2022-12-29\"><a href=\"#2022-12-29\" class=\"headerlink\" title=\"2022-12-29\"></a>2022-12-29</h1><p>转眼间已经过了这么旧没写了，最近阳了，病了一场，终于能够坐起来了。明天就要开始和ambertools和gaussain打交道了。  </p>\n<h1 id=\"2022-12-16\"><a href=\"#2022-12-16\" class=\"headerlink\" title=\"2022-12-16\"></a>2022-12-16</h1><p>暂时的计划是把RPA的蛋白结构跑起来去，明天开始做蛋白部分的ninfo文件。首先需要把pdb中的残基序号和cafemol跑出来的序号对应起来，先写这个文件，这部分我在补充残基的时候基本上写过了，可以直接拿出来用。  </p>\n<p>其次要把盐桥的文献看完。暂时发现，重水有相应的拓扑文件，但是还没有发现acetate和methylammonium，这部分的拓扑生成要查找下。  </p>\n<p>最近发现mendeley真难用，装了一天就卸载了，还是用zotero。</p>\n<p>数学分析已经学到了函数极限部分，从$\\epsilon-N$语言到了$\\epsilon-\\delta$语言。</p>\n<p>SICP则学完了高阶函数(higher-order function)部分，完成了第一个project，受益良多，再继续看吧。</p>","more":""},{"title":"tags","date":"2022-12-07T16:15:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-08 01:15:04\ntype: \"tags\"\n---\n","updated":"2022-12-07T17:38:26.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmc3my4pn000fl8vq31g53yhs","content":"","excerpt":"","more":""}],"Post":[{"title":"How to perform MMPBSA","date":"2024-10-04T04:25:25.000Z","_content":"\nThe detail of how to preform MM/PBSA is here: [https://github.com/wuyichao71/How_to_perform_MMPBSA](https://github.com/wuyichao71/How_to_perform_MMPBSA)\n","source":"_posts/How-to-perform-MMPBSA.md","raw":"---\ntitle: How to perform MMPBSA\ndate: 2024-10-04 13:25:25\ncategories:\n    - MD\ntags:\n    - MD\n---\n\nThe detail of how to preform MM/PBSA is here: [https://github.com/wuyichao71/How_to_perform_MMPBSA](https://github.com/wuyichao71/How_to_perform_MMPBSA)\n","slug":"How-to-perform-MMPBSA","published":1,"updated":"2025-06-19T15:17:12.099Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4p80001l8vq6uc86zi0","content":"<p>The detail of how to preform MM&#x2F;PBSA is here: <a href=\"https://github.com/wuyichao71/How_to_perform_MMPBSA\">https://github.com/wuyichao71/How_to_perform_MMPBSA</a></p>\n","excerpt":"","more":"<p>The detail of how to preform MM&#x2F;PBSA is here: <a href=\"https://github.com/wuyichao71/How_to_perform_MMPBSA\">https://github.com/wuyichao71/How_to_perform_MMPBSA</a></p>\n"},{"title":"Performing MM/PBSA on Fugaku","date":"2024-09-30T06:00:14.000Z","_content":"## Preforming MM/PBSA on Fugaku\n\n<!--more-->\n\nThe detail of how to preform MM/PBSA on Fugaku is here: [https://github.com/wuyichao71/MMPBSA_on_Fugaku](https://github.com/wuyichao71/MMPBSA_on_Fugaku)\nIt is not recommanded to perform MM/PBSA on Fugaku!\n","source":"_posts/Performing-MM-PBSA-on-Fugaku.md","raw":"---\ntitle: Performing MM/PBSA on Fugaku\ndate: 2024-09-30 15:00:14\ncategories:\n    - MD\ntags:\n    - MD\n---\n## Preforming MM/PBSA on Fugaku\n\n<!--more-->\n\nThe detail of how to preform MM/PBSA on Fugaku is here: [https://github.com/wuyichao71/MMPBSA_on_Fugaku](https://github.com/wuyichao71/MMPBSA_on_Fugaku)\nIt is not recommanded to perform MM/PBSA on Fugaku!\n","slug":"Performing-MM-PBSA-on-Fugaku","published":1,"updated":"2025-06-19T15:17:12.102Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pc0003l8vq379j68pf","content":"<h2 id=\"Preforming-MM-PBSA-on-Fugaku\"><a href=\"#Preforming-MM-PBSA-on-Fugaku\" class=\"headerlink\" title=\"Preforming MM&#x2F;PBSA on Fugaku\"></a>Preforming MM&#x2F;PBSA on Fugaku</h2><span id=\"more\"></span>\n\n<p>The detail of how to preform MM&#x2F;PBSA on Fugaku is here: <a href=\"https://github.com/wuyichao71/MMPBSA_on_Fugaku\">https://github.com/wuyichao71/MMPBSA_on_Fugaku</a><br>It is not recommanded to perform MM&#x2F;PBSA on Fugaku!</p>\n","excerpt":"<h2 id=\"Preforming-MM-PBSA-on-Fugaku\"><a href=\"#Preforming-MM-PBSA-on-Fugaku\" class=\"headerlink\" title=\"Preforming MM&#x2F;PBSA on Fugaku\"></a>Preforming MM&#x2F;PBSA on Fugaku</h2>","more":"<p>The detail of how to preform MM&#x2F;PBSA on Fugaku is here: <a href=\"https://github.com/wuyichao71/MMPBSA_on_Fugaku\">https://github.com/wuyichao71/MMPBSA_on_Fugaku</a><br>It is not recommanded to perform MM&#x2F;PBSA on Fugaku!</p>"},{"title":"How to use tsubame","date":"2024-10-02T04:41:48.000Z","_content":"\n## Check the usage status\n\n### How to check TSUBAME points\n\n```bash\nt4-user-info group point\n```\n\n### How to check the usage of home directory\n\n```bash\nt4-user-info disk home\n```\n\n<!--more-->\n\n### Check the usage status of group disk\n\n```bash\nt4-user-info disk group\n```\n\n","source":"_posts/How-to-use-tsubame.md","raw":"---\ntitle: How to use tsubame\ndate: 2024-10-02 13:41:48\ncategories:\n    - MD\ntags:\n    - MD\n---\n\n## Check the usage status\n\n### How to check TSUBAME points\n\n```bash\nt4-user-info group point\n```\n\n### How to check the usage of home directory\n\n```bash\nt4-user-info disk home\n```\n\n<!--more-->\n\n### Check the usage status of group disk\n\n```bash\nt4-user-info disk group\n```\n\n","slug":"How-to-use-tsubame","published":1,"updated":"2025-06-19T15:17:12.100Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4ph0007l8vq5gbv7x0g","content":"<h2 id=\"Check-the-usage-status\"><a href=\"#Check-the-usage-status\" class=\"headerlink\" title=\"Check the usage status\"></a>Check the usage status</h2><h3 id=\"How-to-check-TSUBAME-points\"><a href=\"#How-to-check-TSUBAME-points\" class=\"headerlink\" title=\"How to check TSUBAME points\"></a>How to check TSUBAME points</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t4-user-info group point</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-check-the-usage-of-home-directory\"><a href=\"#How-to-check-the-usage-of-home-directory\" class=\"headerlink\" title=\"How to check the usage of home directory\"></a>How to check the usage of home directory</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t4-user-info disk home</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"Check-the-usage-status-of-group-disk\"><a href=\"#Check-the-usage-status-of-group-disk\" class=\"headerlink\" title=\"Check the usage status of group disk\"></a>Check the usage status of group disk</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t4-user-info disk group</span><br></pre></td></tr></table></figure>\n\n","excerpt":"<h2 id=\"Check-the-usage-status\"><a href=\"#Check-the-usage-status\" class=\"headerlink\" title=\"Check the usage status\"></a>Check the usage status</h2><h3 id=\"How-to-check-TSUBAME-points\"><a href=\"#How-to-check-TSUBAME-points\" class=\"headerlink\" title=\"How to check TSUBAME points\"></a>How to check TSUBAME points</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t4-user-info group point</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-check-the-usage-of-home-directory\"><a href=\"#How-to-check-the-usage-of-home-directory\" class=\"headerlink\" title=\"How to check the usage of home directory\"></a>How to check the usage of home directory</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t4-user-info disk home</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Check-the-usage-status-of-group-disk\"><a href=\"#Check-the-usage-status-of-group-disk\" class=\"headerlink\" title=\"Check the usage status of group disk\"></a>Check the usage status of group disk</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t4-user-info disk group</span><br></pre></td></tr></table></figure>"},{"title":"bash shell的一些以前没用过的特性","date":"2023-01-09T07:03:43.000Z","_content":"\n# 转化编码格式\n有时候在linux打开文件会出现乱码，这时候可以使用`iconv`转化编码格式:\n```shell\niconv -f GB2312 -t utf-8 -o output.txt input.txt\n```\n以上命令可以将GB2312编码格式的`input.txt`文件转化为utf-8编码格式的`output.txt`文件。\n\n<!--more-->\n# 数组\n用以下命令可以设定bash数组:\n```bash\n#!/bin/bash\nb='b'\narray=('a' b 1)\n```\n用以下命令可以取出列表中的元素:\n```bash\nc=${a[0]}\n```\n可以用以下命令取数组长度:\n```bash\nlength=${#a[@]}\n```\n\n# =~ \n`=~`用来进行正则匹配，匹配成功则为真，用法是:\n```bash\nif [[ aaa =~ a.* ]]; then\n    echo 'aaa'\nfi\n```\n","source":"_posts/bash-shell的一些以前没用过的特性.md","raw":"---\ntitle: bash shell的一些以前没用过的特性\ndate: 2023-01-09 16:03:43\ncategories:\n    - bash\ntags:\n    - bash\n---\n\n# 转化编码格式\n有时候在linux打开文件会出现乱码，这时候可以使用`iconv`转化编码格式:\n```shell\niconv -f GB2312 -t utf-8 -o output.txt input.txt\n```\n以上命令可以将GB2312编码格式的`input.txt`文件转化为utf-8编码格式的`output.txt`文件。\n\n<!--more-->\n# 数组\n用以下命令可以设定bash数组:\n```bash\n#!/bin/bash\nb='b'\narray=('a' b 1)\n```\n用以下命令可以取出列表中的元素:\n```bash\nc=${a[0]}\n```\n可以用以下命令取数组长度:\n```bash\nlength=${#a[@]}\n```\n\n# =~ \n`=~`用来进行正则匹配，匹配成功则为真，用法是:\n```bash\nif [[ aaa =~ a.* ]]; then\n    echo 'aaa'\nfi\n```\n","slug":"bash-shell的一些以前没用过的特性","published":1,"updated":"2023-01-09T12:00:12.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pj0009l8vqfwdahlv7","content":"<h1 id=\"转化编码格式\"><a href=\"#转化编码格式\" class=\"headerlink\" title=\"转化编码格式\"></a>转化编码格式</h1><p>有时候在linux打开文件会出现乱码，这时候可以使用<code>iconv</code>转化编码格式:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv -f GB2312 -t utf-8 -o output.txt input.txt</span><br></pre></td></tr></table></figure>\n<p>以上命令可以将GB2312编码格式的<code>input.txt</code>文件转化为utf-8编码格式的<code>output.txt</code>文件。</p>\n<span id=\"more\"></span>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>用以下命令可以设定bash数组:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">b=<span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">array=(<span class=\"string\">&#x27;a&#x27;</span> b 1)</span><br></pre></td></tr></table></figure>\n<p>用以下命令可以取出列表中的元素:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"variable\">$&#123;a[0]&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以用以下命令取数组长度:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length=<span class=\"variable\">$&#123;#a[@]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&#x3D;~\"></a>&#x3D;~</h1><p><code>=~</code>用来进行正则匹配，匹配成功则为真，用法是:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ aaa =~ a.* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"转化编码格式\"><a href=\"#转化编码格式\" class=\"headerlink\" title=\"转化编码格式\"></a>转化编码格式</h1><p>有时候在linux打开文件会出现乱码，这时候可以使用<code>iconv</code>转化编码格式:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv -f GB2312 -t utf-8 -o output.txt input.txt</span><br></pre></td></tr></table></figure>\n<p>以上命令可以将GB2312编码格式的<code>input.txt</code>文件转化为utf-8编码格式的<code>output.txt</code>文件。</p>","more":"<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>用以下命令可以设定bash数组:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">b=<span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">array=(<span class=\"string\">&#x27;a&#x27;</span> b 1)</span><br></pre></td></tr></table></figure>\n<p>用以下命令可以取出列表中的元素:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"variable\">$&#123;a[0]&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以用以下命令取数组长度:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length=<span class=\"variable\">$&#123;#a[@]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&#x3D;~\"></a>&#x3D;~</h1><p><code>=~</code>用来进行正则匹配，匹配成功则为真，用法是:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [[ aaa =~ a.* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>"},{"title":"how to install gpu version of genesis on group server","date":"2024-10-03T08:10:55.000Z","_content":"\n## Install cuda 11 environment with miniconda\n\nBecause the server only have `cuda-12` and `cuda-12` will make the genesis get wrong results. Therefore, we need use miniconda to install `cuda-11` enviroment. We use below command to make a environment include `cuda-11.8`.\n\n<!--more-->\n\n```bash\nconda create -n cuda_11 -c nvidia cudatoolkit=11 cuda-nvcc=11 cuda-cudart-dev=11 cuda-nvtx=11\n```\n\nYou can activate the environment by `conda activate cuda_11`.\n\nThen, we source the intel compiler and add the cuda library to the `LD_LIBRARY_PATH`:\n\n```bash\nsource /opt/intel/oneapi/setvars.sh\nexport LD_LIBRARY_PATH=/your/miniconda/envs/cuda_11/lib:$LD_LIBRARY_PATH\n```\n\n## Compile genesis\n\nThen we can compile `genesis` use below command\n```bash\n./configure --enable-gpu --enable-mixed --program-suffix='-intel-mixed-cuda11-conda'\nmake -j 8\nmake install\n```\n\nAfter that, the genesis can preform correct calculation on cell.\n\n\n\n\n","source":"_posts/how-to-install-gpu-version-of-genesis-on-group-server.md","raw":"---\ntitle: how to install gpu version of genesis on group server\ndate: 2024-10-03 17:10:55\ncategories:\n    - MD\ntags:\n    - MD\n---\n\n## Install cuda 11 environment with miniconda\n\nBecause the server only have `cuda-12` and `cuda-12` will make the genesis get wrong results. Therefore, we need use miniconda to install `cuda-11` enviroment. We use below command to make a environment include `cuda-11.8`.\n\n<!--more-->\n\n```bash\nconda create -n cuda_11 -c nvidia cudatoolkit=11 cuda-nvcc=11 cuda-cudart-dev=11 cuda-nvtx=11\n```\n\nYou can activate the environment by `conda activate cuda_11`.\n\nThen, we source the intel compiler and add the cuda library to the `LD_LIBRARY_PATH`:\n\n```bash\nsource /opt/intel/oneapi/setvars.sh\nexport LD_LIBRARY_PATH=/your/miniconda/envs/cuda_11/lib:$LD_LIBRARY_PATH\n```\n\n## Compile genesis\n\nThen we can compile `genesis` use below command\n```bash\n./configure --enable-gpu --enable-mixed --program-suffix='-intel-mixed-cuda11-conda'\nmake -j 8\nmake install\n```\n\nAfter that, the genesis can preform correct calculation on cell.\n\n\n\n\n","slug":"how-to-install-gpu-version-of-genesis-on-group-server","published":1,"updated":"2025-06-19T15:17:12.104Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pl000bl8vq6e06d38r","content":"<h2 id=\"Install-cuda-11-environment-with-miniconda\"><a href=\"#Install-cuda-11-environment-with-miniconda\" class=\"headerlink\" title=\"Install cuda 11 environment with miniconda\"></a>Install cuda 11 environment with miniconda</h2><p>Because the server only have <code>cuda-12</code> and <code>cuda-12</code> will make the genesis get wrong results. Therefore, we need use miniconda to install <code>cuda-11</code> enviroment. We use below command to make a environment include <code>cuda-11.8</code>.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n cuda_11 -c nvidia cudatoolkit=11 cuda-nvcc=11 cuda-cudart-dev=11 cuda-nvtx=11</span><br></pre></td></tr></table></figure>\n\n<p>You can activate the environment by <code>conda activate cuda_11</code>.</p>\n<p>Then, we source the intel compiler and add the cuda library to the <code>LD_LIBRARY_PATH</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /opt/intel/oneapi/setvars.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/your/miniconda/envs/cuda_11/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Compile-genesis\"><a href=\"#Compile-genesis\" class=\"headerlink\" title=\"Compile genesis\"></a>Compile genesis</h2><p>Then we can compile <code>genesis</code> use below command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-gpu --enable-mixed --program-suffix=<span class=\"string\">&#x27;-intel-mixed-cuda11-conda&#x27;</span></span><br><span class=\"line\">make -j 8</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>After that, the genesis can preform correct calculation on cell.</p>\n","excerpt":"<h2 id=\"Install-cuda-11-environment-with-miniconda\"><a href=\"#Install-cuda-11-environment-with-miniconda\" class=\"headerlink\" title=\"Install cuda 11 environment with miniconda\"></a>Install cuda 11 environment with miniconda</h2><p>Because the server only have <code>cuda-12</code> and <code>cuda-12</code> will make the genesis get wrong results. Therefore, we need use miniconda to install <code>cuda-11</code> enviroment. We use below command to make a environment include <code>cuda-11.8</code>.</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n cuda_11 -c nvidia cudatoolkit=11 cuda-nvcc=11 cuda-cudart-dev=11 cuda-nvtx=11</span><br></pre></td></tr></table></figure>\n\n<p>You can activate the environment by <code>conda activate cuda_11</code>.</p>\n<p>Then, we source the intel compiler and add the cuda library to the <code>LD_LIBRARY_PATH</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /opt/intel/oneapi/setvars.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/your/miniconda/envs/cuda_11/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Compile-genesis\"><a href=\"#Compile-genesis\" class=\"headerlink\" title=\"Compile genesis\"></a>Compile genesis</h2><p>Then we can compile <code>genesis</code> use below command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-gpu --enable-mixed --program-suffix=<span class=\"string\">&#x27;-intel-mixed-cuda11-conda&#x27;</span></span><br><span class=\"line\">make -j 8</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>After that, the genesis can preform correct calculation on cell.</p>"},{"title":"dcd文件格式","date":"2025-06-19T03:08:13.000Z","_content":"\n# dcd 文件格式\n","source":"_posts/dcd文件格式.md","raw":"---\ntitle: dcd文件格式\ndate: 2025-06-19 12:08:13\ncategories:\n  - MD\ntags:\n  - C\n  - Fortran\n---\n\n# dcd 文件格式\n","slug":"dcd文件格式","published":1,"updated":"2025-06-19T15:17:12.102Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pn000gl8vq1kla1uyp","content":"<h1 id=\"dcd-文件格式\"><a href=\"#dcd-文件格式\" class=\"headerlink\" title=\"dcd 文件格式\"></a>dcd 文件格式</h1>","excerpt":"","more":"<h1 id=\"dcd-文件格式\"><a href=\"#dcd-文件格式\" class=\"headerlink\" title=\"dcd 文件格式\"></a>dcd 文件格式</h1>"},{"title":"opensuse15.4安装Nvidia驱动","date":"2023-02-07T04:37:36.000Z","_content":"更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。  \n\n# 添加Nvidia软件源\n首先需要添加Nvidia的软件源:\n```bash\nsudo zypper addrepo --refresh 'https://download.nvidia.com/opensuse/leap/$releasever' NVIDIA\n```\n\n# 获得硬件信息\n用以下命令可以获得硬件信息:\n```bash\nsudo lspci |grep VGA\nsudo lscpu |grep Arch # 中文要改成\"架构\"\n```\n或者使用以下命令查看:\n```bash\nsudo hwinfo --gfxcard | grep Model\nsudo hwinfo --arch\n```\n又或者使用`inxi`命令:\n```bash\ninxi -G\ninxi -Ga\n```\n\n# 安装\n现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:  \n1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices  \n2. G04 = driver v390 = legacy driver for GTX4xx/5xx Fermi devices  \n3. G05 = current driver for current devices  \n4. G06 = covers all cards GT700 and up  \n\n可以用一下命令查看显卡驱动信息:\n```bash\nsudo zypper se x11-video-nvidiaG0*\n```\n或者:\n```bash\nsudo zypper se -s x11-video-nvidiaG0*\n```\n如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:\n```bash\nzypper se nvidia-glG0*\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/opensuse15-4安装Nvidia驱动.md","raw":"---\ntitle: opensuse15.4安装Nvidia驱动\ndate: 2023-02-07 13:37:36\ntags:\n    - linux\ncategories:\n    - 计算机\n---\n更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。  \n\n# 添加Nvidia软件源\n首先需要添加Nvidia的软件源:\n```bash\nsudo zypper addrepo --refresh 'https://download.nvidia.com/opensuse/leap/$releasever' NVIDIA\n```\n\n# 获得硬件信息\n用以下命令可以获得硬件信息:\n```bash\nsudo lspci |grep VGA\nsudo lscpu |grep Arch # 中文要改成\"架构\"\n```\n或者使用以下命令查看:\n```bash\nsudo hwinfo --gfxcard | grep Model\nsudo hwinfo --arch\n```\n又或者使用`inxi`命令:\n```bash\ninxi -G\ninxi -Ga\n```\n\n# 安装\n现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:  \n1. G03 = driver v340 = legacy driver for GT8xxx/9xxx devices  \n2. G04 = driver v390 = legacy driver for GTX4xx/5xx Fermi devices  \n3. G05 = current driver for current devices  \n4. G06 = covers all cards GT700 and up  \n\n可以用一下命令查看显卡驱动信息:\n```bash\nsudo zypper se x11-video-nvidiaG0*\n```\n或者:\n```bash\nsudo zypper se -s x11-video-nvidiaG0*\n```\n如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:\n```bash\nzypper se nvidia-glG0*\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"opensuse15-4安装Nvidia驱动","published":1,"updated":"2025-06-19T15:17:12.109Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pp000il8vq9vc7didj","content":"<p>更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。  </p>\n<h1 id=\"添加Nvidia软件源\"><a href=\"#添加Nvidia软件源\" class=\"headerlink\" title=\"添加Nvidia软件源\"></a>添加Nvidia软件源</h1><p>首先需要添加Nvidia的软件源:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper addrepo --refresh <span class=\"string\">&#x27;https://download.nvidia.com/opensuse/leap/$releasever&#x27;</span> NVIDIA</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"获得硬件信息\"><a href=\"#获得硬件信息\" class=\"headerlink\" title=\"获得硬件信息\"></a>获得硬件信息</h1><p>用以下命令可以获得硬件信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> lspci |grep VGA</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> lscpu |grep Arch <span class=\"comment\"># 中文要改成&quot;架构&quot;</span></span><br></pre></td></tr></table></figure>\n<p>或者使用以下命令查看:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> hwinfo --gfxcard | grep Model</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> hwinfo --<span class=\"built_in\">arch</span></span><br></pre></td></tr></table></figure>\n<p>又或者使用<code>inxi</code>命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inxi -G</span><br><span class=\"line\">inxi -Ga</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:  </p>\n<ol>\n<li>G03 &#x3D; driver v340 &#x3D; legacy driver for GT8xxx&#x2F;9xxx devices  </li>\n<li>G04 &#x3D; driver v390 &#x3D; legacy driver for GTX4xx&#x2F;5xx Fermi devices  </li>\n<li>G05 &#x3D; current driver for current devices  </li>\n<li>G06 &#x3D; covers all cards GT700 and up</li>\n</ol>\n<p>可以用一下命令查看显卡驱动信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper se x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>\n<p>或者:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper se -s x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>\n<p>如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zypper se nvidia-glG0*</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<p>更新为opensuse15.4后显卡驱动被卸载了，每次安装显卡驱动都异常复杂，因此记录下来以便以后查阅。  </p>\n<h1 id=\"添加Nvidia软件源\"><a href=\"#添加Nvidia软件源\" class=\"headerlink\" title=\"添加Nvidia软件源\"></a>添加Nvidia软件源</h1><p>首先需要添加Nvidia的软件源:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper addrepo --refresh <span class=\"string\">&#x27;https://download.nvidia.com/opensuse/leap/$releasever&#x27;</span> NVIDIA</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"获得硬件信息\"><a href=\"#获得硬件信息\" class=\"headerlink\" title=\"获得硬件信息\"></a>获得硬件信息</h1><p>用以下命令可以获得硬件信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> lspci |grep VGA</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> lscpu |grep Arch <span class=\"comment\"># 中文要改成&quot;架构&quot;</span></span><br></pre></td></tr></table></figure>\n<p>或者使用以下命令查看:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> hwinfo --gfxcard | grep Model</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> hwinfo --<span class=\"built_in\">arch</span></span><br></pre></td></tr></table></figure>\n<p>又或者使用<code>inxi</code>命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inxi -G</span><br><span class=\"line\">inxi -Ga</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>现在查看下所需要的显卡驱动，显卡驱动的名字有如下含义:  </p>\n<ol>\n<li>G03 &#x3D; driver v340 &#x3D; legacy driver for GT8xxx&#x2F;9xxx devices  </li>\n<li>G04 &#x3D; driver v390 &#x3D; legacy driver for GTX4xx&#x2F;5xx Fermi devices  </li>\n<li>G05 &#x3D; current driver for current devices  </li>\n<li>G06 &#x3D; covers all cards GT700 and up</li>\n</ol>\n<p>可以用一下命令查看显卡驱动信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper se x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>\n<p>或者:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper se -s x11-video-nvidiaG0*</span><br></pre></td></tr></table></figure>\n<p>如果要或者OpenGL加速效果，可以用一下命令查看额外的包的信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zypper se nvidia-glG0*</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"lammps源代码一些函数分析","date":"2025-06-19T05:12:13.000Z","_content":"\n# lammps 源代码一些函数分析\n\n## 各个模块的结构\n\n运行命令为`./lmp_mpi -in in.eq -log log.phe2`\n\n### 解析命令行\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4b0, narg=5, arg=0x7fffffffd638, communicator=0x55555607f7a0 <ompi_mpi_comm_world>) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:544\n#1  0x00005555555e02df in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77\n```\n\n在`LAMMPS_NS::LAMMPS::LAMMPS`中解析了命令行并打开`in.eq`文件和`log.phe2`文件 (没有读取)\n\n`LAMMPS_NS::LAMMPS::LAMMPS`中的`pfirst`和`plast`用来记录命令行中的添加包命令 (`-pk`)的起始和结束。\n\n从源代码(lammps.cpp:458)来看, lammps 最多只能添加两个 suffix, 无法用 hybrid 添加三个及以上。\n\n`universe->me`用来指出这个进程是 rank 几, 0 表示主进程\n\n<!--more-->\n\n### 读取 input 文件 (in.eq)\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:198\n#1  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n### 创建进程 grid\n\n函数调用为:\n\n```\n#0  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600\n#1  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0270, narg=1, arg=0x5555561e01b0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n这是用来设置把 rank 映射到 grid 上的\n\n### 计算 xyz 分成多少个 grid，能有多少个因子(factor)\n\n```\n#0  LAMMPS_NS::ProcMap::factor (this=0x55555616a5e0, n=1, factors=0x5555561dfc40)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:731\n#1  0x0000555555ce88e2 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,\n    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:56\n#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566\n#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\nfactor 函数计算有多少个分解方式，返回的是有多少种组合，各种组合储存在 factors 中\n\n### 选择最好的分配方式\n\n```\n#0  LAMMPS_NS::ProcMap::best_factors (this=0x55555616a5e0, npossible=1, factors=0x5555561dfc40, best=0x5555560cf2d8, sx=1,\n    sy=1, sz=1) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:847\n#1  0x0000555555ce8a27 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,\n    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:73\n#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566\n#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\nbest_factors 用于给出最好的组合方式。分割方式储存在 procgrid 中。\n\n### 用 cart 方式创建 proc 和 grid 的映射\n\n```\n#0  LAMMPS_NS::ProcMap::cart_map (this=0x55555616a5e0, reorder=0, procgrid=0x5555560cf2d8, myloc=0x5555560cf2f0,\n    procneigh=0x5555560cf2fc, grid2proc=0x5555561df2c0) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:358\n#1  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600\n#2  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#3  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#4  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#5  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\ngrid 到 proc 的映射储存在`grid2proc`中，每个 proc 的相邻的 proc 储存在 procneigh 中。\n\n`comm->xsplit`和`comm->ysplit`和`comm->zsplit`用于按照核数分割盒子，是分割的边。\n\n`domain->sublo`和`domain->subhi`用于记录分解到该 rank 下的盒子范围\n\n`atom->tag`记录的是`atom ID`\n\n这些数据读取方式是 (以`tag`为例): 其是属于`Atom`类的, 然后会在`peratom_create`中用`add_peratom`把地址和`id`这个词绑定。之后会根据`fields_data_atom`这个变量中设置的字符串个数来算出`nfield`来决定之后要为`mdata_atom.pdata`这个变量开多少空间。之后会用`AtomVec::grow`为每一个 field 开空间。\n\n### parse_keyword 用来分析各个块的标志\n\n`parse_keyword`用来分析`Atoms`, `Bonds`, `Angles`, `Dihedrals`这些标记\n\n```\n#0  LAMMPS_NS::ReadData::parse_keyword (this=0x5555561e0230, first=0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:2461\n#1  0x0000555555722ff2 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1016\n#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n### 每个 rank 如何读取原子\n\n原子属于哪个 rank 是通过 sub box 来确定的 (sublo 和 subhi)。每个 rank 的原子个数记录在`atom->nlocal`中。\n\n### 读取`DATA.FILE`文件\n\nlammps 总共会对`DATA.FILE`读取两遍, 第一遍确定每个原子最多会有多少个相互作用 (比如每个原子有多少个 bond), 从而分配空间, 第二遍读取文件数据。\n\n### 构造 neighbor list 的数据结构 (create)\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Neighbor::Neighbor (this=0x5555561d0c10, lmp=0x55555616a4d0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:125\n#1  0x000055555560bc95 in LAMMPS_NS::LAMMPS::create (this=0x55555616a4d0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:858\n#2  0x0000555555609f3a in LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4d0, narg=3, arg=0x7fffffffd668,\n    communicator=0x55555607f7a0 <ompi_mpi_comm_world>) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:744\n#3  0x00005555555e02ff in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77\n```\n\n在`LAMMPS_NS::LAMMPS::create`中构造了一大堆结构, 它们之间的相互交互一定会让我很头疼。\n\n### 运行能量最小化\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:34\n#1  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#2  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#3  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\nneighbor list 的 pair 部分的数据结构初始化\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Neighbor::init_pair (this=0x5555561d0c10) at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:803\n#1  0x000055555569a595 in LAMMPS_NS::Neighbor::init (this=0x5555561d0c10)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:672\n#2  0x000055555560ce0c in LAMMPS_NS::LAMMPS::init (this=0x55555616a4d0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:984\n#3  0x000055555567b05f in LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:57\n#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n## Appendix\n\n在从`DATA.FILE`中读取坐标时，原子会被 remap 到盒子中。这在手册中提到:\n\n[\"If the system is periodic (in a dimension), then atom coordinates can be outside the bounds (in that dimension); they will be remapped (in a periodic sense) back inside the box. \"](https://docs.lammps.org/read_data.html)\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Domain::remap (this=0x5555561d10e0, x=0x7fffffff8ba0, image=@0x7fffffff8bbc: 537395712) at /home/hapo/Documents/software/lammps-29Aug2024/src/domain.cpp:1565\n#1  0x00005555558b784a in LAMMPS_NS::Atom::data_atoms (this=0x5555561d1680, n=5, buf=0x7ffff7e65054 \"2       1       2        0.0000   22.6470    3.4060   -0.4600 # XYR\", id_offset=0, mol_offset=0, type_offset=0, shiftflag=0, shift=0x5555561e0518, labelflag=0,\n    ilabel=0x5555561de760, triclinic_general=0) at /home/hapo/Documents/software/lammps-29Aug2024/src/atom.cpp:1227\n#2  0x000055555572c93d in LAMMPS_NS::ReadData::atoms (this=0x5555561e0230) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1529\n#3  0x000055555571f6e6 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:708\n#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n`universe->uni2orig`记录的是在 universe 到 origin 的映射, 比如在 universe 的 I proc 在 origin 中是`uni2orig[I]` (具体我也不知道什么意思, 貌似和命令行参数`-mpicolor`有关)\n","source":"_posts/lammps_software.md","raw":"---\ntitle: lammps源代码一些函数分析\ndate: 2025-06-19 14:12:13\ncategories:\n  - MD\ntags:\n  - C\n  - C++\n---\n\n# lammps 源代码一些函数分析\n\n## 各个模块的结构\n\n运行命令为`./lmp_mpi -in in.eq -log log.phe2`\n\n### 解析命令行\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4b0, narg=5, arg=0x7fffffffd638, communicator=0x55555607f7a0 <ompi_mpi_comm_world>) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:544\n#1  0x00005555555e02df in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77\n```\n\n在`LAMMPS_NS::LAMMPS::LAMMPS`中解析了命令行并打开`in.eq`文件和`log.phe2`文件 (没有读取)\n\n`LAMMPS_NS::LAMMPS::LAMMPS`中的`pfirst`和`plast`用来记录命令行中的添加包命令 (`-pk`)的起始和结束。\n\n从源代码(lammps.cpp:458)来看, lammps 最多只能添加两个 suffix, 无法用 hybrid 添加三个及以上。\n\n`universe->me`用来指出这个进程是 rank 几, 0 表示主进程\n\n<!--more-->\n\n### 读取 input 文件 (in.eq)\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:198\n#1  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n### 创建进程 grid\n\n函数调用为:\n\n```\n#0  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600\n#1  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0270, narg=1, arg=0x5555561e01b0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n这是用来设置把 rank 映射到 grid 上的\n\n### 计算 xyz 分成多少个 grid，能有多少个因子(factor)\n\n```\n#0  LAMMPS_NS::ProcMap::factor (this=0x55555616a5e0, n=1, factors=0x5555561dfc40)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:731\n#1  0x0000555555ce88e2 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,\n    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:56\n#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566\n#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\nfactor 函数计算有多少个分解方式，返回的是有多少种组合，各种组合储存在 factors 中\n\n### 选择最好的分配方式\n\n```\n#0  LAMMPS_NS::ProcMap::best_factors (this=0x55555616a5e0, npossible=1, factors=0x5555561dfc40, best=0x5555560cf2d8, sx=1,\n    sy=1, sz=1) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:847\n#1  0x0000555555ce8a27 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,\n    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:73\n#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566\n#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\nbest_factors 用于给出最好的组合方式。分割方式储存在 procgrid 中。\n\n### 用 cart 方式创建 proc 和 grid 的映射\n\n```\n#0  LAMMPS_NS::ProcMap::cart_map (this=0x55555616a5e0, reorder=0, procgrid=0x5555560cf2d8, myloc=0x5555560cf2f0,\n    procneigh=0x5555560cf2fc, grid2proc=0x5555561df2c0) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:358\n#1  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600\n#2  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684\n#3  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#4  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#5  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\ngrid 到 proc 的映射储存在`grid2proc`中，每个 proc 的相邻的 proc 储存在 procneigh 中。\n\n`comm->xsplit`和`comm->ysplit`和`comm->zsplit`用于按照核数分割盒子，是分割的边。\n\n`domain->sublo`和`domain->subhi`用于记录分解到该 rank 下的盒子范围\n\n`atom->tag`记录的是`atom ID`\n\n这些数据读取方式是 (以`tag`为例): 其是属于`Atom`类的, 然后会在`peratom_create`中用`add_peratom`把地址和`id`这个词绑定。之后会根据`fields_data_atom`这个变量中设置的字符串个数来算出`nfield`来决定之后要为`mdata_atom.pdata`这个变量开多少空间。之后会用`AtomVec::grow`为每一个 field 开空间。\n\n### parse_keyword 用来分析各个块的标志\n\n`parse_keyword`用来分析`Atoms`, `Bonds`, `Angles`, `Dihedrals`这些标记\n\n```\n#0  LAMMPS_NS::ReadData::parse_keyword (this=0x5555561e0230, first=0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:2461\n#1  0x0000555555722ff2 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1016\n#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n### 每个 rank 如何读取原子\n\n原子属于哪个 rank 是通过 sub box 来确定的 (sublo 和 subhi)。每个 rank 的原子个数记录在`atom->nlocal`中。\n\n### 读取`DATA.FILE`文件\n\nlammps 总共会对`DATA.FILE`读取两遍, 第一遍确定每个原子最多会有多少个相互作用 (比如每个原子有多少个 bond), 从而分配空间, 第二遍读取文件数据。\n\n### 构造 neighbor list 的数据结构 (create)\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Neighbor::Neighbor (this=0x5555561d0c10, lmp=0x55555616a4d0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:125\n#1  0x000055555560bc95 in LAMMPS_NS::LAMMPS::create (this=0x55555616a4d0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:858\n#2  0x0000555555609f3a in LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4d0, narg=3, arg=0x7fffffffd668,\n    communicator=0x55555607f7a0 <ompi_mpi_comm_world>) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:744\n#3  0x00005555555e02ff in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77\n```\n\n在`LAMMPS_NS::LAMMPS::create`中构造了一大堆结构, 它们之间的相互交互一定会让我很头疼。\n\n### 运行能量最小化\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:34\n#1  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#2  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#3  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\nneighbor list 的 pair 部分的数据结构初始化\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Neighbor::init_pair (this=0x5555561d0c10) at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:803\n#1  0x000055555569a595 in LAMMPS_NS::Neighbor::init (this=0x5555561d0c10)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:672\n#2  0x000055555560ce0c in LAMMPS_NS::LAMMPS::init (this=0x55555616a4d0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:984\n#3  0x000055555567b05f in LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:57\n#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)\n    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n## Appendix\n\n在从`DATA.FILE`中读取坐标时，原子会被 remap 到盒子中。这在手册中提到:\n\n[\"If the system is periodic (in a dimension), then atom coordinates can be outside the bounds (in that dimension); they will be remapped (in a periodic sense) back inside the box. \"](https://docs.lammps.org/read_data.html)\n\n函数调用为:\n\n```\n#0  LAMMPS_NS::Domain::remap (this=0x5555561d10e0, x=0x7fffffff8ba0, image=@0x7fffffff8bbc: 537395712) at /home/hapo/Documents/software/lammps-29Aug2024/src/domain.cpp:1565\n#1  0x00005555558b784a in LAMMPS_NS::Atom::data_atoms (this=0x5555561d1680, n=5, buf=0x7ffff7e65054 \"2       1       2        0.0000   22.6470    3.4060   -0.4600 # XYR\", id_offset=0, mol_offset=0, type_offset=0, shiftflag=0, shift=0x5555561e0518, labelflag=0,\n    ilabel=0x5555561de760, triclinic_general=0) at /home/hapo/Documents/software/lammps-29Aug2024/src/atom.cpp:1227\n#2  0x000055555572c93d in LAMMPS_NS::ReadData::atoms (this=0x5555561e0230) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1529\n#3  0x000055555571f6e6 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:708\n#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868\n#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313\n#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78\n```\n\n`universe->uni2orig`记录的是在 universe 到 origin 的映射, 比如在 universe 的 I proc 在 origin 中是`uni2orig[I]` (具体我也不知道什么意思, 貌似和命令行参数`-mpicolor`有关)\n","slug":"lammps_software","published":1,"updated":"2025-06-19T15:17:12.104Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pq000nl8vqglm3ewy1","content":"<h1 id=\"lammps-源代码一些函数分析\"><a href=\"#lammps-源代码一些函数分析\" class=\"headerlink\" title=\"lammps 源代码一些函数分析\"></a>lammps 源代码一些函数分析</h1><h2 id=\"各个模块的结构\"><a href=\"#各个模块的结构\" class=\"headerlink\" title=\"各个模块的结构\"></a>各个模块的结构</h2><p>运行命令为<code>./lmp_mpi -in in.eq -log log.phe2</code></p>\n<h3 id=\"解析命令行\"><a href=\"#解析命令行\" class=\"headerlink\" title=\"解析命令行\"></a>解析命令行</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4b0, narg=5, arg=0x7fffffffd638, communicator=0x55555607f7a0 &lt;ompi_mpi_comm_world&gt;) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:544</span><br><span class=\"line\">#1  0x00005555555e02df in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77</span><br></pre></td></tr></table></figure>\n\n<p>在<code>LAMMPS_NS::LAMMPS::LAMMPS</code>中解析了命令行并打开<code>in.eq</code>文件和<code>log.phe2</code>文件 (没有读取)</p>\n<p><code>LAMMPS_NS::LAMMPS::LAMMPS</code>中的<code>pfirst</code>和<code>plast</code>用来记录命令行中的添加包命令 (<code>-pk</code>)的起始和结束。</p>\n<p>从源代码(lammps.cpp:458)来看, lammps 最多只能添加两个 suffix, 无法用 hybrid 添加三个及以上。</p>\n<p><code>universe-&gt;me</code>用来指出这个进程是 rank 几, 0 表示主进程</p>\n<span id=\"more\"></span>\n\n<h3 id=\"读取-input-文件-in-eq\"><a href=\"#读取-input-文件-in-eq\" class=\"headerlink\" title=\"读取 input 文件 (in.eq)\"></a>读取 input 文件 (in.eq)</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:198</span><br><span class=\"line\">#1  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建进程-grid\"><a href=\"#创建进程-grid\" class=\"headerlink\" title=\"创建进程 grid\"></a>创建进程 grid</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600</span><br><span class=\"line\">#1  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0270, narg=1, arg=0x5555561e01b0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>这是用来设置把 rank 映射到 grid 上的</p>\n<h3 id=\"计算-xyz-分成多少个-grid，能有多少个因子-factor\"><a href=\"#计算-xyz-分成多少个-grid，能有多少个因子-factor\" class=\"headerlink\" title=\"计算 xyz 分成多少个 grid，能有多少个因子(factor)\"></a>计算 xyz 分成多少个 grid，能有多少个因子(factor)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ProcMap::factor (this=0x55555616a5e0, n=1, factors=0x5555561dfc40)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:731</span><br><span class=\"line\">#1  0x0000555555ce88e2 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,</span><br><span class=\"line\">    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:56</span><br><span class=\"line\">#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566</span><br><span class=\"line\">#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>factor 函数计算有多少个分解方式，返回的是有多少种组合，各种组合储存在 factors 中</p>\n<h3 id=\"选择最好的分配方式\"><a href=\"#选择最好的分配方式\" class=\"headerlink\" title=\"选择最好的分配方式\"></a>选择最好的分配方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ProcMap::best_factors (this=0x55555616a5e0, npossible=1, factors=0x5555561dfc40, best=0x5555560cf2d8, sx=1,</span><br><span class=\"line\">    sy=1, sz=1) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:847</span><br><span class=\"line\">#1  0x0000555555ce8a27 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,</span><br><span class=\"line\">    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:73</span><br><span class=\"line\">#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566</span><br><span class=\"line\">#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>best_factors 用于给出最好的组合方式。分割方式储存在 procgrid 中。</p>\n<h3 id=\"用-cart-方式创建-proc-和-grid-的映射\"><a href=\"#用-cart-方式创建-proc-和-grid-的映射\" class=\"headerlink\" title=\"用 cart 方式创建 proc 和 grid 的映射\"></a>用 cart 方式创建 proc 和 grid 的映射</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ProcMap::cart_map (this=0x55555616a5e0, reorder=0, procgrid=0x5555560cf2d8, myloc=0x5555560cf2f0,</span><br><span class=\"line\">    procneigh=0x5555560cf2fc, grid2proc=0x5555561df2c0) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:358</span><br><span class=\"line\">#1  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600</span><br><span class=\"line\">#2  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#3  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#4  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#5  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>grid 到 proc 的映射储存在<code>grid2proc</code>中，每个 proc 的相邻的 proc 储存在 procneigh 中。</p>\n<p><code>comm-&gt;xsplit</code>和<code>comm-&gt;ysplit</code>和<code>comm-&gt;zsplit</code>用于按照核数分割盒子，是分割的边。</p>\n<p><code>domain-&gt;sublo</code>和<code>domain-&gt;subhi</code>用于记录分解到该 rank 下的盒子范围</p>\n<p><code>atom-&gt;tag</code>记录的是<code>atom ID</code></p>\n<p>这些数据读取方式是 (以<code>tag</code>为例): 其是属于<code>Atom</code>类的, 然后会在<code>peratom_create</code>中用<code>add_peratom</code>把地址和<code>id</code>这个词绑定。之后会根据<code>fields_data_atom</code>这个变量中设置的字符串个数来算出<code>nfield</code>来决定之后要为<code>mdata_atom.pdata</code>这个变量开多少空间。之后会用<code>AtomVec::grow</code>为每一个 field 开空间。</p>\n<h3 id=\"parse-keyword-用来分析各个块的标志\"><a href=\"#parse-keyword-用来分析各个块的标志\" class=\"headerlink\" title=\"parse_keyword 用来分析各个块的标志\"></a>parse_keyword 用来分析各个块的标志</h3><p><code>parse_keyword</code>用来分析<code>Atoms</code>, <code>Bonds</code>, <code>Angles</code>, <code>Dihedrals</code>这些标记</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ReadData::parse_keyword (this=0x5555561e0230, first=0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:2461</span><br><span class=\"line\">#1  0x0000555555722ff2 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1016</span><br><span class=\"line\">#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"每个-rank-如何读取原子\"><a href=\"#每个-rank-如何读取原子\" class=\"headerlink\" title=\"每个 rank 如何读取原子\"></a>每个 rank 如何读取原子</h3><p>原子属于哪个 rank 是通过 sub box 来确定的 (sublo 和 subhi)。每个 rank 的原子个数记录在<code>atom-&gt;nlocal</code>中。</p>\n<h3 id=\"读取DATA-FILE文件\"><a href=\"#读取DATA-FILE文件\" class=\"headerlink\" title=\"读取DATA.FILE文件\"></a>读取<code>DATA.FILE</code>文件</h3><p>lammps 总共会对<code>DATA.FILE</code>读取两遍, 第一遍确定每个原子最多会有多少个相互作用 (比如每个原子有多少个 bond), 从而分配空间, 第二遍读取文件数据。</p>\n<h3 id=\"构造-neighbor-list-的数据结构-create\"><a href=\"#构造-neighbor-list-的数据结构-create\" class=\"headerlink\" title=\"构造 neighbor list 的数据结构 (create)\"></a>构造 neighbor list 的数据结构 (create)</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Neighbor::Neighbor (this=0x5555561d0c10, lmp=0x55555616a4d0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:125</span><br><span class=\"line\">#1  0x000055555560bc95 in LAMMPS_NS::LAMMPS::create (this=0x55555616a4d0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:858</span><br><span class=\"line\">#2  0x0000555555609f3a in LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4d0, narg=3, arg=0x7fffffffd668,</span><br><span class=\"line\">    communicator=0x55555607f7a0 &lt;ompi_mpi_comm_world&gt;) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:744</span><br><span class=\"line\">#3  0x00005555555e02ff in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77</span><br></pre></td></tr></table></figure>\n\n<p>在<code>LAMMPS_NS::LAMMPS::create</code>中构造了一大堆结构, 它们之间的相互交互一定会让我很头疼。</p>\n<h3 id=\"运行能量最小化\"><a href=\"#运行能量最小化\" class=\"headerlink\" title=\"运行能量最小化\"></a>运行能量最小化</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:34</span><br><span class=\"line\">#1  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#2  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#3  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>neighbor list 的 pair 部分的数据结构初始化</p>\n<p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Neighbor::init_pair (this=0x5555561d0c10) at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:803</span><br><span class=\"line\">#1  0x000055555569a595 in LAMMPS_NS::Neighbor::init (this=0x5555561d0c10)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:672</span><br><span class=\"line\">#2  0x000055555560ce0c in LAMMPS_NS::LAMMPS::init (this=0x55555616a4d0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:984</span><br><span class=\"line\">#3  0x000055555567b05f in LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:57</span><br><span class=\"line\">#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h2><p>在从<code>DATA.FILE</code>中读取坐标时，原子会被 remap 到盒子中。这在手册中提到:</p>\n<p><a href=\"https://docs.lammps.org/read_data.html\">“If the system is periodic (in a dimension), then atom coordinates can be outside the bounds (in that dimension); they will be remapped (in a periodic sense) back inside the box. “</a></p>\n<p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Domain::remap (this=0x5555561d10e0, x=0x7fffffff8ba0, image=@0x7fffffff8bbc: 537395712) at /home/hapo/Documents/software/lammps-29Aug2024/src/domain.cpp:1565</span><br><span class=\"line\">#1  0x00005555558b784a in LAMMPS_NS::Atom::data_atoms (this=0x5555561d1680, n=5, buf=0x7ffff7e65054 &quot;2       1       2        0.0000   22.6470    3.4060   -0.4600 # XYR&quot;, id_offset=0, mol_offset=0, type_offset=0, shiftflag=0, shift=0x5555561e0518, labelflag=0,</span><br><span class=\"line\">    ilabel=0x5555561de760, triclinic_general=0) at /home/hapo/Documents/software/lammps-29Aug2024/src/atom.cpp:1227</span><br><span class=\"line\">#2  0x000055555572c93d in LAMMPS_NS::ReadData::atoms (this=0x5555561e0230) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1529</span><br><span class=\"line\">#3  0x000055555571f6e6 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:708</span><br><span class=\"line\">#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p><code>universe-&gt;uni2orig</code>记录的是在 universe 到 origin 的映射, 比如在 universe 的 I proc 在 origin 中是<code>uni2orig[I]</code> (具体我也不知道什么意思, 貌似和命令行参数<code>-mpicolor</code>有关)</p>\n","excerpt":"<h1 id=\"lammps-源代码一些函数分析\"><a href=\"#lammps-源代码一些函数分析\" class=\"headerlink\" title=\"lammps 源代码一些函数分析\"></a>lammps 源代码一些函数分析</h1><h2 id=\"各个模块的结构\"><a href=\"#各个模块的结构\" class=\"headerlink\" title=\"各个模块的结构\"></a>各个模块的结构</h2><p>运行命令为<code>./lmp_mpi -in in.eq -log log.phe2</code></p>\n<h3 id=\"解析命令行\"><a href=\"#解析命令行\" class=\"headerlink\" title=\"解析命令行\"></a>解析命令行</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4b0, narg=5, arg=0x7fffffffd638, communicator=0x55555607f7a0 &lt;ompi_mpi_comm_world&gt;) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:544</span><br><span class=\"line\">#1  0x00005555555e02df in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77</span><br></pre></td></tr></table></figure>\n\n<p>在<code>LAMMPS_NS::LAMMPS::LAMMPS</code>中解析了命令行并打开<code>in.eq</code>文件和<code>log.phe2</code>文件 (没有读取)</p>\n<p><code>LAMMPS_NS::LAMMPS::LAMMPS</code>中的<code>pfirst</code>和<code>plast</code>用来记录命令行中的添加包命令 (<code>-pk</code>)的起始和结束。</p>\n<p>从源代码(lammps.cpp:458)来看, lammps 最多只能添加两个 suffix, 无法用 hybrid 添加三个及以上。</p>\n<p><code>universe-&gt;me</code>用来指出这个进程是 rank 几, 0 表示主进程</p>","more":"<h3 id=\"读取-input-文件-in-eq\"><a href=\"#读取-input-文件-in-eq\" class=\"headerlink\" title=\"读取 input 文件 (in.eq)\"></a>读取 input 文件 (in.eq)</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:198</span><br><span class=\"line\">#1  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建进程-grid\"><a href=\"#创建进程-grid\" class=\"headerlink\" title=\"创建进程 grid\"></a>创建进程 grid</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600</span><br><span class=\"line\">#1  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0270, narg=1, arg=0x5555561e01b0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>这是用来设置把 rank 映射到 grid 上的</p>\n<h3 id=\"计算-xyz-分成多少个-grid，能有多少个因子-factor\"><a href=\"#计算-xyz-分成多少个-grid，能有多少个因子-factor\" class=\"headerlink\" title=\"计算 xyz 分成多少个 grid，能有多少个因子(factor)\"></a>计算 xyz 分成多少个 grid，能有多少个因子(factor)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ProcMap::factor (this=0x55555616a5e0, n=1, factors=0x5555561dfc40)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:731</span><br><span class=\"line\">#1  0x0000555555ce88e2 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,</span><br><span class=\"line\">    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:56</span><br><span class=\"line\">#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566</span><br><span class=\"line\">#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>factor 函数计算有多少个分解方式，返回的是有多少种组合，各种组合储存在 factors 中</p>\n<h3 id=\"选择最好的分配方式\"><a href=\"#选择最好的分配方式\" class=\"headerlink\" title=\"选择最好的分配方式\"></a>选择最好的分配方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ProcMap::best_factors (this=0x55555616a5e0, npossible=1, factors=0x5555561dfc40, best=0x5555560cf2d8, sx=1,</span><br><span class=\"line\">    sy=1, sz=1) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:847</span><br><span class=\"line\">#1  0x0000555555ce8a27 in LAMMPS_NS::ProcMap::onelevel_grid (this=0x55555616a5e0, nprocs=1, user_procgrid=0x5555560cf2e4,</span><br><span class=\"line\">    procgrid=0x5555560cf2d8, otherflag=0, other_style=1443715056, other_procgrid=0x5555560cf3e4, other_coregrid=0x5555560cf3f0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:73</span><br><span class=\"line\">#2  0x000055555591dc4d in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:566</span><br><span class=\"line\">#3  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#4  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>best_factors 用于给出最好的组合方式。分割方式储存在 procgrid 中。</p>\n<h3 id=\"用-cart-方式创建-proc-和-grid-的映射\"><a href=\"#用-cart-方式创建-proc-和-grid-的映射\" class=\"headerlink\" title=\"用 cart 方式创建 proc 和 grid 的映射\"></a>用 cart 方式创建 proc 和 grid 的映射</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ProcMap::cart_map (this=0x55555616a5e0, reorder=0, procgrid=0x5555560cf2d8, myloc=0x5555560cf2f0,</span><br><span class=\"line\">    procneigh=0x5555560cf2fc, grid2proc=0x5555561df2c0) at /home/hapo/Documents/software/lammps-29Aug2024/src/procmap.cpp:358</span><br><span class=\"line\">#1  0x000055555591e071 in LAMMPS_NS::Comm::set_proc_grid (this=0x5555560cf1c0, outflag=1)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/comm.cpp:600</span><br><span class=\"line\">#2  0x000055555571f3fe in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:684</span><br><span class=\"line\">#3  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#4  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#5  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>grid 到 proc 的映射储存在<code>grid2proc</code>中，每个 proc 的相邻的 proc 储存在 procneigh 中。</p>\n<p><code>comm-&gt;xsplit</code>和<code>comm-&gt;ysplit</code>和<code>comm-&gt;zsplit</code>用于按照核数分割盒子，是分割的边。</p>\n<p><code>domain-&gt;sublo</code>和<code>domain-&gt;subhi</code>用于记录分解到该 rank 下的盒子范围</p>\n<p><code>atom-&gt;tag</code>记录的是<code>atom ID</code></p>\n<p>这些数据读取方式是 (以<code>tag</code>为例): 其是属于<code>Atom</code>类的, 然后会在<code>peratom_create</code>中用<code>add_peratom</code>把地址和<code>id</code>这个词绑定。之后会根据<code>fields_data_atom</code>这个变量中设置的字符串个数来算出<code>nfield</code>来决定之后要为<code>mdata_atom.pdata</code>这个变量开多少空间。之后会用<code>AtomVec::grow</code>为每一个 field 开空间。</p>\n<h3 id=\"parse-keyword-用来分析各个块的标志\"><a href=\"#parse-keyword-用来分析各个块的标志\" class=\"headerlink\" title=\"parse_keyword 用来分析各个块的标志\"></a>parse_keyword 用来分析各个块的标志</h3><p><code>parse_keyword</code>用来分析<code>Atoms</code>, <code>Bonds</code>, <code>Angles</code>, <code>Dihedrals</code>这些标记</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::ReadData::parse_keyword (this=0x5555561e0230, first=0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:2461</span><br><span class=\"line\">#1  0x0000555555722ff2 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1016</span><br><span class=\"line\">#2  0x00005555555e6339 in LAMMPS_NS::Input::execute_command (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#3  0x00005555555e2a59 in LAMMPS_NS::Input::file (this=0x55555611f930)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#4  0x00005555555e02f3 in main (argc=5, argv=0x7fffffffd638) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"每个-rank-如何读取原子\"><a href=\"#每个-rank-如何读取原子\" class=\"headerlink\" title=\"每个 rank 如何读取原子\"></a>每个 rank 如何读取原子</h3><p>原子属于哪个 rank 是通过 sub box 来确定的 (sublo 和 subhi)。每个 rank 的原子个数记录在<code>atom-&gt;nlocal</code>中。</p>\n<h3 id=\"读取DATA-FILE文件\"><a href=\"#读取DATA-FILE文件\" class=\"headerlink\" title=\"读取DATA.FILE文件\"></a>读取<code>DATA.FILE</code>文件</h3><p>lammps 总共会对<code>DATA.FILE</code>读取两遍, 第一遍确定每个原子最多会有多少个相互作用 (比如每个原子有多少个 bond), 从而分配空间, 第二遍读取文件数据。</p>\n<h3 id=\"构造-neighbor-list-的数据结构-create\"><a href=\"#构造-neighbor-list-的数据结构-create\" class=\"headerlink\" title=\"构造 neighbor list 的数据结构 (create)\"></a>构造 neighbor list 的数据结构 (create)</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Neighbor::Neighbor (this=0x5555561d0c10, lmp=0x55555616a4d0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:125</span><br><span class=\"line\">#1  0x000055555560bc95 in LAMMPS_NS::LAMMPS::create (this=0x55555616a4d0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:858</span><br><span class=\"line\">#2  0x0000555555609f3a in LAMMPS_NS::LAMMPS::LAMMPS (this=0x55555616a4d0, narg=3, arg=0x7fffffffd668,</span><br><span class=\"line\">    communicator=0x55555607f7a0 &lt;ompi_mpi_comm_world&gt;) at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:744</span><br><span class=\"line\">#3  0x00005555555e02ff in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:77</span><br></pre></td></tr></table></figure>\n\n<p>在<code>LAMMPS_NS::LAMMPS::create</code>中构造了一大堆结构, 它们之间的相互交互一定会让我很头疼。</p>\n<h3 id=\"运行能量最小化\"><a href=\"#运行能量最小化\" class=\"headerlink\" title=\"运行能量最小化\"></a>运行能量最小化</h3><p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:34</span><br><span class=\"line\">#1  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#2  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#3  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p>neighbor list 的 pair 部分的数据结构初始化</p>\n<p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Neighbor::init_pair (this=0x5555561d0c10) at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:803</span><br><span class=\"line\">#1  0x000055555569a595 in LAMMPS_NS::Neighbor::init (this=0x5555561d0c10)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/neighbor.cpp:672</span><br><span class=\"line\">#2  0x000055555560ce0c in LAMMPS_NS::LAMMPS::init (this=0x55555616a4d0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/lammps.cpp:984</span><br><span class=\"line\">#3  0x000055555567b05f in LAMMPS_NS::Minimize::command (this=0x5555561dfc80, narg=4, arg=0x5555561e01b0)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/minimize.cpp:57</span><br><span class=\"line\">#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910)</span><br><span class=\"line\">    at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Appendix\"><a href=\"#Appendix\" class=\"headerlink\" title=\"Appendix\"></a>Appendix</h2><p>在从<code>DATA.FILE</code>中读取坐标时，原子会被 remap 到盒子中。这在手册中提到:</p>\n<p><a href=\"https://docs.lammps.org/read_data.html\">“If the system is periodic (in a dimension), then atom coordinates can be outside the bounds (in that dimension); they will be remapped (in a periodic sense) back inside the box. “</a></p>\n<p>函数调用为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0  LAMMPS_NS::Domain::remap (this=0x5555561d10e0, x=0x7fffffff8ba0, image=@0x7fffffff8bbc: 537395712) at /home/hapo/Documents/software/lammps-29Aug2024/src/domain.cpp:1565</span><br><span class=\"line\">#1  0x00005555558b784a in LAMMPS_NS::Atom::data_atoms (this=0x5555561d1680, n=5, buf=0x7ffff7e65054 &quot;2       1       2        0.0000   22.6470    3.4060   -0.4600 # XYR&quot;, id_offset=0, mol_offset=0, type_offset=0, shiftflag=0, shift=0x5555561e0518, labelflag=0,</span><br><span class=\"line\">    ilabel=0x5555561de760, triclinic_general=0) at /home/hapo/Documents/software/lammps-29Aug2024/src/atom.cpp:1227</span><br><span class=\"line\">#2  0x000055555572c93d in LAMMPS_NS::ReadData::atoms (this=0x5555561e0230) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:1529</span><br><span class=\"line\">#3  0x000055555571f6e6 in LAMMPS_NS::ReadData::command (this=0x5555561e0230, narg=1, arg=0x5555561e0170) at /home/hapo/Documents/software/lammps-29Aug2024/src/read_data.cpp:708</span><br><span class=\"line\">#4  0x00005555555e6359 in LAMMPS_NS::Input::execute_command (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:868</span><br><span class=\"line\">#5  0x00005555555e2a79 in LAMMPS_NS::Input::file (this=0x55555611f910) at /home/hapo/Documents/software/lammps-29Aug2024/src/input.cpp:313</span><br><span class=\"line\">#6  0x00005555555e0313 in main (argc=3, argv=0x7fffffffd668) at /home/hapo/Documents/software/lammps-29Aug2024/src/main.cpp:78</span><br></pre></td></tr></table></figure>\n\n<p><code>universe-&gt;uni2orig</code>记录的是在 universe 到 origin 的映射, 比如在 universe 的 I proc 在 origin 中是<code>uni2orig[I]</code> (具体我也不知道什么意思, 貌似和命令行参数<code>-mpicolor</code>有关)</p>"},{"title":"opensuse15.4安装packman","date":"2023-02-06T11:42:33.000Z","_content":"最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：\n```bash\nsudo zypper install opi\nopi codecs\n```\n以上两行代码就解决了编码器问题。\n","source":"_posts/opensuse15-4安装packman.md","raw":"---\ntitle: opensuse15.4安装packman\ndate: 2023-02-06 20:42:33\ntags:\n    - linux\ncategories:\n    - 计算机\n---\n最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：\n```bash\nsudo zypper install opi\nopi codecs\n```\n以上两行代码就解决了编码器问题。\n","slug":"opensuse15-4安装packman","published":1,"updated":"2023-02-06T13:03:58.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4ps000pl8vq3xch3lxa","content":"<p>最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper install opi</span><br><span class=\"line\">opi codecs</span><br></pre></td></tr></table></figure>\n<p>以上两行代码就解决了编码器问题。</p>\n","excerpt":"","more":"<p>最近因为opensuse15.2坏掉了所以升级成了15.4，而安装packman源解决编码器问题一直是个复杂的过程，而最近则发现这个过程已经有人写好了包，所以在这里记录下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper install opi</span><br><span class=\"line\">opi codecs</span><br></pre></td></tr></table></figure>\n<p>以上两行代码就解决了编码器问题。</p>\n"},{"title":"ssh登陆相关","date":"2023-03-01T04:50:51.000Z","catagories":["计算机"],"_content":"# 密钥登陆\nlinux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥, 生成密钥的命令为:\n```bash\nssh-keygen\n```\n其中需要输入文件名和key的类型。  \n使用`ssh-copy-id`命令可以将`filename.pub`公钥分发给远程主机:\n```bash\nssh-copy-id hapo@webserver1\n```\n以上命令会将默认公钥分发过去, 也可以使用\n```bash\nssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1\n```\n指定需要分发的公钥。  \n此时就能不需要密码登陆远程服务器, 若密钥名字不是默认的名字(`~/.ssh/id_rsa`等), 则可以用以下命令指定:\n```bash\nssh -i ~/.ssh/filename hapo@websever1\n```\n另外可以使用以下命令查看密钥和公钥对应的指纹:\n```bash\nssh-keygen -l -f ~/.ssh/filename\nssh-keygen -l -f ~/.ssh/filename.pub\n```\n<!--more-->\n# ssh配置文件\n可以在`~/.ssh/config`中写如下命令简化`ssh`登陆时所需参数:\n```bash\nHost hapo\n    HostName ip\n    Port 22\n    User hapo\n    IdentityFile ~/.ssh/id_rsa\n    ServerAliveInterval 60 # 每60秒发送一次空请求\n    ServerAliveCountMax 10 # 断开时重新连接的次数\n```\n\n# 使用`ssh-agent`和`ssh-add`\n`ssh-agent`可以记录密钥的指纹, 并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。\n启动`ssh-agent`的命令为\n```bash\neval `ssh-agent`\n```\n接下里就可以使用`ssh-add`添加密钥指纹\n```bash\nssh-add #添加默认的密钥指纹\nssh-add ~/.ssh/id_rsa_1 #指定密钥的指纹\n```\n可以用以下命令查看添加过的密钥指纹\n```bash\nssh-add -L\n```\n可以用以下命令修改添加过的密钥指纹\n```bash\nssh-add -D # 删除ssh-agent中的所有密钥指纹\nssh-add -d key_file # 删除指定密钥指纹\n```\n另外, 杀掉现在正在运行的`ssh-agent`的命令为\n```bash\nssh-agent -k\n```\n# `oathtool`\n`oathtool`可以用于生成二次验证, 其使用命令行是\n```bash\noathtool -b --totp <identity>\n```\n`<identity>`为用于生成二次验证的身份码。\n\n# `sshpass`\n`sshpass`可以用于在命令行输入密码, 命令行如下:\n```bash\nsshpass -p <password> <user>@<hostname>\n```\n通过结合`oathtool`, 可以实现免二次验证:\n```bash\n#！/bin/bash\ntotp=`oathtool -b --totp <identity>`\nsshpass -p \"<password> $totp\" <user>@<hostname>\n```\n\n# `expect`\n`expect`命令可以用于与终端进行交互, `expect`使用的是tcl语言, 这里不准备说明语法，只说明对应的一些用法\n","source":"_posts/ssh登陆相关.md","raw":"---\ntitle: ssh登陆相关\ndate: 2023-03-01 13:50:51\ntags:\n    - ssh\ncatagories:\n    - 计算机\n---\n# 密钥登陆\nlinux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥, 生成密钥的命令为:\n```bash\nssh-keygen\n```\n其中需要输入文件名和key的类型。  \n使用`ssh-copy-id`命令可以将`filename.pub`公钥分发给远程主机:\n```bash\nssh-copy-id hapo@webserver1\n```\n以上命令会将默认公钥分发过去, 也可以使用\n```bash\nssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1\n```\n指定需要分发的公钥。  \n此时就能不需要密码登陆远程服务器, 若密钥名字不是默认的名字(`~/.ssh/id_rsa`等), 则可以用以下命令指定:\n```bash\nssh -i ~/.ssh/filename hapo@websever1\n```\n另外可以使用以下命令查看密钥和公钥对应的指纹:\n```bash\nssh-keygen -l -f ~/.ssh/filename\nssh-keygen -l -f ~/.ssh/filename.pub\n```\n<!--more-->\n# ssh配置文件\n可以在`~/.ssh/config`中写如下命令简化`ssh`登陆时所需参数:\n```bash\nHost hapo\n    HostName ip\n    Port 22\n    User hapo\n    IdentityFile ~/.ssh/id_rsa\n    ServerAliveInterval 60 # 每60秒发送一次空请求\n    ServerAliveCountMax 10 # 断开时重新连接的次数\n```\n\n# 使用`ssh-agent`和`ssh-add`\n`ssh-agent`可以记录密钥的指纹, 并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。\n启动`ssh-agent`的命令为\n```bash\neval `ssh-agent`\n```\n接下里就可以使用`ssh-add`添加密钥指纹\n```bash\nssh-add #添加默认的密钥指纹\nssh-add ~/.ssh/id_rsa_1 #指定密钥的指纹\n```\n可以用以下命令查看添加过的密钥指纹\n```bash\nssh-add -L\n```\n可以用以下命令修改添加过的密钥指纹\n```bash\nssh-add -D # 删除ssh-agent中的所有密钥指纹\nssh-add -d key_file # 删除指定密钥指纹\n```\n另外, 杀掉现在正在运行的`ssh-agent`的命令为\n```bash\nssh-agent -k\n```\n# `oathtool`\n`oathtool`可以用于生成二次验证, 其使用命令行是\n```bash\noathtool -b --totp <identity>\n```\n`<identity>`为用于生成二次验证的身份码。\n\n# `sshpass`\n`sshpass`可以用于在命令行输入密码, 命令行如下:\n```bash\nsshpass -p <password> <user>@<hostname>\n```\n通过结合`oathtool`, 可以实现免二次验证:\n```bash\n#！/bin/bash\ntotp=`oathtool -b --totp <identity>`\nsshpass -p \"<password> $totp\" <user>@<hostname>\n```\n\n# `expect`\n`expect`命令可以用于与终端进行交互, `expect`使用的是tcl语言, 这里不准备说明语法，只说明对应的一些用法\n","slug":"ssh登陆相关","published":1,"updated":"2025-06-19T15:17:12.112Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pu000ul8vq9uls868e","content":"<h1 id=\"密钥登陆\"><a href=\"#密钥登陆\" class=\"headerlink\" title=\"密钥登陆\"></a>密钥登陆</h1><p>linux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥, 生成密钥的命令为:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>其中需要输入文件名和key的类型。<br>使用<code>ssh-copy-id</code>命令可以将<code>filename.pub</code>公钥分发给远程主机:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id hapo@webserver1</span><br></pre></td></tr></table></figure>\n<p>以上命令会将默认公钥分发过去, 也可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1</span><br></pre></td></tr></table></figure>\n<p>指定需要分发的公钥。<br>此时就能不需要密码登陆远程服务器, 若密钥名字不是默认的名字(<code>~/.ssh/id_rsa</code>等), 则可以用以下命令指定:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/filename hapo@websever1</span><br></pre></td></tr></table></figure>\n<p>另外可以使用以下命令查看密钥和公钥对应的指纹:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename</span><br><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename.pub</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"ssh配置文件\"><a href=\"#ssh配置文件\" class=\"headerlink\" title=\"ssh配置文件\"></a>ssh配置文件</h1><p>可以在<code>~/.ssh/config</code>中写如下命令简化<code>ssh</code>登陆时所需参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host hapo</span><br><span class=\"line\">    HostName ip</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    User hapo</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">    ServerAliveInterval 60 <span class=\"comment\"># 每60秒发送一次空请求</span></span><br><span class=\"line\">    ServerAliveCountMax 10 <span class=\"comment\"># 断开时重新连接的次数</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用ssh-agent和ssh-add\"><a href=\"#使用ssh-agent和ssh-add\" class=\"headerlink\" title=\"使用ssh-agent和ssh-add\"></a>使用<code>ssh-agent</code>和<code>ssh-add</code></h1><p><code>ssh-agent</code>可以记录密钥的指纹, 并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。<br>启动<code>ssh-agent</code>的命令为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure>\n<p>接下里就可以使用<code>ssh-add</code>添加密钥指纹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add <span class=\"comment\">#添加默认的密钥指纹</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_1 <span class=\"comment\">#指定密钥的指纹</span></span><br></pre></td></tr></table></figure>\n<p>可以用以下命令查看添加过的密钥指纹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -L</span><br></pre></td></tr></table></figure>\n<p>可以用以下命令修改添加过的密钥指纹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -D <span class=\"comment\"># 删除ssh-agent中的所有密钥指纹</span></span><br><span class=\"line\">ssh-add -d key_file <span class=\"comment\"># 删除指定密钥指纹</span></span><br></pre></td></tr></table></figure>\n<p>另外, 杀掉现在正在运行的<code>ssh-agent</code>的命令为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -k</span><br></pre></td></tr></table></figure>\n<h1 id=\"oathtool\"><a href=\"#oathtool\" class=\"headerlink\" title=\"oathtool\"></a><code>oathtool</code></h1><p><code>oathtool</code>可以用于生成二次验证, 其使用命令行是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oathtool -b --totp &lt;identity&gt;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;identity&gt;</code>为用于生成二次验证的身份码。</p>\n<h1 id=\"sshpass\"><a href=\"#sshpass\" class=\"headerlink\" title=\"sshpass\"></a><code>sshpass</code></h1><p><code>sshpass</code>可以用于在命令行输入密码, 命令行如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -p &lt;password&gt; &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure>\n<p>通过结合<code>oathtool</code>, 可以实现免二次验证:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/bin/bash</span></span><br><span class=\"line\">totp=`oathtool -b --totp &lt;identity&gt;`</span><br><span class=\"line\">sshpass -p <span class=\"string\">&quot;&lt;password&gt; <span class=\"variable\">$totp</span>&quot;</span> &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a><code>expect</code></h1><p><code>expect</code>命令可以用于与终端进行交互, <code>expect</code>使用的是tcl语言, 这里不准备说明语法，只说明对应的一些用法</p>\n","excerpt":"<h1 id=\"密钥登陆\"><a href=\"#密钥登陆\" class=\"headerlink\" title=\"密钥登陆\"></a>密钥登陆</h1><p>linux下可以使用ssh远程登陆集群, 为了登陆方便, 我们可以使用密钥, 生成密钥的命令为:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>其中需要输入文件名和key的类型。<br>使用<code>ssh-copy-id</code>命令可以将<code>filename.pub</code>公钥分发给远程主机:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id hapo@webserver1</span><br></pre></td></tr></table></figure>\n<p>以上命令会将默认公钥分发过去, 也可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/filename.pub hapo@webserver1</span><br></pre></td></tr></table></figure>\n<p>指定需要分发的公钥。<br>此时就能不需要密码登陆远程服务器, 若密钥名字不是默认的名字(<code>~/.ssh/id_rsa</code>等), 则可以用以下命令指定:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/filename hapo@websever1</span><br></pre></td></tr></table></figure>\n<p>另外可以使用以下命令查看密钥和公钥对应的指纹:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename</span><br><span class=\"line\">ssh-keygen -l -f ~/.ssh/filename.pub</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"ssh配置文件\"><a href=\"#ssh配置文件\" class=\"headerlink\" title=\"ssh配置文件\"></a>ssh配置文件</h1><p>可以在<code>~/.ssh/config</code>中写如下命令简化<code>ssh</code>登陆时所需参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host hapo</span><br><span class=\"line\">    HostName ip</span><br><span class=\"line\">    Port 22</span><br><span class=\"line\">    User hapo</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br><span class=\"line\">    ServerAliveInterval 60 <span class=\"comment\"># 每60秒发送一次空请求</span></span><br><span class=\"line\">    ServerAliveCountMax 10 <span class=\"comment\"># 断开时重新连接的次数</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用ssh-agent和ssh-add\"><a href=\"#使用ssh-agent和ssh-add\" class=\"headerlink\" title=\"使用ssh-agent和ssh-add\"></a>使用<code>ssh-agent</code>和<code>ssh-add</code></h1><p><code>ssh-agent</code>可以记录密钥的指纹, 并且自动查找和发送到服务器端, 因此不需要在指定所使用的密钥。<br>启动<code>ssh-agent</code>的命令为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure>\n<p>接下里就可以使用<code>ssh-add</code>添加密钥指纹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add <span class=\"comment\">#添加默认的密钥指纹</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_1 <span class=\"comment\">#指定密钥的指纹</span></span><br></pre></td></tr></table></figure>\n<p>可以用以下命令查看添加过的密钥指纹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -L</span><br></pre></td></tr></table></figure>\n<p>可以用以下命令修改添加过的密钥指纹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add -D <span class=\"comment\"># 删除ssh-agent中的所有密钥指纹</span></span><br><span class=\"line\">ssh-add -d key_file <span class=\"comment\"># 删除指定密钥指纹</span></span><br></pre></td></tr></table></figure>\n<p>另外, 杀掉现在正在运行的<code>ssh-agent</code>的命令为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -k</span><br></pre></td></tr></table></figure>\n<h1 id=\"oathtool\"><a href=\"#oathtool\" class=\"headerlink\" title=\"oathtool\"></a><code>oathtool</code></h1><p><code>oathtool</code>可以用于生成二次验证, 其使用命令行是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oathtool -b --totp &lt;identity&gt;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;identity&gt;</code>为用于生成二次验证的身份码。</p>\n<h1 id=\"sshpass\"><a href=\"#sshpass\" class=\"headerlink\" title=\"sshpass\"></a><code>sshpass</code></h1><p><code>sshpass</code>可以用于在命令行输入密码, 命令行如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -p &lt;password&gt; &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure>\n<p>通过结合<code>oathtool</code>, 可以实现免二次验证:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#！/bin/bash</span></span><br><span class=\"line\">totp=`oathtool -b --totp &lt;identity&gt;`</span><br><span class=\"line\">sshpass -p <span class=\"string\">&quot;&lt;password&gt; <span class=\"variable\">$totp</span>&quot;</span> &lt;user&gt;@&lt;hostname&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a><code>expect</code></h1><p><code>expect</code>命令可以用于与终端进行交互, <code>expect</code>使用的是tcl语言, 这里不准备说明语法，只说明对应的一些用法</p>"},{"title":"使用Modeller补缺失残基","date":"2022-12-07T18:19:31.000Z","_content":"写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把[使用modeller补全缺失残基](https://salilab.org/modeller/wiki/Missing_residues)的网页放在这里。  \n\n我们以[4GNX](https://files.rcsb.org/download/4GNX.pdb)为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为`4gnx_half.pdb`。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的`REMARK 465`中记录了缺失的残基序号和类型，pdb文件中的`SEQRES`也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  \n\n我们可以使用一下代码提取pdb文件中的序列信息：\n```python\nfrom modeller import *\n# Get the sequence of the 4gnx PDB file, and write to an alignment file\ncode = '4gnx'\n\ne = Environ()\nm = Model(e, file=code)\naln = Alignment(e)\naln.append_model(m, align_codes=code)\naln.write(file=code+'.seq')\n```\n<!--more-->\n用以上代码生成的序列文件`4gnx_half.seq`如下：\n```\n\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN\nISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA\nHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE\nNHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY\nGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS\nTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE\nNLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK\nLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt\ntttttttttttttttt*\n```\n从`REMARK 465`和`SEQRES`中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用`-`填补缺失残基的模板序列和一份完整序列，这两个序列可以写在`alignment.aln`文件中：\n```\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n>P1;4gnx_half_fill\nsequence:::::::::\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n```\n现在我们可以用Modeller中的['LoopModel' class](https://salilab.org/modeller/10.0/manual/node33.html)生成所有的残基，并对loop区域进行优化，代码如下：\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\na = LoopModel(env, alnfile = 'alignment.ali',\n              knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.loop.starting_model = 1\na.loop.ending_model   = 2\na.loop.md_level       = refine.fast\n\na.make()\n```\n使用该代码会生成一个使用model生成的结构(`a.starting_model = 1`和`a.ending_model = 1`)和两个使用loopmodel生成的结构(`a.loop.starting_model = 1`和`a.loop.ending_model = 2`)。如果我们要生成更多的结构，那么我们可以把`a.ending_model`和`a.loop.ending_model`设定为更大的值。  \n\n如果你不需要对loop进行优化，那么你可以选择`AutoModel`代替`LoopModel`，同时移除与loop相关的三个参数。  \n\n使用`LoopModel`和`AutoModel`补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置`select_atoms`方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写`residue_range`有可能需要重新编号。同时`residue_range`是包括最后一个列出的残基的。\n\n\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(AutoModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n如果使用的是`LoopModel`，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  \n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(LoopModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n    def select_loop_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n","source":"_posts/使用Modeller补缺失残基.md","raw":"---\ntitle: 使用Modeller补缺失残基\ndate: 2022-12-08 03:19:31\ncategories:\n    - 分子模拟\ntags:\n    - pdb预处理\n---\n写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把[使用modeller补全缺失残基](https://salilab.org/modeller/wiki/Missing_residues)的网页放在这里。  \n\n我们以[4GNX](https://files.rcsb.org/download/4GNX.pdb)为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为`4gnx_half.pdb`。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的`REMARK 465`中记录了缺失的残基序号和类型，pdb文件中的`SEQRES`也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  \n\n我们可以使用一下代码提取pdb文件中的序列信息：\n```python\nfrom modeller import *\n# Get the sequence of the 4gnx PDB file, and write to an alignment file\ncode = '4gnx'\n\ne = Environ()\nm = Model(e, file=code)\naln = Alignment(e)\naln.append_model(m, align_codes=code)\naln.write(file=code+'.seq')\n```\n<!--more-->\n用以上代码生成的序列文件`4gnx_half.seq`如下：\n```\n\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN\nISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA\nHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE\nNHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY\nGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS\nTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE\nNLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK\nLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt\ntttttttttttttttt*\n```\n从`REMARK 465`和`SEQRES`中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用`-`填补缺失残基的模板序列和一份完整序列，这两个序列可以写在`alignment.aln`文件中：\n```\n>P1;4gnx_half\nstructureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n>P1;4gnx_half_fill\nsequence:::::::::\nMEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ\nANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA\nVVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN\nEVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN\nDAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN\nQQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD\nFGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL\nGMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW\nLSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG\nMELVDAIRAYM/ttttttttttttttttttttttttt*\n```\n现在我们可以用Modeller中的['LoopModel' class](https://salilab.org/modeller/10.0/manual/node33.html)生成所有的残基，并对loop区域进行优化，代码如下：\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\na = LoopModel(env, alnfile = 'alignment.ali',\n              knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.loop.starting_model = 1\na.loop.ending_model   = 2\na.loop.md_level       = refine.fast\n\na.make()\n```\n使用该代码会生成一个使用model生成的结构(`a.starting_model = 1`和`a.ending_model = 1`)和两个使用loopmodel生成的结构(`a.loop.starting_model = 1`和`a.loop.ending_model = 2`)。如果我们要生成更多的结构，那么我们可以把`a.ending_model`和`a.loop.ending_model`设定为更大的值。  \n\n如果你不需要对loop进行优化，那么你可以选择`AutoModel`代替`LoopModel`，同时移除与loop相关的三个参数。  \n\n使用`LoopModel`和`AutoModel`补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置`select_atoms`方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写`residue_range`有可能需要重新编号。同时`residue_range`是包括最后一个列出的残基的。\n\n\n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(AutoModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n如果使用的是`LoopModel`，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加``select_loop_atoms`进行限制。  \n```python\nfrom modeller import *\nfrom modeller.automodel import *    # Load the AutoModel class\n\nlog.verbose()\nenv = Environ()\n\n# directories for input atom files\nenv.io.atom_files_directory = ['.', '../atom_files']\n\nclass MyModel(LoopModel):\n    def select_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n    def select_loop_atoms(self):\n        return Selection(self.residue_range('86:A', '89:A'),\n                         self.residue_range('180:B', '187:B'),\n                         self.residue_range('493:C', '501:C'))\n\na = MyModel(env, alnfile = 'alignment.ali',\n            knowns = '4gnx_half', sequence = '4gnx_half_fill')\na.starting_model= 1\na.ending_model  = 1\n\na.make()\n```\n","slug":"使用Modeller补缺失残基","published":1,"updated":"2022-12-15T04:32:36.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pv000wl8vqa78d3u1q","content":"<p>写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把<a href=\"https://salilab.org/modeller/wiki/Missing_residues\">使用modeller补全缺失残基</a>的网页放在这里。  </p>\n<p>我们以<a href=\"https://files.rcsb.org/download/4GNX.pdb\">4GNX</a>为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为<code>4gnx_half.pdb</code>。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的<code>REMARK 465</code>中记录了缺失的残基序号和类型，pdb文件中的<code>SEQRES</code>也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  </p>\n<p>我们可以使用一下代码提取pdb文件中的序列信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># Get the sequence of the 4gnx PDB file, and write to an alignment file</span></span><br><span class=\"line\">code = <span class=\"string\">&#x27;4gnx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = Environ()</span><br><span class=\"line\">m = Model(e, file=code)</span><br><span class=\"line\">aln = Alignment(e)</span><br><span class=\"line\">aln.append_model(m, align_codes=code)</span><br><span class=\"line\">aln.write(file=code+<span class=\"string\">&#x27;.seq&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>用以上代码生成的序列文件<code>4gnx_half.seq</code>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN</span><br><span class=\"line\">ISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA</span><br><span class=\"line\">HLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE</span><br><span class=\"line\">NHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY</span><br><span class=\"line\">GELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS</span><br><span class=\"line\">TMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE</span><br><span class=\"line\">NLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK</span><br><span class=\"line\">LREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt</span><br><span class=\"line\">tttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>从<code>REMARK 465</code>和<code>SEQRES</code>中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用<code>-</code>填补缺失残基的模板序列和一份完整序列，这两个序列可以写在<code>alignment.aln</code>文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br><span class=\"line\">&gt;P1;4gnx_half_fill</span><br><span class=\"line\">sequence:::::::::</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>现在我们可以用Modeller中的<a href=\"https://salilab.org/modeller/10.0/manual/node33.html\">‘LoopModel’ class</a>生成所有的残基，并对loop区域进行优化，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a = LoopModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">              knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.loop.starting_model = <span class=\"number\">1</span></span><br><span class=\"line\">a.loop.ending_model   = <span class=\"number\">2</span></span><br><span class=\"line\">a.loop.md_level       = refine.fast</span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>使用该代码会生成一个使用model生成的结构(<code>a.starting_model = 1</code>和<code>a.ending_model = 1</code>)和两个使用loopmodel生成的结构(<code>a.loop.starting_model = 1</code>和<code>a.loop.ending_model = 2</code>)。如果我们要生成更多的结构，那么我们可以把<code>a.ending_model</code>和<code>a.loop.ending_model</code>设定为更大的值。  </p>\n<p>如果你不需要对loop进行优化，那么你可以选择<code>AutoModel</code>代替<code>LoopModel</code>，同时移除与loop相关的三个参数。  </p>\n<p>使用<code>LoopModel</code>和<code>AutoModel</code>补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置<code>select_atoms</code>方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写<code>residue_range</code>有可能需要重新编号。同时<code>residue_range</code>是包括最后一个列出的残基的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">AutoModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(<span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>如果使用的是<code>LoopModel</code>，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加&#96;&#96;select_loop_atoms&#96;进行限制。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">LoopModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(<span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_loop_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(<span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>写这个是因为每次用的时候发现都忘记了，甚至不知道网页在哪，每次都要在一堆链接中反复点击，宛如蒙特卡洛模拟，有时候甚至还找不到想要的网站。因此我现在就把<a href=\"https://salilab.org/modeller/wiki/Missing_residues\">使用modeller补全缺失残基</a>的网页放在这里。  </p>\n<p>我们以<a href=\"https://files.rcsb.org/download/4GNX.pdb\">4GNX</a>为例进行补全。首先4GNX在PDB中是个二聚体结构，我们只需要其中的一半的信息，所以我们删除了X，Y，Z和L链，改文件命名为<code>4gnx_half.pdb</code>。之后我们需要得到pdb中的序列信息。但是modeller只会得到存在的残基的序列。对于中间缺失的残基，虽然pdb文件的<code>REMARK 465</code>中记录了缺失的残基序号和类型，pdb文件中的<code>SEQRES</code>也记录了生物分子的序列信息，但是modeller并不会帮你从pdb中提取出来在序列上补充上，因为modeller认为这部分信息是不可靠的。并且有的经过处理的pdb甚至会丢失这些信息。  </p>\n<p>我们可以使用一下代码提取pdb文件中的序列信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># Get the sequence of the 4gnx PDB file, and write to an alignment file</span></span><br><span class=\"line\">code = <span class=\"string\">&#x27;4gnx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = Environ()</span><br><span class=\"line\">m = Model(e, file=code)</span><br><span class=\"line\">aln = Alignment(e)</span><br><span class=\"line\">aln.append_model(m, align_codes=code)</span><br><span class=\"line\">aln.write(file=code+<span class=\"string\">&#x27;.seq&#x27;</span>)</span><br></pre></td></tr></table></figure>","more":"<p>用以上代码生成的序列文件<code>4gnx_half.seq</code>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVAVVRN</span><br><span class=\"line\">ISRNATNVAYSVEDGTGQIEVRQWLDASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYNEVMFHRLEAVHA</span><br><span class=\"line\">HLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFNDAVDRFYPLLQE</span><br><span class=\"line\">NHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEANQQCDVIGILDSY</span><br><span class=\"line\">GELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGDFGGRSLSMFSSS</span><br><span class=\"line\">TMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGGAGANMAERRTIVQVKDENLGMSEKPDYFNVRATVVYIKQE</span><br><span class=\"line\">NLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMWLSGFNEDATQLIGMSAGELHK</span><br><span class=\"line\">LREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAGMELVDAIRAYM/ttttttttt</span><br><span class=\"line\">tttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>从<code>REMARK 465</code>和<code>SEQRES</code>中我们可以知道缺失的残基是哪些，进而填入以上生成的序列中。这里我们要有一份用<code>-</code>填补缺失残基的模板序列和一份完整序列，这两个序列可以写在<code>alignment.aln</code>文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;P1;4gnx_half</span><br><span class=\"line\">structureX:4gnx_half:   1 :A:+688 :K:MOL_ID  1; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  A, X; ENGINEERED  YES; MOL_ID  2; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  B, Y; ENGINEERED  YES; MOL_ID  3; MOLECULE  PUTATIVE UNCHARACTERIZED PROTEIN; CHAIN  C, Z; ENGINEERED  YES; MOL_ID  4; MOLECULE  DNA (25-MER); CHAIN  K, L; ENGINEERED  YES:MOL_ID  1; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM04165.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  2; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM02579.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  3; ORGANISM_SCIENTIFIC  USTILAGO MAYDIS; ORGANISM_COMMON  SMUT FUNGUS; ORGANISM_TAXID  237631; STRAIN  521 / FGSC 9021; GENE  UM05156.1; EXPRESSION_SYSTEM  SPODOPTERA FRUGIPERDA; EXPRESSION_SYSTEM_TAXID  7108; EXPRESSION_SYSTEM_CELL_LINE  HI5; MOL_ID  4; SYNTHETIC  YES; ORGANISM_SCIENTIFIC  SYNTHETIC; ORGANISM_TAXID  32630: 2.80: 0.22</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTV----DVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLD--------ASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTN---------GGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br><span class=\"line\">&gt;P1;4gnx_half_fill</span><br><span class=\"line\">sequence:::::::::</span><br><span class=\"line\">MEKPTPLINSSMLGQYVGQTVRIVGKVHKVTGNTLLMQTSDLGNVEIAMTPDSDVSSSTFVEVTGKVSDAGSSFQ</span><br><span class=\"line\">ANQIREFTTVDCGHDVDLTLVENVVQISAAFPNLFSD/NTLRPVTIRQILNAEQPHPDAEFILDGAELGQLTFVA</span><br><span class=\"line\">VVRNISRNATNVAYSVEDGTGQIEVRQWLDSSSDDSSKASEIRNNVYVRVLGTLKSFQNRRSISSGHMRPVIDYN</span><br><span class=\"line\">EVMFHRLEAVHAHLQVTR/IYPIEGLSPYQNRWTIKARVTSKSDIRHWSNQRGEGKLFSVNLLDDSGEIKATGFN</span><br><span class=\"line\">DAVDRFYPLLQENHVYLISKARVNIAKKQFSNLQNEYEITFENSTEIEECTDATDVPEVKYEFVRINELESVEAN</span><br><span class=\"line\">QQCDVIGILDSYGELSEIVSKASQRPVQKRELTLVDQGNRSVKLTLWGKTAETFPTNAGVDEKPVLAFKGVKVGD</span><br><span class=\"line\">FGGRSLSMFSSSTMLINPDITESHVLRGWYDNDGAHAQFQPYTNGGVGGGAMGGGGAGANMAERRTIVQVKDENL</span><br><span class=\"line\">GMSEKPDYFNVRATVVYIKQENLYYTACASEGCNKKVNLDHENNWRCEKCDRSYATPEYRYILSTNVADATGQMW</span><br><span class=\"line\">LSGFNEDATQLIGMSAGELHKLREESESEFSAALHRAANRMYMFNCRAKMDTFNDTARVRYTISRAAPVDFAKAG</span><br><span class=\"line\">MELVDAIRAYM/ttttttttttttttttttttttttt*</span><br></pre></td></tr></table></figure>\n<p>现在我们可以用Modeller中的<a href=\"https://salilab.org/modeller/10.0/manual/node33.html\">‘LoopModel’ class</a>生成所有的残基，并对loop区域进行优化，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">a = LoopModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">              knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.loop.starting_model = <span class=\"number\">1</span></span><br><span class=\"line\">a.loop.ending_model   = <span class=\"number\">2</span></span><br><span class=\"line\">a.loop.md_level       = refine.fast</span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>使用该代码会生成一个使用model生成的结构(<code>a.starting_model = 1</code>和<code>a.ending_model = 1</code>)和两个使用loopmodel生成的结构(<code>a.loop.starting_model = 1</code>和<code>a.loop.ending_model = 2</code>)。如果我们要生成更多的结构，那么我们可以把<code>a.ending_model</code>和<code>a.loop.ending_model</code>设定为更大的值。  </p>\n<p>如果你不需要对loop进行优化，那么你可以选择<code>AutoModel</code>代替<code>LoopModel</code>，同时移除与loop相关的三个参数。  </p>\n<p>使用<code>LoopModel</code>和<code>AutoModel</code>补残基时，默认所有的原子都可以移动，如果你想让不缺失的残基不被移动的话，你可以设置<code>select_atoms</code>方法。在Modeller中，残基序号是从1开始并且按顺序加一的，因此在写<code>residue_range</code>有可能需要重新编号。同时<code>residue_range</code>是包括最后一个列出的残基的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">AutoModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(<span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>\n<p>如果使用的是<code>LoopModel</code>，那么在使用以上的方式进行约束时，两个边界上的残基还是会被移动，因此还需要添加&#96;&#96;select_loop_atoms&#96;进行限制。  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> modeller <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> modeller.automodel <span class=\"keyword\">import</span> *    <span class=\"comment\"># Load the AutoModel class</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.verbose()</span><br><span class=\"line\">env = Environ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># directories for input atom files</span></span><br><span class=\"line\">env.io.atom_files_directory = [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;../atom_files&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>(<span class=\"title class_ inherited__\">LoopModel</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(<span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">select_loop_atoms</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Selection(<span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;86:A&#x27;</span>, <span class=\"string\">&#x27;89:A&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;180:B&#x27;</span>, <span class=\"string\">&#x27;187:B&#x27;</span>),</span><br><span class=\"line\">                         <span class=\"variable language_\">self</span>.residue_range(<span class=\"string\">&#x27;493:C&#x27;</span>, <span class=\"string\">&#x27;501:C&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = MyModel(env, alnfile = <span class=\"string\">&#x27;alignment.ali&#x27;</span>,</span><br><span class=\"line\">            knowns = <span class=\"string\">&#x27;4gnx_half&#x27;</span>, sequence = <span class=\"string\">&#x27;4gnx_half_fill&#x27;</span>)</span><br><span class=\"line\">a.starting_model= <span class=\"number\">1</span></span><br><span class=\"line\">a.ending_model  = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.make()</span><br></pre></td></tr></table></figure>"},{"title":"在latex中定义新命令","date":"2023-01-07T06:03:02.000Z","mathjax":true,"_content":"\n# 定义新命令\n为了在latex中书写方便，可以用`newcommand`定义新命令:\n```latex\n\\newcommand{\\<cmdname>}[<n>]{<command>}\n```\n  1. `<cmdname>`为新定义的命令名字。  \n  2. `<n>`为参数个数，各个参数可以在命令体中用`#1`、`#2`表示  \n  3. `<command>`为命令体。  \n例如，可以用`newcommand`定义平均值的表示:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n```\n之后可以这样在数学环境中使用\n```latex\n\\mean{a}{n}\n```\n但是`newcommand`不允许定义一个已经存在的命令，如果要防止报错，可以使用`providecommand`，该命令使用和`newcommand`一致，当命令不存在时，它相当于`newcommand`，当命令存在时，它沿用之前的定义。例如:\n```latex\n\\providecommand{\\mean}[2]{\\frac{#1+#2}{2}}\n```\n则`\\mean{a}{n}`依旧等于\n$$ \\frac{a_1+a_2+\\cdots+a_n}{n} $$\n有时候我们需要重新定义一个已经定义的命令，此时，我们可以用`renewcommand`，`renewcommand`的使用和`newcomand`相同，但是它必须以及存在原命令，否则会报错。\n这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。\n<!--more-->\n\n# 使用局部命令\n为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用`newcommand`和`renewcommand`我们可以如下操作:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n$$\\mean{a}{n}$$\n\\renewcommand{\\mean}[2]{\\frac{#1+#1}{2}}\n$$\\mean{a}{n}$$\n```\n这时候两个`\\mean`的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个`\\newcommand`需要改为`\\renewcommand`。  \n\n为了克服这个缺陷，我们可以使用`def`,`def`的语法为:\n```latex\n\\def\\⟨name⟩<parameter text>{⟨definition⟩}\n```\n  1. `<name>`为新定义的命令名字。  \n  2. `<parameter text>`为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为`#1#2#3`。  \n  3. `<definition>`为命令体，其中的参数用`#1`、`#2`……表示。  \n\n`def`不需要检查该命令是否定义，因此适合用来该操作。同时`def`会受到局部环境的影响，需要定义全局的命令可以用`gdef`，如果要对`<definition>`中的命令进行展开，可以用`edef`，全局定义展开时可以用`xdef`\n\n","source":"_posts/在latex中定义新命令.md","raw":"---\ntitle: 在latex中定义新命令\ndate: 2023-01-07 15:03:02\nmathjax: true\ncategories:\n    - latex\ntags:\n    - latex\n---\n\n# 定义新命令\n为了在latex中书写方便，可以用`newcommand`定义新命令:\n```latex\n\\newcommand{\\<cmdname>}[<n>]{<command>}\n```\n  1. `<cmdname>`为新定义的命令名字。  \n  2. `<n>`为参数个数，各个参数可以在命令体中用`#1`、`#2`表示  \n  3. `<command>`为命令体。  \n例如，可以用`newcommand`定义平均值的表示:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n```\n之后可以这样在数学环境中使用\n```latex\n\\mean{a}{n}\n```\n但是`newcommand`不允许定义一个已经存在的命令，如果要防止报错，可以使用`providecommand`，该命令使用和`newcommand`一致，当命令不存在时，它相当于`newcommand`，当命令存在时，它沿用之前的定义。例如:\n```latex\n\\providecommand{\\mean}[2]{\\frac{#1+#2}{2}}\n```\n则`\\mean{a}{n}`依旧等于\n$$ \\frac{a_1+a_2+\\cdots+a_n}{n} $$\n有时候我们需要重新定义一个已经定义的命令，此时，我们可以用`renewcommand`，`renewcommand`的使用和`newcomand`相同，但是它必须以及存在原命令，否则会报错。\n这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。\n<!--more-->\n\n# 使用局部命令\n为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用`newcommand`和`renewcommand`我们可以如下操作:\n```latex\n\\newcommand{\\mean}[2]{\\frac{#1_1 + #1_2 + \\cdots + #1_#2}{#2}}\n$$\\mean{a}{n}$$\n\\renewcommand{\\mean}[2]{\\frac{#1+#1}{2}}\n$$\\mean{a}{n}$$\n```\n这时候两个`\\mean`的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个`\\newcommand`需要改为`\\renewcommand`。  \n\n为了克服这个缺陷，我们可以使用`def`,`def`的语法为:\n```latex\n\\def\\⟨name⟩<parameter text>{⟨definition⟩}\n```\n  1. `<name>`为新定义的命令名字。  \n  2. `<parameter text>`为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为`#1#2#3`。  \n  3. `<definition>`为命令体，其中的参数用`#1`、`#2`……表示。  \n\n`def`不需要检查该命令是否定义，因此适合用来该操作。同时`def`会受到局部环境的影响，需要定义全局的命令可以用`gdef`，如果要对`<definition>`中的命令进行展开，可以用`edef`，全局定义展开时可以用`xdef`\n\n","slug":"在latex中定义新命令","published":1,"updated":"2023-01-09T08:17:00.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4px0010l8vq7nay4fdc","content":"<h1 id=\"定义新命令\"><a href=\"#定义新命令\" class=\"headerlink\" title=\"定义新命令\"></a>定义新命令</h1><p>为了在latex中书写方便，可以用<code>newcommand</code>定义新命令:</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>&#123;<span class=\"keyword\">\\&lt;</span>cmdname&gt;&#125;[&lt;n&gt;]&#123;&lt;command&gt;&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>&lt;cmdname&gt;</code>为新定义的命令名字。  </li>\n<li><code>&lt;n&gt;</code>为参数个数，各个参数可以在命令体中用<code>#1</code>、<code>#2</code>表示  </li>\n<li><code>&lt;command&gt;</code>为命令体。<br>例如，可以用<code>newcommand</code>定义平均值的表示:<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>&#125;&#123;<span class=\"params\">#2</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n之后可以这样在数学环境中使用<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\mean</span>&#123;a&#125;&#123;n&#125;</span><br></pre></td></tr></table></figure>\n但是<code>newcommand</code>不允许定义一个已经存在的命令，如果要防止报错，可以使用<code>providecommand</code>，该命令使用和<code>newcommand</code>一致，当命令不存在时，它相当于<code>newcommand</code>，当命令存在时，它沿用之前的定义。例如:<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\providecommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span>+<span class=\"params\">#2</span>&#125;&#123;2&#125;&#125;</span><br></pre></td></tr></table></figure>\n则<code>\\mean&#123;a&#125;&#123;n&#125;</code>依旧等于<br>$$ \\frac{a_1+a_2+\\cdots+a_n}{n} $$<br>有时候我们需要重新定义一个已经定义的命令，此时，我们可以用<code>renewcommand</code>，<code>renewcommand</code>的使用和<code>newcomand</code>相同，但是它必须以及存在原命令，否则会报错。<br>这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。<span id=\"more\"></span></li>\n</ol>\n<h1 id=\"使用局部命令\"><a href=\"#使用局部命令\" class=\"headerlink\" title=\"使用局部命令\"></a>使用局部命令</h1><p>为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用<code>newcommand</code>和<code>renewcommand</code>我们可以如下操作:</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>&#125;&#123;<span class=\"params\">#2</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>&#123;a&#125;&#123;n&#125;<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br><span class=\"line\"><span class=\"keyword\">\\renewcommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span>+<span class=\"params\">#1</span>&#125;&#123;2&#125;&#125;</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>&#123;a&#125;&#123;n&#125;<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br></pre></td></tr></table></figure>\n<p>这时候两个<code>\\mean</code>的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个<code>\\newcommand</code>需要改为<code>\\renewcommand</code>。  </p>\n<p>为了克服这个缺陷，我们可以使用<code>def</code>,<code>def</code>的语法为:</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\def</span><span class=\"keyword\">\\⟨</span>name⟩&lt;parameter text&gt;&#123;⟨definition⟩&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>&lt;name&gt;</code>为新定义的命令名字。  </li>\n<li><code>&lt;parameter text&gt;</code>为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为<code>#1#2#3</code>。  </li>\n<li><code>&lt;definition&gt;</code>为命令体，其中的参数用<code>#1</code>、<code>#2</code>……表示。</li>\n</ol>\n<p><code>def</code>不需要检查该命令是否定义，因此适合用来该操作。同时<code>def</code>会受到局部环境的影响，需要定义全局的命令可以用<code>gdef</code>，如果要对<code>&lt;definition&gt;</code>中的命令进行展开，可以用<code>edef</code>，全局定义展开时可以用<code>xdef</code></p>\n","excerpt":"<h1 id=\"定义新命令\"><a href=\"#定义新命令\" class=\"headerlink\" title=\"定义新命令\"></a>定义新命令</h1><p>为了在latex中书写方便，可以用<code>newcommand</code>定义新命令:</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>&#123;<span class=\"keyword\">\\&lt;</span>cmdname&gt;&#125;[&lt;n&gt;]&#123;&lt;command&gt;&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>&lt;cmdname&gt;</code>为新定义的命令名字。  </li>\n<li><code>&lt;n&gt;</code>为参数个数，各个参数可以在命令体中用<code>#1</code>、<code>#2</code>表示  </li>\n<li><code>&lt;command&gt;</code>为命令体。<br>例如，可以用<code>newcommand</code>定义平均值的表示:<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>&#125;&#123;<span class=\"params\">#2</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n之后可以这样在数学环境中使用<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\mean</span>&#123;a&#125;&#123;n&#125;</span><br></pre></td></tr></table></figure>\n但是<code>newcommand</code>不允许定义一个已经存在的命令，如果要防止报错，可以使用<code>providecommand</code>，该命令使用和<code>newcommand</code>一致，当命令不存在时，它相当于<code>newcommand</code>，当命令存在时，它沿用之前的定义。例如:<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\providecommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span>+<span class=\"params\">#2</span>&#125;&#123;2&#125;&#125;</span><br></pre></td></tr></table></figure>\n则<code>\\mean&#123;a&#125;&#123;n&#125;</code>依旧等于<br>$$ \\frac{a_1+a_2+\\cdots+a_n}{n} $$<br>有时候我们需要重新定义一个已经定义的命令，此时，我们可以用<code>renewcommand</code>，<code>renewcommand</code>的使用和<code>newcomand</code>相同，但是它必须以及存在原命令，否则会报错。<br>这些命令的定义会受到局部环境的影响，即在环境内部定义的命令在外部无法使用。","more":"</li>\n</ol>\n<h1 id=\"使用局部命令\"><a href=\"#使用局部命令\" class=\"headerlink\" title=\"使用局部命令\"></a>使用局部命令</h1><p>为了让书写简单美观，我们常常希望命令能够像编程语言的变量一样，即可以重新定义后对之后的代码都生效。使用<code>newcommand</code>和<code>renewcommand</code>我们可以如下操作:</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\newcommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span><span class=\"built_in\">_</span>1 + <span class=\"params\">#1</span><span class=\"built_in\">_</span>2 + <span class=\"keyword\">\\cdots</span> + <span class=\"params\">#1</span><span class=\"built_in\">_</span><span class=\"params\">#2</span>&#125;&#123;<span class=\"params\">#2</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>&#123;a&#125;&#123;n&#125;<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br><span class=\"line\"><span class=\"keyword\">\\renewcommand</span>&#123;<span class=\"keyword\">\\mean</span>&#125;[2]&#123;<span class=\"keyword\">\\frac</span>&#123;<span class=\"params\">#1</span>+<span class=\"params\">#1</span>&#125;&#123;2&#125;&#125;</span><br><span class=\"line\"><span class=\"built_in\">$</span><span class=\"built_in\">$</span><span class=\"keyword\">\\mean</span>&#123;a&#125;&#123;n&#125;<span class=\"built_in\">$</span><span class=\"built_in\">$</span></span><br></pre></td></tr></table></figure>\n<p>这时候两个<code>\\mean</code>的效果是不一致的。但是这样做有个缺陷，即我们无法知道该命令是否已经定义，如果已经定义，那么第一个<code>\\newcommand</code>需要改为<code>\\renewcommand</code>。  </p>\n<p>为了克服这个缺陷，我们可以使用<code>def</code>,<code>def</code>的语法为:</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\def</span><span class=\"keyword\">\\⟨</span>name⟩&lt;parameter text&gt;&#123;⟨definition⟩&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>&lt;name&gt;</code>为新定义的命令名字。  </li>\n<li><code>&lt;parameter text&gt;</code>为参数定义，可选，比如我不需要参数时候可以不写，我需要三个参数时为<code>#1#2#3</code>。  </li>\n<li><code>&lt;definition&gt;</code>为命令体，其中的参数用<code>#1</code>、<code>#2</code>……表示。</li>\n</ol>\n<p><code>def</code>不需要检查该命令是否定义，因此适合用来该操作。同时<code>def</code>会受到局部环境的影响，需要定义全局的命令可以用<code>gdef</code>，如果要对<code>&lt;definition&gt;</code>中的命令进行展开，可以用<code>edef</code>，全局定义展开时可以用<code>xdef</code></p>"},{"title":"制作小分子力场","date":"2022-12-29T12:24:34.000Z","mathjax":true,"_content":"\n新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。  \n\n# 获得PDB结构\n这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从[PDB库](https://www.rcsb.org/)中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为[ACT](https://www.rcsb.org/ligand/ACT)和[3P8](https://www.rcsb.org/ligand/3P8)。在网页上可以下载到`.sdf`文件，接下来可以使用openbabel将`.sdf`文件转化为`.pdb`坐标。\n![使用openbebal转化文件格式](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png)\n<!-- ![使用openbebal转化文件格式](openbabel.png) -->\n<!--more-->\n这样就获得了对应的`.pdb`文件。  \n\n此时由openbabel生成的acetate的`.pdb`文件如下:\n```\nCOMPND    ACT \nAUTHOR    GENERATED BY OPEN BABEL 3.1.1\nHETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  \nHETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  \nHETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-\nHETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  \nHETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  \nHETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  \nHETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  \nCONECT    1    2    2    3    4                                       \nCONECT    2    1    1                                                 \nCONECT    3    1                                                      \nCONECT    4    1    5    6    7                                       \nCONECT    5    4                                                      \nCONECT    6    4                                                      \nCONECT    7    4                                                      \nMASTER        0    0    0    0    0    0    0    0    7    0    7    0\nEND\n```\n`antechamber`对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:\n```\nATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  \nATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  \nATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O\nATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  \nATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  \nATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  \nATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H \n```\n\n# AMBER力场(不使用Gaussian)\n对于amber力场，可以使用AmberTools中的`antechamber`软件生成小分子的gaff力场。在生成`.mol2`文件之前，我们先对`.pdb`文件进行预处理。  \n\n首先先用tleap转化下原子的名字, `tleap.in`文件中的内容如下:\n```\nsource leaprc.protein.ff14SB\nTMP = loadpdb ACT.pdb\nsavepdb TMP ACT_tleap.pdb\nquit\n```\n用以下的命令生成`ACT_tleap.pdb`:\n```bash\ntleap -f tleap.in\n```\n之后再用`reduce`补充H原子(实际上对于小分子即使手动删除貌似也不会补充):\n```bash\nreduce ACT_tleap.pdb >ACT_h.pdb\n```\n之后我们可以使用`antechamber`软件生成`.mol2`文件，命令如下:\n```bash\nantechamber -i ACT_h.pdb -fi pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1\n```\n上面各个选项的意思分别为:  \n  1. `-i ACT_h.pdb`: 指定输入3D结构文件名称。  \n  2. `-fi pdb`: 指定输入文件格式为PDB格式。  \n  3. `-o ACT.mol2`: 指定输出的文件名称。  \n  4. `-fo mol2`: 指定输出文件类型为`.mol2`类型。  \n  5. `-c bcc`: 指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。  \n  6. `-s 2`: 指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(`2`)。  \n  7. `-nc -1`: 指定净电荷数目为`-1`。  \n\n`ACT.mol2`文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成`.prmtop`和`.inpcrd`文件。生成的`.mol2`文件如下:\n```\n@<TRIPOS>MOLECULE\nACT\n    7     6     1     0     0\nSMALL\nbcc\n\n\n@<TRIPOS>ATOM\n      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600\n      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300\n      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300\n      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100\n      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033\n      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033\n      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033\n@<TRIPOS>BOND\n     1     1     2 1   \n     2     1     3 1   \n     3     1     4 1   \n     4     4     5 1   \n     5     4     6 1   \n     6     4     7 1   \n@<TRIPOS>SUBSTRUCTURE\n     1 ACT         1 TEMP              0 ****  ****    0 ROOT\n```\n`.mol`文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且`.mol2`文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在`$AMBERHOME/dat/leap/parm/gaff.dat`中定义。  \n\n参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用`parmchk2`检查缺失的参数，命令如下:\n```bash\nparmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod\n```\n执行以上文件会生成`ACT.frcmod`文件。这是一个参数文件, 能够载入LEaP中用于添加缺失的参数, 这样就能包含所有缺失的参数。在模拟之前，需要仔细检查`ACT.frcmod`文件。生成的`ACT.frcmod`文件如下:\n```\nRemark line goes here\nMASS\n\nBOND\n\nANGLE\n\nDIHE\n\nIMPROPER\nc3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)\n\nNONBON\n```\n可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。  \n\n现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:\n```\ntleap -f leaprc.protein.ff14SB\n```\n\n之后在tleap中导入GAFF力场:\n```\nsource leaprc.gaff\n```\n现在导入acetate单元:\n```\nACT = loadmol2 ACT.mol2\n```\n此时在`tleap`中键入`list`，可以看到新增加的`ACT`单元:\n```\n> ACT = loadmol2 ACT.mol2\nLoading Mol2 file: ./ACT.mol2\nReading MOLECULE named ACT\n> list\nACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA\nCARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY\nCHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS\nCMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL\nCYM       CYS       CYX       GLH       GLN       GLU       GLY       HID\nHIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS\nMET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN\nNGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE\nNLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR\nNTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP\nTYR       VAL       frcmod14SBgaff      parm10\n```\n检查`ACT`单元:\n```\n> check ACT\nChecking 'ACT'....\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\nChecking parameters for unit 'ACT'.\nChecking for bond parameters.\nChecking for angle parameters.\ncheck:  Warnings: 1\nUnit is OK.\n```\n可以看到并没有缺失参数。现在我们再导入`ACT.frcmod`文件:\n```\nloadamberparams ACT.frcmod\n```\n接下来就可以将生成的残基导出了:\n```\n> saveoff ACT ACT.lib\n Creating ACT.lib\nBuilding topology.\nBuilding atom parameters.\n> saveamberparm ACT ACT.prmtop ACT.inpcrd\nChecking Unit.\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\n\nNote: Ignoring the warning from Unit Checking.\n\nBuilding topology.\nBuilding atom parameters.\nBuilding bond parameters.\nBuilding angle parameters.\nBuilding proper torsion parameters.\nBuilding improper torsion parameters.\n total 1 improper torsion applied\nBuilding H-Bond parameters.\nIncorporating Non-Bonded adjustments.\nNot Marking per-residue atom chain types.\nMarking per-residue atom chain types.\n  (Residues lacking connect0/connect1 -\n   these don't have chain types marked:\n\n        res     total affected\n\n        ACT     1\n  )\n (no restraints)\n>\n```\n此时有了`ACT.prmtop`和`ACT.inpcrd`, 可以用这两个文件生成gromacs需要的`ACT.top`和`ACT.gro`。这可以用`amb2gro_top_gro.py`完成:\n```\namb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb\n```\n这样我们就有了gromacs可用的`.top`文件和`.gro`文件。\n\n\n>TIPS: 在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。\n```\nWarning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]\n```\n\n# AMBER力场(使用Gaussian)\n使用gaussian来生成精确的静电分布。这里需要提及, g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。\n\n## gaussian的安装\n首先进行gaussian的安装。[gaussian的安装方法](http://sobereva.com/439)在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为`g16.tar.gz`，则使用以下命令进行解压:\n```shell\ntar -xvf g16.tar.gz\n```\n假设压缩后的`g16`文件夹放置在`/home/hapo/`文件夹下。先在`/home/hapo/g16`文件夹下新建文件夹`scratch`。接下来在`.bashrc`文件中添加如下内容:\n```bash\nexport g16root=/home/hapo\nexport GAUSS_SCRDIR=/home/hapo/g16/scratch\nsource /home/hapo/g16/bsd/g16.profile\n```\n接下来在进入`/home/hapo/g16`中更改文件的权限:\n```bash\nchmod 750 -R *\n```\n加下来只要重开终端即可运行g16。\n\n## 生成mol2文件\n这一步使用[别人的脚本](https://github.com/tamaswells/GMX)，使用方法记录在该[Jerkwin博客网页中](https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/)。  \n\n首先生成gaussian程序的输入文件:\n```bash\npython pre.py acetate.pdb -1\n```\n之后运行gaussian程序:\n```bash\ng16 <ACT.gjf >ACT.out\n```\n最后运行`post.py`程序:\n```bash\npython post.py\n```\n以上命令最终会生成`ACT.mol2`文件，其中的静电荷是用gaussian计算后拟合得到的。  \n\n最后我们再用以上提及的`tleap`和`amb2gro_top_gro.py`即可生成gromacs的`.top`和`.gro`文件。\n\n\n# OPLS-AA力场(使用LigParGen)\n[LigParGen](http://zarbi.chem.yale.edu/ligpargen/)可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png)\n点击`Submit Molecule`之后，只要下载gromacs的`.top`和`.gro`文件即可。关于使用LigParGen生成lammaps力场文件的方法[在此](https://longkunxuluke.github.io/posts/2020/11/blog-post-4/)。\n\n\n# OPLS-AA力场(使用TPPMKTOP)\n[TPPMKTOP](http://erg.biophys.msu.ru/tpp/)也可以用于生成OPLS-AA力场，并且和[文献](https://pubs.acs.org/doi/10.1021/ja058637b)中的静电值最为接近，该文献可能是使用该程序生成的。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png)\n同样，只要上传相应的PDB文件即可。\n\n# 构建gromacs拓扑文件\n为了能够用gromacs进行模拟，先构建gromacs可用的`.top`文件。小分子的力场放在`molecule`文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在`heavywater`文件夹中。首先先在`topol.top`文件中写下如下内容:\n```\n#include \"amber14sb_parmbsc1.ff/forcefield.itp\"\n#include \"heavywater/tip3p-hw.itp\"\n#include \"molecule/ACT.itp\"\n#include \"molecule/MLM.itp\"\n#include \"amber14sb_parmbsc1.ff/ions.itp\"\n\n\n[ System ]\nsmall molecule in water\n\n[ Molecules ]\n```\n以下是一种外门邪道的构建`.top`和`.gro`的方法。`solvate`可以用来给空盒子填充水，可以这样写:\n```bash\ngmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top\n```\n这样子可以生成一个`conf.gro`文件，盒子大小为$2.5nm \\times 2.5 nm \\times 25 nm$，其中填充了水分子。\n\n同时`solvate`程序可以通过`-maxsol`来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:\n```bash\ngmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top\ngmx solvate -cs ./molecule/MLM.gro -cp cp.gro -o cp2.gro -maxsol 1 -p topol.top\ngmx solvate -cs spc216.gro -cp cp2.gro -o conf.gro -p topol.top\n```\n\n比较正确的做法应该用`insert-molecules`来插入小分子，用`solvate`来填充水分子:\n```bash\ngmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2\ngmx solvate -cs spc216.gro -cp box.gro -o conf.gro -p topol.top\n```","source":"_posts/制作小分子力场.md","raw":"---\ntitle: 制作小分子力场\ndate: 2022-12-29 21:24:34\nmathjax: true\ncategories:\n    - 分子模拟\ntags:\n    - 力场构建\n---\n\n新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。  \n\n# 获得PDB结构\n这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从[PDB库](https://www.rcsb.org/)中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为[ACT](https://www.rcsb.org/ligand/ACT)和[3P8](https://www.rcsb.org/ligand/3P8)。在网页上可以下载到`.sdf`文件，接下来可以使用openbabel将`.sdf`文件转化为`.pdb`坐标。\n![使用openbebal转化文件格式](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png)\n<!-- ![使用openbebal转化文件格式](openbabel.png) -->\n<!--more-->\n这样就获得了对应的`.pdb`文件。  \n\n此时由openbabel生成的acetate的`.pdb`文件如下:\n```\nCOMPND    ACT \nAUTHOR    GENERATED BY OPEN BABEL 3.1.1\nHETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  \nHETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  \nHETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-\nHETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  \nHETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  \nHETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  \nHETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  \nCONECT    1    2    2    3    4                                       \nCONECT    2    1    1                                                 \nCONECT    3    1                                                      \nCONECT    4    1    5    6    7                                       \nCONECT    5    4                                                      \nCONECT    6    4                                                      \nCONECT    7    4                                                      \nMASTER        0    0    0    0    0    0    0    0    7    0    7    0\nEND\n```\n`antechamber`对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:\n```\nATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  \nATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  \nATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O\nATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  \nATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  \nATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  \nATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H \n```\n\n# AMBER力场(不使用Gaussian)\n对于amber力场，可以使用AmberTools中的`antechamber`软件生成小分子的gaff力场。在生成`.mol2`文件之前，我们先对`.pdb`文件进行预处理。  \n\n首先先用tleap转化下原子的名字, `tleap.in`文件中的内容如下:\n```\nsource leaprc.protein.ff14SB\nTMP = loadpdb ACT.pdb\nsavepdb TMP ACT_tleap.pdb\nquit\n```\n用以下的命令生成`ACT_tleap.pdb`:\n```bash\ntleap -f tleap.in\n```\n之后再用`reduce`补充H原子(实际上对于小分子即使手动删除貌似也不会补充):\n```bash\nreduce ACT_tleap.pdb >ACT_h.pdb\n```\n之后我们可以使用`antechamber`软件生成`.mol2`文件，命令如下:\n```bash\nantechamber -i ACT_h.pdb -fi pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1\n```\n上面各个选项的意思分别为:  \n  1. `-i ACT_h.pdb`: 指定输入3D结构文件名称。  \n  2. `-fi pdb`: 指定输入文件格式为PDB格式。  \n  3. `-o ACT.mol2`: 指定输出的文件名称。  \n  4. `-fo mol2`: 指定输出文件类型为`.mol2`类型。  \n  5. `-c bcc`: 指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。  \n  6. `-s 2`: 指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(`2`)。  \n  7. `-nc -1`: 指定净电荷数目为`-1`。  \n\n`ACT.mol2`文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成`.prmtop`和`.inpcrd`文件。生成的`.mol2`文件如下:\n```\n@<TRIPOS>MOLECULE\nACT\n    7     6     1     0     0\nSMALL\nbcc\n\n\n@<TRIPOS>ATOM\n      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600\n      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300\n      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300\n      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100\n      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033\n      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033\n      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033\n@<TRIPOS>BOND\n     1     1     2 1   \n     2     1     3 1   \n     3     1     4 1   \n     4     4     5 1   \n     5     4     6 1   \n     6     4     7 1   \n@<TRIPOS>SUBSTRUCTURE\n     1 ACT         1 TEMP              0 ****  ****    0 ROOT\n```\n`.mol`文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且`.mol2`文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在`$AMBERHOME/dat/leap/parm/gaff.dat`中定义。  \n\n参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用`parmchk2`检查缺失的参数，命令如下:\n```bash\nparmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod\n```\n执行以上文件会生成`ACT.frcmod`文件。这是一个参数文件, 能够载入LEaP中用于添加缺失的参数, 这样就能包含所有缺失的参数。在模拟之前，需要仔细检查`ACT.frcmod`文件。生成的`ACT.frcmod`文件如下:\n```\nRemark line goes here\nMASS\n\nBOND\n\nANGLE\n\nDIHE\n\nIMPROPER\nc3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)\n\nNONBON\n```\n可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。  \n\n现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:\n```\ntleap -f leaprc.protein.ff14SB\n```\n\n之后在tleap中导入GAFF力场:\n```\nsource leaprc.gaff\n```\n现在导入acetate单元:\n```\nACT = loadmol2 ACT.mol2\n```\n此时在`tleap`中键入`list`，可以看到新增加的`ACT`单元:\n```\n> ACT = loadmol2 ACT.mol2\nLoading Mol2 file: ./ACT.mol2\nReading MOLECULE named ACT\n> list\nACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA\nCARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY\nCHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS\nCMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL\nCYM       CYS       CYX       GLH       GLN       GLU       GLY       HID\nHIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS\nMET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN\nNGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE\nNLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR\nNTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP\nTYR       VAL       frcmod14SBgaff      parm10\n```\n检查`ACT`单元:\n```\n> check ACT\nChecking 'ACT'....\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\nChecking parameters for unit 'ACT'.\nChecking for bond parameters.\nChecking for angle parameters.\ncheck:  Warnings: 1\nUnit is OK.\n```\n可以看到并没有缺失参数。现在我们再导入`ACT.frcmod`文件:\n```\nloadamberparams ACT.frcmod\n```\n接下来就可以将生成的残基导出了:\n```\n> saveoff ACT ACT.lib\n Creating ACT.lib\nBuilding topology.\nBuilding atom parameters.\n> saveamberparm ACT ACT.prmtop ACT.inpcrd\nChecking Unit.\n\nWarning: The unperturbed charge of the unit (-1.000001) is not zero.\n\nNote: Ignoring the warning from Unit Checking.\n\nBuilding topology.\nBuilding atom parameters.\nBuilding bond parameters.\nBuilding angle parameters.\nBuilding proper torsion parameters.\nBuilding improper torsion parameters.\n total 1 improper torsion applied\nBuilding H-Bond parameters.\nIncorporating Non-Bonded adjustments.\nNot Marking per-residue atom chain types.\nMarking per-residue atom chain types.\n  (Residues lacking connect0/connect1 -\n   these don't have chain types marked:\n\n        res     total affected\n\n        ACT     1\n  )\n (no restraints)\n>\n```\n此时有了`ACT.prmtop`和`ACT.inpcrd`, 可以用这两个文件生成gromacs需要的`ACT.top`和`ACT.gro`。这可以用`amb2gro_top_gro.py`完成:\n```\namb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb\n```\n这样我们就有了gromacs可用的`.top`文件和`.gro`文件。\n\n\n>TIPS: 在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。\n```\nWarning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]\nWarning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]\n```\n\n# AMBER力场(使用Gaussian)\n使用gaussian来生成精确的静电分布。这里需要提及, g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。\n\n## gaussian的安装\n首先进行gaussian的安装。[gaussian的安装方法](http://sobereva.com/439)在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为`g16.tar.gz`，则使用以下命令进行解压:\n```shell\ntar -xvf g16.tar.gz\n```\n假设压缩后的`g16`文件夹放置在`/home/hapo/`文件夹下。先在`/home/hapo/g16`文件夹下新建文件夹`scratch`。接下来在`.bashrc`文件中添加如下内容:\n```bash\nexport g16root=/home/hapo\nexport GAUSS_SCRDIR=/home/hapo/g16/scratch\nsource /home/hapo/g16/bsd/g16.profile\n```\n接下来在进入`/home/hapo/g16`中更改文件的权限:\n```bash\nchmod 750 -R *\n```\n加下来只要重开终端即可运行g16。\n\n## 生成mol2文件\n这一步使用[别人的脚本](https://github.com/tamaswells/GMX)，使用方法记录在该[Jerkwin博客网页中](https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/)。  \n\n首先生成gaussian程序的输入文件:\n```bash\npython pre.py acetate.pdb -1\n```\n之后运行gaussian程序:\n```bash\ng16 <ACT.gjf >ACT.out\n```\n最后运行`post.py`程序:\n```bash\npython post.py\n```\n以上命令最终会生成`ACT.mol2`文件，其中的静电荷是用gaussian计算后拟合得到的。  \n\n最后我们再用以上提及的`tleap`和`amb2gro_top_gro.py`即可生成gromacs的`.top`和`.gro`文件。\n\n\n# OPLS-AA力场(使用LigParGen)\n[LigParGen](http://zarbi.chem.yale.edu/ligpargen/)可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png)\n点击`Submit Molecule`之后，只要下载gromacs的`.top`和`.gro`文件即可。关于使用LigParGen生成lammaps力场文件的方法[在此](https://longkunxuluke.github.io/posts/2020/11/blog-post-4/)。\n\n\n# OPLS-AA力场(使用TPPMKTOP)\n[TPPMKTOP](http://erg.biophys.msu.ru/tpp/)也可以用于生成OPLS-AA力场，并且和[文献](https://pubs.acs.org/doi/10.1021/ja058637b)中的静电值最为接近，该文献可能是使用该程序生成的。\n![LigParGen网页](./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png)\n同样，只要上传相应的PDB文件即可。\n\n# 构建gromacs拓扑文件\n为了能够用gromacs进行模拟，先构建gromacs可用的`.top`文件。小分子的力场放在`molecule`文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在`heavywater`文件夹中。首先先在`topol.top`文件中写下如下内容:\n```\n#include \"amber14sb_parmbsc1.ff/forcefield.itp\"\n#include \"heavywater/tip3p-hw.itp\"\n#include \"molecule/ACT.itp\"\n#include \"molecule/MLM.itp\"\n#include \"amber14sb_parmbsc1.ff/ions.itp\"\n\n\n[ System ]\nsmall molecule in water\n\n[ Molecules ]\n```\n以下是一种外门邪道的构建`.top`和`.gro`的方法。`solvate`可以用来给空盒子填充水，可以这样写:\n```bash\ngmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top\n```\n这样子可以生成一个`conf.gro`文件，盒子大小为$2.5nm \\times 2.5 nm \\times 25 nm$，其中填充了水分子。\n\n同时`solvate`程序可以通过`-maxsol`来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:\n```bash\ngmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top\ngmx solvate -cs ./molecule/MLM.gro -cp cp.gro -o cp2.gro -maxsol 1 -p topol.top\ngmx solvate -cs spc216.gro -cp cp2.gro -o conf.gro -p topol.top\n```\n\n比较正确的做法应该用`insert-molecules`来插入小分子，用`solvate`来填充水分子:\n```bash\ngmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2\ngmx solvate -cs spc216.gro -cp box.gro -o conf.gro -p topol.top\n```","slug":"制作小分子力场","published":1,"updated":"2023-01-09T09:24:58.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4px0013l8vq954rengy","content":"<p>新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。  </p>\n<h1 id=\"获得PDB结构\"><a href=\"#获得PDB结构\" class=\"headerlink\" title=\"获得PDB结构\"></a>获得PDB结构</h1><p>这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从<a href=\"https://www.rcsb.org/\">PDB库</a>中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为<a href=\"https://www.rcsb.org/ligand/ACT\">ACT</a>和<a href=\"https://www.rcsb.org/ligand/3P8\">3P8</a>。在网页上可以下载到<code>.sdf</code>文件，接下来可以使用openbabel将<code>.sdf</code>文件转化为<code>.pdb</code>坐标。<br><img src=\"/./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png\" alt=\"使用openbebal转化文件格式\"></p>\n<!-- ![使用openbebal转化文件格式](openbabel.png) -->\n<span id=\"more\"></span>\n<p>这样就获得了对应的<code>.pdb</code>文件。  </p>\n<p>此时由openbabel生成的acetate的<code>.pdb</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMPND    ACT </span><br><span class=\"line\">AUTHOR    GENERATED BY OPEN BABEL 3.1.1</span><br><span class=\"line\">HETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">HETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-</span><br><span class=\"line\">HETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">HETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">HETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">CONECT    1    2    2    3    4                                       </span><br><span class=\"line\">CONECT    2    1    1                                                 </span><br><span class=\"line\">CONECT    3    1                                                      </span><br><span class=\"line\">CONECT    4    1    5    6    7                                       </span><br><span class=\"line\">CONECT    5    4                                                      </span><br><span class=\"line\">CONECT    6    4                                                      </span><br><span class=\"line\">CONECT    7    4                                                      </span><br><span class=\"line\">MASTER        0    0    0    0    0    0    0    0    7    0    7    0</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p><code>antechamber</code>对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">ATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O</span><br><span class=\"line\">ATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">ATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">ATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AMBER力场-不使用Gaussian\"><a href=\"#AMBER力场-不使用Gaussian\" class=\"headerlink\" title=\"AMBER力场(不使用Gaussian)\"></a>AMBER力场(不使用Gaussian)</h1><p>对于amber力场，可以使用AmberTools中的<code>antechamber</code>软件生成小分子的gaff力场。在生成<code>.mol2</code>文件之前，我们先对<code>.pdb</code>文件进行预处理。  </p>\n<p>首先先用tleap转化下原子的名字, <code>tleap.in</code>文件中的内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.protein.ff14SB</span><br><span class=\"line\">TMP = loadpdb ACT.pdb</span><br><span class=\"line\">savepdb TMP ACT_tleap.pdb</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p>用以下的命令生成<code>ACT_tleap.pdb</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f tleap.in</span><br></pre></td></tr></table></figure>\n<p>之后再用<code>reduce</code>补充H原子(实际上对于小分子即使手动删除貌似也不会补充):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce ACT_tleap.pdb &gt;ACT_h.pdb</span><br></pre></td></tr></table></figure>\n<p>之后我们可以使用<code>antechamber</code>软件生成<code>.mol2</code>文件，命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">antechamber -i ACT_h.pdb -<span class=\"keyword\">fi</span> pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1</span><br></pre></td></tr></table></figure>\n<p>上面各个选项的意思分别为:  </p>\n<ol>\n<li><code>-i ACT_h.pdb</code>: 指定输入3D结构文件名称。  </li>\n<li><code>-fi pdb</code>: 指定输入文件格式为PDB格式。  </li>\n<li><code>-o ACT.mol2</code>: 指定输出的文件名称。  </li>\n<li><code>-fo mol2</code>: 指定输出文件类型为<code>.mol2</code>类型。  </li>\n<li><code>-c bcc</code>: 指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。  </li>\n<li><code>-s 2</code>: 指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(<code>2</code>)。  </li>\n<li><code>-nc -1</code>: 指定净电荷数目为<code>-1</code>。</li>\n</ol>\n<p><code>ACT.mol2</code>文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成<code>.prmtop</code>和<code>.inpcrd</code>文件。生成的<code>.mol2</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&lt;TRIPOS&gt;MOLECULE</span><br><span class=\"line\">ACT</span><br><span class=\"line\">    7     6     1     0     0</span><br><span class=\"line\">SMALL</span><br><span class=\"line\">bcc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@&lt;TRIPOS&gt;ATOM</span><br><span class=\"line\">      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600</span><br><span class=\"line\">      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100</span><br><span class=\"line\">      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033</span><br><span class=\"line\">      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">@&lt;TRIPOS&gt;BOND</span><br><span class=\"line\">     1     1     2 1   </span><br><span class=\"line\">     2     1     3 1   </span><br><span class=\"line\">     3     1     4 1   </span><br><span class=\"line\">     4     4     5 1   </span><br><span class=\"line\">     5     4     6 1   </span><br><span class=\"line\">     6     4     7 1   </span><br><span class=\"line\">@&lt;TRIPOS&gt;SUBSTRUCTURE</span><br><span class=\"line\">     1 ACT         1 TEMP              0 ****  ****    0 ROOT</span><br></pre></td></tr></table></figure>\n<p><code>.mol</code>文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且<code>.mol2</code>文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在<code>$AMBERHOME/dat/leap/parm/gaff.dat</code>中定义。  </p>\n<p>参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用<code>parmchk2</code>检查缺失的参数，命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod</span><br></pre></td></tr></table></figure>\n<p>执行以上文件会生成<code>ACT.frcmod</code>文件。这是一个参数文件, 能够载入LEaP中用于添加缺失的参数, 这样就能包含所有缺失的参数。在模拟之前，需要仔细检查<code>ACT.frcmod</code>文件。生成的<code>ACT.frcmod</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Remark line goes here</span><br><span class=\"line\">MASS</span><br><span class=\"line\"></span><br><span class=\"line\">BOND</span><br><span class=\"line\"></span><br><span class=\"line\">ANGLE</span><br><span class=\"line\"></span><br><span class=\"line\">DIHE</span><br><span class=\"line\"></span><br><span class=\"line\">IMPROPER</span><br><span class=\"line\">c3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)</span><br><span class=\"line\"></span><br><span class=\"line\">NONBON</span><br></pre></td></tr></table></figure>\n<p>可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。  </p>\n<p>现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f leaprc.protein.ff14SB</span><br></pre></td></tr></table></figure>\n\n<p>之后在tleap中导入GAFF力场:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.gaff</span><br></pre></td></tr></table></figure>\n<p>现在导入acetate单元:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACT = loadmol2 ACT.mol2</span><br></pre></td></tr></table></figure>\n<p>此时在<code>tleap</code>中键入<code>list</code>，可以看到新增加的<code>ACT</code>单元:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ACT = loadmol2 ACT.mol2</span><br><span class=\"line\">Loading Mol2 file: ./ACT.mol2</span><br><span class=\"line\">Reading MOLECULE named ACT</span><br><span class=\"line\">&gt; list</span><br><span class=\"line\">ACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA</span><br><span class=\"line\">CARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY</span><br><span class=\"line\">CHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS</span><br><span class=\"line\">CMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL</span><br><span class=\"line\">CYM       CYS       CYX       GLH       GLN       GLU       GLY       HID</span><br><span class=\"line\">HIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS</span><br><span class=\"line\">MET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN</span><br><span class=\"line\">NGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE</span><br><span class=\"line\">NLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR</span><br><span class=\"line\">NTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP</span><br><span class=\"line\">TYR       VAL       frcmod14SBgaff      parm10</span><br></pre></td></tr></table></figure>\n<p>检查<code>ACT</code>单元:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; check ACT</span><br><span class=\"line\">Checking &#x27;ACT&#x27;....</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\">Checking parameters for unit &#x27;ACT&#x27;.</span><br><span class=\"line\">Checking for bond parameters.</span><br><span class=\"line\">Checking for angle parameters.</span><br><span class=\"line\">check:  Warnings: 1</span><br><span class=\"line\">Unit is OK.</span><br></pre></td></tr></table></figure>\n<p>可以看到并没有缺失参数。现在我们再导入<code>ACT.frcmod</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadamberparams ACT.frcmod</span><br></pre></td></tr></table></figure>\n<p>接下来就可以将生成的残基导出了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; saveoff ACT ACT.lib</span><br><span class=\"line\"> Creating ACT.lib</span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">&gt; saveamberparm ACT ACT.prmtop ACT.inpcrd</span><br><span class=\"line\">Checking Unit.</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\"></span><br><span class=\"line\">Note: Ignoring the warning from Unit Checking.</span><br><span class=\"line\"></span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">Building bond parameters.</span><br><span class=\"line\">Building angle parameters.</span><br><span class=\"line\">Building proper torsion parameters.</span><br><span class=\"line\">Building improper torsion parameters.</span><br><span class=\"line\"> total 1 improper torsion applied</span><br><span class=\"line\">Building H-Bond parameters.</span><br><span class=\"line\">Incorporating Non-Bonded adjustments.</span><br><span class=\"line\">Not Marking per-residue atom chain types.</span><br><span class=\"line\">Marking per-residue atom chain types.</span><br><span class=\"line\">  (Residues lacking connect0/connect1 -</span><br><span class=\"line\">   these don&#x27;t have chain types marked:</span><br><span class=\"line\"></span><br><span class=\"line\">        res     total affected</span><br><span class=\"line\"></span><br><span class=\"line\">        ACT     1</span><br><span class=\"line\">  )</span><br><span class=\"line\"> (no restraints)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>此时有了<code>ACT.prmtop</code>和<code>ACT.inpcrd</code>, 可以用这两个文件生成gromacs需要的<code>ACT.top</code>和<code>ACT.gro</code>。这可以用<code>amb2gro_top_gro.py</code>完成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb</span><br></pre></td></tr></table></figure>\n<p>这样我们就有了gromacs可用的<code>.top</code>文件和<code>.gro</code>文件。</p>\n<blockquote>\n<p>TIPS: 在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AMBER力场-使用Gaussian\"><a href=\"#AMBER力场-使用Gaussian\" class=\"headerlink\" title=\"AMBER力场(使用Gaussian)\"></a>AMBER力场(使用Gaussian)</h1><p>使用gaussian来生成精确的静电分布。这里需要提及, g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。</p>\n<h2 id=\"gaussian的安装\"><a href=\"#gaussian的安装\" class=\"headerlink\" title=\"gaussian的安装\"></a>gaussian的安装</h2><p>首先进行gaussian的安装。<a href=\"http://sobereva.com/439\">gaussian的安装方法</a>在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为<code>g16.tar.gz</code>，则使用以下命令进行解压:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf g16.tar.gz</span><br></pre></td></tr></table></figure>\n<p>假设压缩后的<code>g16</code>文件夹放置在<code>/home/hapo/</code>文件夹下。先在<code>/home/hapo/g16</code>文件夹下新建文件夹<code>scratch</code>。接下来在<code>.bashrc</code>文件中添加如下内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> g16root=/home/hapo</span><br><span class=\"line\"><span class=\"built_in\">export</span> GAUSS_SCRDIR=/home/hapo/g16/scratch</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/hapo/g16/bsd/g16.profile</span><br></pre></td></tr></table></figure>\n<p>接下来在进入<code>/home/hapo/g16</code>中更改文件的权限:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 750 -R *</span><br></pre></td></tr></table></figure>\n<p>加下来只要重开终端即可运行g16。</p>\n<h2 id=\"生成mol2文件\"><a href=\"#生成mol2文件\" class=\"headerlink\" title=\"生成mol2文件\"></a>生成mol2文件</h2><p>这一步使用<a href=\"https://github.com/tamaswells/GMX\">别人的脚本</a>，使用方法记录在该<a href=\"https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/\">Jerkwin博客网页中</a>。  </p>\n<p>首先生成gaussian程序的输入文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python pre.py acetate.pdb -1</span><br></pre></td></tr></table></figure>\n<p>之后运行gaussian程序:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g16 &lt;ACT.gjf &gt;ACT.out</span><br></pre></td></tr></table></figure>\n<p>最后运行<code>post.py</code>程序:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python post.py</span><br></pre></td></tr></table></figure>\n<p>以上命令最终会生成<code>ACT.mol2</code>文件，其中的静电荷是用gaussian计算后拟合得到的。  </p>\n<p>最后我们再用以上提及的<code>tleap</code>和<code>amb2gro_top_gro.py</code>即可生成gromacs的<code>.top</code>和<code>.gro</code>文件。</p>\n<h1 id=\"OPLS-AA力场-使用LigParGen\"><a href=\"#OPLS-AA力场-使用LigParGen\" class=\"headerlink\" title=\"OPLS-AA力场(使用LigParGen)\"></a>OPLS-AA力场(使用LigParGen)</h1><p><a href=\"http://zarbi.chem.yale.edu/ligpargen/\">LigParGen</a>可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。<br><img src=\"/./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png\" alt=\"LigParGen网页\"><br>点击<code>Submit Molecule</code>之后，只要下载gromacs的<code>.top</code>和<code>.gro</code>文件即可。关于使用LigParGen生成lammaps力场文件的方法<a href=\"https://longkunxuluke.github.io/posts/2020/11/blog-post-4/\">在此</a>。</p>\n<h1 id=\"OPLS-AA力场-使用TPPMKTOP\"><a href=\"#OPLS-AA力场-使用TPPMKTOP\" class=\"headerlink\" title=\"OPLS-AA力场(使用TPPMKTOP)\"></a>OPLS-AA力场(使用TPPMKTOP)</h1><p><a href=\"http://erg.biophys.msu.ru/tpp/\">TPPMKTOP</a>也可以用于生成OPLS-AA力场，并且和<a href=\"https://pubs.acs.org/doi/10.1021/ja058637b\">文献</a>中的静电值最为接近，该文献可能是使用该程序生成的。<br><img src=\"/./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png\" alt=\"LigParGen网页\"><br>同样，只要上传相应的PDB文件即可。</p>\n<h1 id=\"构建gromacs拓扑文件\"><a href=\"#构建gromacs拓扑文件\" class=\"headerlink\" title=\"构建gromacs拓扑文件\"></a>构建gromacs拓扑文件</h1><p>为了能够用gromacs进行模拟，先构建gromacs可用的<code>.top</code>文件。小分子的力场放在<code>molecule</code>文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在<code>heavywater</code>文件夹中。首先先在<code>topol.top</code>文件中写下如下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;amber14sb_parmbsc1.ff/forcefield.itp&quot;</span><br><span class=\"line\">#include &quot;heavywater/tip3p-hw.itp&quot;</span><br><span class=\"line\">#include &quot;molecule/ACT.itp&quot;</span><br><span class=\"line\">#include &quot;molecule/MLM.itp&quot;</span><br><span class=\"line\">#include &quot;amber14sb_parmbsc1.ff/ions.itp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[ System ]</span><br><span class=\"line\">small molecule in water</span><br><span class=\"line\"></span><br><span class=\"line\">[ Molecules ]</span><br></pre></td></tr></table></figure>\n<p>以下是一种外门邪道的构建<code>.top</code>和<code>.gro</code>的方法。<code>solvate</code>可以用来给空盒子填充水，可以这样写:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top</span><br></pre></td></tr></table></figure>\n<p>这样子可以生成一个<code>conf.gro</code>文件，盒子大小为$2.5nm \\times 2.5 nm \\times 25 nm$，其中填充了水分子。</p>\n<p>同时<code>solvate</code>程序可以通过<code>-maxsol</code>来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top</span><br><span class=\"line\">gmx solvate -cs ./molecule/MLM.gro -<span class=\"built_in\">cp</span> cp.gro -o cp2.gro -maxsol 1 -p topol.top</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> cp2.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure>\n\n<p>比较正确的做法应该用<code>insert-molecules</code>来插入小分子，用<code>solvate</code>来填充水分子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> box.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure>","excerpt":"<p>新冠阳了，今天开始复建运动。先试着把小分子的力场文件构建起来吧。这是我并不熟悉的领域，所以需要学习好多教程。  </p>\n<h1 id=\"获得PDB结构\"><a href=\"#获得PDB结构\" class=\"headerlink\" title=\"获得PDB结构\"></a>获得PDB结构</h1><p>这里我们主要是要制作醋酸盐(acetate)和甲铵盐(methylammonium)的力场，我们首先需要得到小分子的PDB结构，可以从<a href=\"https://www.rcsb.org/\">PDB库</a>中找到我们需要的小分子。醋酸盐和甲铵盐的代码分别为<a href=\"https://www.rcsb.org/ligand/ACT\">ACT</a>和<a href=\"https://www.rcsb.org/ligand/3P8\">3P8</a>。在网页上可以下载到<code>.sdf</code>文件，接下来可以使用openbabel将<code>.sdf</code>文件转化为<code>.pdb</code>坐标。<br><img src=\"/./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/openbabel.png\" alt=\"使用openbebal转化文件格式\"></p>\n<!-- ![使用openbebal转化文件格式](openbabel.png) -->","more":"<p>这样就获得了对应的<code>.pdb</code>文件。  </p>\n<p>此时由openbabel生成的acetate的<code>.pdb</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMPND    ACT </span><br><span class=\"line\">AUTHOR    GENERATED BY OPEN BABEL 3.1.1</span><br><span class=\"line\">HETATM    1  C   UNL     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    2  O   UNL     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">HETATM    3  O   UNL     1      -0.682  -1.056   0.000  1.00  0.00           O1-</span><br><span class=\"line\">HETATM    4  C   UNL     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">HETATM    5  H   UNL     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">HETATM    6  H   UNL     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">HETATM    7  H   UNL     1       1.799   0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">CONECT    1    2    2    3    4                                       </span><br><span class=\"line\">CONECT    2    1    1                                                 </span><br><span class=\"line\">CONECT    3    1                                                      </span><br><span class=\"line\">CONECT    4    1    5    6    7                                       </span><br><span class=\"line\">CONECT    5    4                                                      </span><br><span class=\"line\">CONECT    6    4                                                      </span><br><span class=\"line\">CONECT    7    4                                                      </span><br><span class=\"line\">MASTER        0    0    0    0    0    0    0    0    7    0    7    0</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p><code>antechamber</code>对此时的pdb会识别出一些问题(比如类型出错)，因此我们手动对pdb进行一些修改，删除一些无用的信息，修改残基名和原子名，修改后的pdb文件内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATOM      1  CA  ACT     1      -0.072   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      2  OA1 ACT     1      -0.682   1.056   0.000  1.00  0.00           O  </span><br><span class=\"line\">ATOM      3  OA2 ACT     1      -0.682  -1.056   0.000  1.00  0.00           O</span><br><span class=\"line\">ATOM      4  CB  ACT     1       1.435   0.000   0.000  1.00  0.00           C  </span><br><span class=\"line\">ATOM      5  HB1 ACT     1       1.799   0.000   1.028  1.00  0.00           H  </span><br><span class=\"line\">ATOM      6  HB2 ACT     1       1.799  -0.890  -0.514  1.00  0.00           H  </span><br><span class=\"line\">ATOM      7  HB3 ACT     1       1.799   0.890  -0.514  1.00  0.00           H </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AMBER力场-不使用Gaussian\"><a href=\"#AMBER力场-不使用Gaussian\" class=\"headerlink\" title=\"AMBER力场(不使用Gaussian)\"></a>AMBER力场(不使用Gaussian)</h1><p>对于amber力场，可以使用AmberTools中的<code>antechamber</code>软件生成小分子的gaff力场。在生成<code>.mol2</code>文件之前，我们先对<code>.pdb</code>文件进行预处理。  </p>\n<p>首先先用tleap转化下原子的名字, <code>tleap.in</code>文件中的内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.protein.ff14SB</span><br><span class=\"line\">TMP = loadpdb ACT.pdb</span><br><span class=\"line\">savepdb TMP ACT_tleap.pdb</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p>用以下的命令生成<code>ACT_tleap.pdb</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f tleap.in</span><br></pre></td></tr></table></figure>\n<p>之后再用<code>reduce</code>补充H原子(实际上对于小分子即使手动删除貌似也不会补充):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce ACT_tleap.pdb &gt;ACT_h.pdb</span><br></pre></td></tr></table></figure>\n<p>之后我们可以使用<code>antechamber</code>软件生成<code>.mol2</code>文件，命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">antechamber -i ACT_h.pdb -<span class=\"keyword\">fi</span> pdb -o ACT.mol2 -fo mol2 -c bcc -s 2 -nc -1</span><br></pre></td></tr></table></figure>\n<p>上面各个选项的意思分别为:  </p>\n<ol>\n<li><code>-i ACT_h.pdb</code>: 指定输入3D结构文件名称。  </li>\n<li><code>-fi pdb</code>: 指定输入文件格式为PDB格式。  </li>\n<li><code>-o ACT.mol2</code>: 指定输出的文件名称。  </li>\n<li><code>-fo mol2</code>: 指定输出文件类型为<code>.mol2</code>类型。  </li>\n<li><code>-c bcc</code>: 指示antechamber使用AM1-BCC电荷模型来计算原子上的电荷。  </li>\n<li><code>-s 2</code>: 指示antechamber程序提供的状态信息的冗长度。我们选择提供更多信息(<code>2</code>)。  </li>\n<li><code>-nc -1</code>: 指定净电荷数目为<code>-1</code>。</li>\n</ol>\n<p><code>ACT.mol2</code>文件包含了acetate残基的定义，包含了所有的电荷信息以及原子类型。之后会用它来生成<code>.prmtop</code>和<code>.inpcrd</code>文件。生成的<code>.mol2</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@&lt;TRIPOS&gt;MOLECULE</span><br><span class=\"line\">ACT</span><br><span class=\"line\">    7     6     1     0     0</span><br><span class=\"line\">SMALL</span><br><span class=\"line\">bcc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@&lt;TRIPOS&gt;ATOM</span><br><span class=\"line\">      1 CA          -0.0720     0.0000     0.0000 c          1 ACT       0.901600</span><br><span class=\"line\">      2 OA1         -0.6820     1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      3 OA2         -0.6820    -1.0560     0.0000 o          1 ACT      -0.861300</span><br><span class=\"line\">      4 CB           1.4350     0.0000     0.0000 c3         1 ACT      -0.200100</span><br><span class=\"line\">      5 HB1          1.7990     0.0000     1.0280 hc         1 ACT       0.007033</span><br><span class=\"line\">      6 HB2          1.7990    -0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">      7 HB3          1.7990     0.8900    -0.5140 hc         1 ACT       0.007033</span><br><span class=\"line\">@&lt;TRIPOS&gt;BOND</span><br><span class=\"line\">     1     1     2 1   </span><br><span class=\"line\">     2     1     3 1   </span><br><span class=\"line\">     3     1     4 1   </span><br><span class=\"line\">     4     4     5 1   </span><br><span class=\"line\">     5     4     6 1   </span><br><span class=\"line\">     6     4     7 1   </span><br><span class=\"line\">@&lt;TRIPOS&gt;SUBSTRUCTURE</span><br><span class=\"line\">     1 ACT         1 TEMP              0 ****  ****    0 ROOT</span><br></pre></td></tr></table></figure>\n<p><code>.mol</code>文件的第一列是原子序号，第二列为原子名称，第三到五列为三维坐标，第六列为原子类型，最后一列为原子的电荷。并且<code>.mol2</code>文件还记录了成键信息，但是并不包含对应的参数，GAFF的参数都在<code>$AMBERHOME/dat/leap/parm/gaff.dat</code>中定义。  </p>\n<p>参数文件可能会并未包含所需要的参数，因此需要参数进行检查，可以使用<code>parmchk2</code>检查缺失的参数，命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parmchk2 -i ACT.mol2 -f mol2 -o ACT.frcmod</span><br></pre></td></tr></table></figure>\n<p>执行以上文件会生成<code>ACT.frcmod</code>文件。这是一个参数文件, 能够载入LEaP中用于添加缺失的参数, 这样就能包含所有缺失的参数。在模拟之前，需要仔细检查<code>ACT.frcmod</code>文件。生成的<code>ACT.frcmod</code>文件如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Remark line goes here</span><br><span class=\"line\">MASS</span><br><span class=\"line\"></span><br><span class=\"line\">BOND</span><br><span class=\"line\"></span><br><span class=\"line\">ANGLE</span><br><span class=\"line\"></span><br><span class=\"line\">DIHE</span><br><span class=\"line\"></span><br><span class=\"line\">IMPROPER</span><br><span class=\"line\">c3-o -c -o          1.1          180.0         2.0          Using general improper torsional angle  X- o- c- o, penalty score=  3.0)</span><br><span class=\"line\"></span><br><span class=\"line\">NONBON</span><br></pre></td></tr></table></figure>\n<p>可以看到缺失了一个反常二面角，假定antechamber建议的参数可以接受，无需修改。  </p>\n<p>现在我们已经准备好了acetate作为一个单元的所有工作，只需运行tleap保证GAFF力场可以工作即可。运行以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tleap -f leaprc.protein.ff14SB</span><br></pre></td></tr></table></figure>\n\n<p>之后在tleap中导入GAFF力场:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source leaprc.gaff</span><br></pre></td></tr></table></figure>\n<p>现在导入acetate单元:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACT = loadmol2 ACT.mol2</span><br></pre></td></tr></table></figure>\n<p>此时在<code>tleap</code>中键入<code>list</code>，可以看到新增加的<code>ACT</code>单元:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ACT = loadmol2 ACT.mol2</span><br><span class=\"line\">Loading Mol2 file: ./ACT.mol2</span><br><span class=\"line\">Reading MOLECULE named ACT</span><br><span class=\"line\">&gt; list</span><br><span class=\"line\">ACE       ACT       ALA       ARG       ASH       ASN       ASP       CALA</span><br><span class=\"line\">CARG      CASN      CASP      CCYS      CCYX      CGLN      CGLU      CGLY</span><br><span class=\"line\">CHID      CHIE      CHIP      CHIS      CHYP      CILE      CLEU      CLYS</span><br><span class=\"line\">CMET      CPHE      CPRO      CSER      CTHR      CTRP      CTYR      CVAL</span><br><span class=\"line\">CYM       CYS       CYX       GLH       GLN       GLU       GLY       HID</span><br><span class=\"line\">HIE       HIP       HIS       HYP       ILE       LEU       LYN       LYS</span><br><span class=\"line\">MET       NALA      NARG      NASN      NASP      NCYS      NCYX      NGLN</span><br><span class=\"line\">NGLU      NGLY      NHE       NHID      NHIE      NHIP      NHIS      NILE</span><br><span class=\"line\">NLEU      NLYS      NME       NMET      NPHE      NPRO      NSER      NTHR</span><br><span class=\"line\">NTRP      NTYR      NVAL      PHE       PRO       SER       THR       TRP</span><br><span class=\"line\">TYR       VAL       frcmod14SBgaff      parm10</span><br></pre></td></tr></table></figure>\n<p>检查<code>ACT</code>单元:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; check ACT</span><br><span class=\"line\">Checking &#x27;ACT&#x27;....</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\">Checking parameters for unit &#x27;ACT&#x27;.</span><br><span class=\"line\">Checking for bond parameters.</span><br><span class=\"line\">Checking for angle parameters.</span><br><span class=\"line\">check:  Warnings: 1</span><br><span class=\"line\">Unit is OK.</span><br></pre></td></tr></table></figure>\n<p>可以看到并没有缺失参数。现在我们再导入<code>ACT.frcmod</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadamberparams ACT.frcmod</span><br></pre></td></tr></table></figure>\n<p>接下来就可以将生成的残基导出了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; saveoff ACT ACT.lib</span><br><span class=\"line\"> Creating ACT.lib</span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">&gt; saveamberparm ACT ACT.prmtop ACT.inpcrd</span><br><span class=\"line\">Checking Unit.</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: The unperturbed charge of the unit (-1.000001) is not zero.</span><br><span class=\"line\"></span><br><span class=\"line\">Note: Ignoring the warning from Unit Checking.</span><br><span class=\"line\"></span><br><span class=\"line\">Building topology.</span><br><span class=\"line\">Building atom parameters.</span><br><span class=\"line\">Building bond parameters.</span><br><span class=\"line\">Building angle parameters.</span><br><span class=\"line\">Building proper torsion parameters.</span><br><span class=\"line\">Building improper torsion parameters.</span><br><span class=\"line\"> total 1 improper torsion applied</span><br><span class=\"line\">Building H-Bond parameters.</span><br><span class=\"line\">Incorporating Non-Bonded adjustments.</span><br><span class=\"line\">Not Marking per-residue atom chain types.</span><br><span class=\"line\">Marking per-residue atom chain types.</span><br><span class=\"line\">  (Residues lacking connect0/connect1 -</span><br><span class=\"line\">   these don&#x27;t have chain types marked:</span><br><span class=\"line\"></span><br><span class=\"line\">        res     total affected</span><br><span class=\"line\"></span><br><span class=\"line\">        ACT     1</span><br><span class=\"line\">  )</span><br><span class=\"line\"> (no restraints)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>此时有了<code>ACT.prmtop</code>和<code>ACT.inpcrd</code>, 可以用这两个文件生成gromacs需要的<code>ACT.top</code>和<code>ACT.gro</code>。这可以用<code>amb2gro_top_gro.py</code>完成:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amb2gro_top_gro.py -p ACT.prmtop -c ACT.inpcrd -t ACT.top -g ACT.gro -b ACT_out.pdb</span><br></pre></td></tr></table></figure>\n<p>这样我们就有了gromacs可用的<code>.top</code>文件和<code>.gro</code>文件。</p>\n<blockquote>\n<p>TIPS: 在生成甲铵盐(methylammonium)的力场的时候除了一些识别出错的问题，那是因为我把H原子的名字写成了NH1，在没有最后一列表明原子类型时，它会识别称N原子，所以警告。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Small distance for BOND        5       N       NH1     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        6       N       NH2     0            1.01  [1.01 - 1.69]</span><br><span class=\"line\">Warning: Small distance for BOND        7       N       NH3     0            1.01  [1.01 - 1.69]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AMBER力场-使用Gaussian\"><a href=\"#AMBER力场-使用Gaussian\" class=\"headerlink\" title=\"AMBER力场(使用Gaussian)\"></a>AMBER力场(使用Gaussian)</h1><p>使用gaussian来生成精确的静电分布。这里需要提及, g09存在一些bug导致无法用于RESP, 所以我们使用g16来进行模拟。</p>\n<h2 id=\"gaussian的安装\"><a href=\"#gaussian的安装\" class=\"headerlink\" title=\"gaussian的安装\"></a>gaussian的安装</h2><p>首先进行gaussian的安装。<a href=\"http://sobereva.com/439\">gaussian的安装方法</a>在该网页中。Linux的gaussian安装包是已经编译好的，因此只要设置好环境变量即可。首先先进行解压，假设压缩包为<code>g16.tar.gz</code>，则使用以下命令进行解压:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf g16.tar.gz</span><br></pre></td></tr></table></figure>\n<p>假设压缩后的<code>g16</code>文件夹放置在<code>/home/hapo/</code>文件夹下。先在<code>/home/hapo/g16</code>文件夹下新建文件夹<code>scratch</code>。接下来在<code>.bashrc</code>文件中添加如下内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> g16root=/home/hapo</span><br><span class=\"line\"><span class=\"built_in\">export</span> GAUSS_SCRDIR=/home/hapo/g16/scratch</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/hapo/g16/bsd/g16.profile</span><br></pre></td></tr></table></figure>\n<p>接下来在进入<code>/home/hapo/g16</code>中更改文件的权限:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 750 -R *</span><br></pre></td></tr></table></figure>\n<p>加下来只要重开终端即可运行g16。</p>\n<h2 id=\"生成mol2文件\"><a href=\"#生成mol2文件\" class=\"headerlink\" title=\"生成mol2文件\"></a>生成mol2文件</h2><p>这一步使用<a href=\"https://github.com/tamaswells/GMX\">别人的脚本</a>，使用方法记录在该<a href=\"https://jerkwin.github.io/2019/07/14/%E8%AE%B8%E6%A5%A0-%E4%BD%BF%E7%94%A8GAFF%E5%8A%9B%E5%9C%BA%E5%8F%82%E6%95%B0%E5%8C%96%E5%B0%8F%E5%88%86%E5%AD%90%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/\">Jerkwin博客网页中</a>。  </p>\n<p>首先生成gaussian程序的输入文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python pre.py acetate.pdb -1</span><br></pre></td></tr></table></figure>\n<p>之后运行gaussian程序:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g16 &lt;ACT.gjf &gt;ACT.out</span><br></pre></td></tr></table></figure>\n<p>最后运行<code>post.py</code>程序:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python post.py</span><br></pre></td></tr></table></figure>\n<p>以上命令最终会生成<code>ACT.mol2</code>文件，其中的静电荷是用gaussian计算后拟合得到的。  </p>\n<p>最后我们再用以上提及的<code>tleap</code>和<code>amb2gro_top_gro.py</code>即可生成gromacs的<code>.top</code>和<code>.gro</code>文件。</p>\n<h1 id=\"OPLS-AA力场-使用LigParGen\"><a href=\"#OPLS-AA力场-使用LigParGen\" class=\"headerlink\" title=\"OPLS-AA力场(使用LigParGen)\"></a>OPLS-AA力场(使用LigParGen)</h1><p><a href=\"http://zarbi.chem.yale.edu/ligpargen/\">LigParGen</a>可以用于生成OPLS-AA力场，只要上传相应的PDB文件进行相应的设置即可。需要注意的是，该网站需要用Edges打开才能正常运行。<br><img src=\"/./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/LigParGen.png\" alt=\"LigParGen网页\"><br>点击<code>Submit Molecule</code>之后，只要下载gromacs的<code>.top</code>和<code>.gro</code>文件即可。关于使用LigParGen生成lammaps力场文件的方法<a href=\"https://longkunxuluke.github.io/posts/2020/11/blog-post-4/\">在此</a>。</p>\n<h1 id=\"OPLS-AA力场-使用TPPMKTOP\"><a href=\"#OPLS-AA力场-使用TPPMKTOP\" class=\"headerlink\" title=\"OPLS-AA力场(使用TPPMKTOP)\"></a>OPLS-AA力场(使用TPPMKTOP)</h1><p><a href=\"http://erg.biophys.msu.ru/tpp/\">TPPMKTOP</a>也可以用于生成OPLS-AA力场，并且和<a href=\"https://pubs.acs.org/doi/10.1021/ja058637b\">文献</a>中的静电值最为接近，该文献可能是使用该程序生成的。<br><img src=\"/./%E5%88%B6%E4%BD%9C%E5%B0%8F%E5%88%86%E5%AD%90%E5%8A%9B%E5%9C%BA/tppmktop.png\" alt=\"LigParGen网页\"><br>同样，只要上传相应的PDB文件即可。</p>\n<h1 id=\"构建gromacs拓扑文件\"><a href=\"#构建gromacs拓扑文件\" class=\"headerlink\" title=\"构建gromacs拓扑文件\"></a>构建gromacs拓扑文件</h1><p>为了能够用gromacs进行模拟，先构建gromacs可用的<code>.top</code>文件。小分子的力场放在<code>molecule</code>文件夹中。除了以上生成的力场文件外，水分子使用重水进行模拟，水分子的力场放在<code>heavywater</code>文件夹中。首先先在<code>topol.top</code>文件中写下如下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;amber14sb_parmbsc1.ff/forcefield.itp&quot;</span><br><span class=\"line\">#include &quot;heavywater/tip3p-hw.itp&quot;</span><br><span class=\"line\">#include &quot;molecule/ACT.itp&quot;</span><br><span class=\"line\">#include &quot;molecule/MLM.itp&quot;</span><br><span class=\"line\">#include &quot;amber14sb_parmbsc1.ff/ions.itp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[ System ]</span><br><span class=\"line\">small molecule in water</span><br><span class=\"line\"></span><br><span class=\"line\">[ Molecules ]</span><br></pre></td></tr></table></figure>\n<p>以下是一种外门邪道的构建<code>.top</code>和<code>.gro</code>的方法。<code>solvate</code>可以用来给空盒子填充水，可以这样写:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs spc216.gro -o conf.gro -box 2.5 2.5 2.5 -p topol.top</span><br></pre></td></tr></table></figure>\n<p>这样子可以生成一个<code>conf.gro</code>文件，盒子大小为$2.5nm \\times 2.5 nm \\times 25 nm$，其中填充了水分子。</p>\n<p>同时<code>solvate</code>程序可以通过<code>-maxsol</code>来限制添加的溶液数目。因此我们可以用以下命令来生成包含一个醋酸盐和甲铵盐的水盒子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx solvate -cs ./molecule/ACT.gro -o cp.gro -maxsol 1 -box 2.5 2.5 2.5 -p topol.top</span><br><span class=\"line\">gmx solvate -cs ./molecule/MLM.gro -<span class=\"built_in\">cp</span> cp.gro -o cp2.gro -maxsol 1 -p topol.top</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> cp2.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure>\n\n<p>比较正确的做法应该用<code>insert-molecules</code>来插入小分子，用<code>solvate</code>来填充水分子:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmx insert-molecules -ci molecule/ACT.gro -o box.gro -nmol 1 -box 3.2 3.2 3.2</span><br><span class=\"line\">gmx solvate -cs spc216.gro -<span class=\"built_in\">cp</span> box.gro -o conf.gro -p topol.top</span><br></pre></td></tr></table></figure>"},{"title":"在opensuse上外网远程连接","date":"2023-08-07T05:38:51.000Z","catagories":["计算机"],"_content":"\n## 设置路由器\n需要把光猫设置成桥接模式并且需要知道宽带拨号的帐号密码, 这部分可以咨询宽带师傅. 不需要关闭DHCP服务, 否则会导致需要调节光猫的时候需要设置内网IP, 为了减少麻烦就不关闭了. 之后通过网线从光猫LAN口接出, 接入路由器WAN口. 为了使得外网可以通过外网IP访问内部电脑, 可以设置先设置静态IP地址绑定, 再设置端口映射或者DMZ主机. 如果使用端口映射, 那么暂时只开放了一个服务, 如果设置DMZ主机, 那么服务就都开放了. \n<!--more-->\n通过设置DDNS可以与花生壳的域名绑定, 但是花生壳的免费域名只有1年的使用时间, 因此还是需要去获得公网IP比较稳妥.\n\n## 获得公网IP\n如果使用的是华为路由器, 那么就可以使用华为智慧生活APP获得公网IP. \n\n## 安装花生壳\nopensuse可以安装花生壳的rpm包, 可以去[官网](https://hsk.oray.com/download)下载安装包. 之后需要做一些设置才能安装. 首先需要创建文件夹`/lib/systemd/system`, 其次需要安装`netstat`. 在opensuse上需要使用以下命令:\n```bash\nsudo zypper in net-tools-deprecated\n```\n这样才会在有`netstat`.\n\n之后就可以使用\n\n```bash\nsudo rpm -i phddns_<version>.rpm\n```\n\n来安装了.\n\n卸载的命令是\n```bash\nsudo rpm -e phddns\n```\n\n> 这里有个小坑, 用花生壳做内网穿透的话, 如果ip和刚刚做DDNS的ip不一致, 那么会把前面的DDNS设置冲掉. 因为是坑所以就不介绍如何设置内网穿透了.\n\n## 安装向日葵\n\n## 安装teamviewer","source":"_posts/在opensuse上外网远程连接.md","raw":"---\ntitle: 在opensuse上外网远程连接\ndate: 2023-08-07 14:38:51\ncatagories:\n    - 计算机\ntags:\n    - ssh\n---\n\n## 设置路由器\n需要把光猫设置成桥接模式并且需要知道宽带拨号的帐号密码, 这部分可以咨询宽带师傅. 不需要关闭DHCP服务, 否则会导致需要调节光猫的时候需要设置内网IP, 为了减少麻烦就不关闭了. 之后通过网线从光猫LAN口接出, 接入路由器WAN口. 为了使得外网可以通过外网IP访问内部电脑, 可以设置先设置静态IP地址绑定, 再设置端口映射或者DMZ主机. 如果使用端口映射, 那么暂时只开放了一个服务, 如果设置DMZ主机, 那么服务就都开放了. \n<!--more-->\n通过设置DDNS可以与花生壳的域名绑定, 但是花生壳的免费域名只有1年的使用时间, 因此还是需要去获得公网IP比较稳妥.\n\n## 获得公网IP\n如果使用的是华为路由器, 那么就可以使用华为智慧生活APP获得公网IP. \n\n## 安装花生壳\nopensuse可以安装花生壳的rpm包, 可以去[官网](https://hsk.oray.com/download)下载安装包. 之后需要做一些设置才能安装. 首先需要创建文件夹`/lib/systemd/system`, 其次需要安装`netstat`. 在opensuse上需要使用以下命令:\n```bash\nsudo zypper in net-tools-deprecated\n```\n这样才会在有`netstat`.\n\n之后就可以使用\n\n```bash\nsudo rpm -i phddns_<version>.rpm\n```\n\n来安装了.\n\n卸载的命令是\n```bash\nsudo rpm -e phddns\n```\n\n> 这里有个小坑, 用花生壳做内网穿透的话, 如果ip和刚刚做DDNS的ip不一致, 那么会把前面的DDNS设置冲掉. 因为是坑所以就不介绍如何设置内网穿透了.\n\n## 安装向日葵\n\n## 安装teamviewer","slug":"在opensuse上外网远程连接","published":1,"updated":"2025-06-19T15:17:12.114Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pz0017l8vq8hcoe1l1","content":"<h2 id=\"设置路由器\"><a href=\"#设置路由器\" class=\"headerlink\" title=\"设置路由器\"></a>设置路由器</h2><p>需要把光猫设置成桥接模式并且需要知道宽带拨号的帐号密码, 这部分可以咨询宽带师傅. 不需要关闭DHCP服务, 否则会导致需要调节光猫的时候需要设置内网IP, 为了减少麻烦就不关闭了. 之后通过网线从光猫LAN口接出, 接入路由器WAN口. 为了使得外网可以通过外网IP访问内部电脑, 可以设置先设置静态IP地址绑定, 再设置端口映射或者DMZ主机. 如果使用端口映射, 那么暂时只开放了一个服务, 如果设置DMZ主机, 那么服务就都开放了. </p>\n<span id=\"more\"></span>\n<p>通过设置DDNS可以与花生壳的域名绑定, 但是花生壳的免费域名只有1年的使用时间, 因此还是需要去获得公网IP比较稳妥.</p>\n<h2 id=\"获得公网IP\"><a href=\"#获得公网IP\" class=\"headerlink\" title=\"获得公网IP\"></a>获得公网IP</h2><p>如果使用的是华为路由器, 那么就可以使用华为智慧生活APP获得公网IP. </p>\n<h2 id=\"安装花生壳\"><a href=\"#安装花生壳\" class=\"headerlink\" title=\"安装花生壳\"></a>安装花生壳</h2><p>opensuse可以安装花生壳的rpm包, 可以去<a href=\"https://hsk.oray.com/download\">官网</a>下载安装包. 之后需要做一些设置才能安装. 首先需要创建文件夹<code>/lib/systemd/system</code>, 其次需要安装<code>netstat</code>. 在opensuse上需要使用以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper <span class=\"keyword\">in</span> net-tools-deprecated</span><br></pre></td></tr></table></figure>\n<p>这样才会在有<code>netstat</code>.</p>\n<p>之后就可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> rpm -i phddns_&lt;version&gt;.rpm</span><br></pre></td></tr></table></figure>\n\n<p>来安装了.</p>\n<p>卸载的命令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> rpm -e phddns</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有个小坑, 用花生壳做内网穿透的话, 如果ip和刚刚做DDNS的ip不一致, 那么会把前面的DDNS设置冲掉. 因为是坑所以就不介绍如何设置内网穿透了.</p>\n</blockquote>\n<h2 id=\"安装向日葵\"><a href=\"#安装向日葵\" class=\"headerlink\" title=\"安装向日葵\"></a>安装向日葵</h2><h2 id=\"安装teamviewer\"><a href=\"#安装teamviewer\" class=\"headerlink\" title=\"安装teamviewer\"></a>安装teamviewer</h2>","excerpt":"<h2 id=\"设置路由器\"><a href=\"#设置路由器\" class=\"headerlink\" title=\"设置路由器\"></a>设置路由器</h2><p>需要把光猫设置成桥接模式并且需要知道宽带拨号的帐号密码, 这部分可以咨询宽带师傅. 不需要关闭DHCP服务, 否则会导致需要调节光猫的时候需要设置内网IP, 为了减少麻烦就不关闭了. 之后通过网线从光猫LAN口接出, 接入路由器WAN口. 为了使得外网可以通过外网IP访问内部电脑, 可以设置先设置静态IP地址绑定, 再设置端口映射或者DMZ主机. 如果使用端口映射, 那么暂时只开放了一个服务, 如果设置DMZ主机, 那么服务就都开放了. </p>","more":"<p>通过设置DDNS可以与花生壳的域名绑定, 但是花生壳的免费域名只有1年的使用时间, 因此还是需要去获得公网IP比较稳妥.</p>\n<h2 id=\"获得公网IP\"><a href=\"#获得公网IP\" class=\"headerlink\" title=\"获得公网IP\"></a>获得公网IP</h2><p>如果使用的是华为路由器, 那么就可以使用华为智慧生活APP获得公网IP. </p>\n<h2 id=\"安装花生壳\"><a href=\"#安装花生壳\" class=\"headerlink\" title=\"安装花生壳\"></a>安装花生壳</h2><p>opensuse可以安装花生壳的rpm包, 可以去<a href=\"https://hsk.oray.com/download\">官网</a>下载安装包. 之后需要做一些设置才能安装. 首先需要创建文件夹<code>/lib/systemd/system</code>, 其次需要安装<code>netstat</code>. 在opensuse上需要使用以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> zypper <span class=\"keyword\">in</span> net-tools-deprecated</span><br></pre></td></tr></table></figure>\n<p>这样才会在有<code>netstat</code>.</p>\n<p>之后就可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> rpm -i phddns_&lt;version&gt;.rpm</span><br></pre></td></tr></table></figure>\n\n<p>来安装了.</p>\n<p>卸载的命令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> rpm -e phddns</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有个小坑, 用花生壳做内网穿透的话, 如果ip和刚刚做DDNS的ip不一致, 那么会把前面的DDNS设置冲掉. 因为是坑所以就不介绍如何设置内网穿透了.</p>\n</blockquote>\n<h2 id=\"安装向日葵\"><a href=\"#安装向日葵\" class=\"headerlink\" title=\"安装向日葵\"></a>安装向日葵</h2><h2 id=\"安装teamviewer\"><a href=\"#安装teamviewer\" class=\"headerlink\" title=\"安装teamviewer\"></a>安装teamviewer</h2>"},{"title":"如何使用git","date":"2023-02-15T06:26:02.000Z","catagories":["计算机"],"_content":"git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的[ics的PA](https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html)上抄来的。  \n\n安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:\n```bash\ngit config --global user.name \"hapo\"\ngit config --global user.email \"hapo@mail.com\"\ngit config --global core.editor vim\ngit config --global color.ui true\n```\n这些配置会储存在家目录下的`.gitconfig`中，经过了配置之后，我们就可以开始使用git了。\n\n## 本地管理  \n### 初始化  \n我们可以用`git clone`拉取远程的框架代码，或者在本地进行初始化新的项目:\n```bash\ngit init\n```\n\n### 查看存档信息\n使用\n```bash\ngit log\n```\n查看目前为止所有的存档。\n使用\n```bash\ngit status\n```\n可以得知，与当前存档相比，哪些文件发生变化。 \n<!--more--> \n\n### 存档\n当我们代码写到一定程度的时候，就应该进行\"存档\"。  \n首先我们需要使用`git status`查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用`git add`将文件加入跟踪列表，例如\n```bash\ngit add file.c\n```\n会将`file.c`加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用\n```bash\ngit add -A\n```\n这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的 .o 文件, 和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让`git`在添加跟踪文件之前作筛选，我们可以编辑`.gitignore`文件(你可以使用`ls -a`命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被`git`忽略的文件和文件类型。  \n把新文件加入跟踪列表后，使用`git status`再次确认。确认无误后就可以存档了，使用\n```bash\ngit commit\n```\n提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如\"fix bug for xxx\"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用`git log`查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱`git commit -m \"COMMIT\"`，虽然我知道上面说的是对的。</font>  \n\n### 读档\n我们可以使用`git log`来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash code，例如`8e4fac44d3b567591bc3768fc94d53575726b866`，我们需要通过hash code来告诉`git`我们希望读取哪一个档。使用一下命令进行独档:\n```bash\ngit reset --hard 8e4f\n```\n\n其中`8e4f`是上文hash code的前缀，我们不需要输入整个hash code。这时候我们的代码已经回到过去了。  \n但事实上，使用`git reset`的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到\"将来\"了。就和别的软件中的撤销操作一样。\n\n### 第三视点\n当然还是有办法来避免上文提到的副作用的，这就是`git`的分支功能，使用命令\n```bash\ngit branch\n```\n查看所有分支。其中`master`是主分支，使用`git init`初始化之后会自动建立主分支。  \n读档的时候使用以下命令\n```bash\ngit checkout 8e4f\n```\n而不是`git reset`。这时你将处于一个虚拟的分支中，你可以  \n1. 查看`8e4f`存档的内容\n2. 使用以下命令切换到其它分支\n```bash\ngit checkout 分支名\n```\n3. 对代码的内容进行修改，但你不能使用`git commit`进行存档，你需要使用\n```bash\ngit check -B 分支名\n```\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。  \n不同的分支之间不会相互干扰， 这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。\n\n\n\n","source":"_posts/如何使用git.md","raw":"---\ntitle: 如何使用git\ndate: 2023-02-15 15:26:02\ntags:\n    - git\ncatagories:\n    - 计算机\n---\ngit是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的[ics的PA](https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html)上抄来的。  \n\n安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:\n```bash\ngit config --global user.name \"hapo\"\ngit config --global user.email \"hapo@mail.com\"\ngit config --global core.editor vim\ngit config --global color.ui true\n```\n这些配置会储存在家目录下的`.gitconfig`中，经过了配置之后，我们就可以开始使用git了。\n\n## 本地管理  \n### 初始化  \n我们可以用`git clone`拉取远程的框架代码，或者在本地进行初始化新的项目:\n```bash\ngit init\n```\n\n### 查看存档信息\n使用\n```bash\ngit log\n```\n查看目前为止所有的存档。\n使用\n```bash\ngit status\n```\n可以得知，与当前存档相比，哪些文件发生变化。 \n<!--more--> \n\n### 存档\n当我们代码写到一定程度的时候，就应该进行\"存档\"。  \n首先我们需要使用`git status`查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用`git add`将文件加入跟踪列表，例如\n```bash\ngit add file.c\n```\n会将`file.c`加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用\n```bash\ngit add -A\n```\n这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的 .o 文件, 和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让`git`在添加跟踪文件之前作筛选，我们可以编辑`.gitignore`文件(你可以使用`ls -a`命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被`git`忽略的文件和文件类型。  \n把新文件加入跟踪列表后，使用`git status`再次确认。确认无误后就可以存档了，使用\n```bash\ngit commit\n```\n提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如\"fix bug for xxx\"。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用`git log`查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱`git commit -m \"COMMIT\"`，虽然我知道上面说的是对的。</font>  \n\n### 读档\n我们可以使用`git log`来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash code，例如`8e4fac44d3b567591bc3768fc94d53575726b866`，我们需要通过hash code来告诉`git`我们希望读取哪一个档。使用一下命令进行独档:\n```bash\ngit reset --hard 8e4f\n```\n\n其中`8e4f`是上文hash code的前缀，我们不需要输入整个hash code。这时候我们的代码已经回到过去了。  \n但事实上，使用`git reset`的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到\"将来\"了。就和别的软件中的撤销操作一样。\n\n### 第三视点\n当然还是有办法来避免上文提到的副作用的，这就是`git`的分支功能，使用命令\n```bash\ngit branch\n```\n查看所有分支。其中`master`是主分支，使用`git init`初始化之后会自动建立主分支。  \n读档的时候使用以下命令\n```bash\ngit checkout 8e4f\n```\n而不是`git reset`。这时你将处于一个虚拟的分支中，你可以  \n1. 查看`8e4f`存档的内容\n2. 使用以下命令切换到其它分支\n```bash\ngit checkout 分支名\n```\n3. 对代码的内容进行修改，但你不能使用`git commit`进行存档，你需要使用\n```bash\ngit check -B 分支名\n```\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。  \n不同的分支之间不会相互干扰， 这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。\n\n\n\n","slug":"如何使用git","published":1,"updated":"2023-02-15T09:35:06.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4pz0018l8vqg4ozejjf","content":"<p>git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的<a href=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html\">ics的PA</a>上抄来的。  </p>\n<p>安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;hapo&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;hapo@mail.com&quot;</span></span><br><span class=\"line\">git config --global core.editor vim</span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>这些配置会储存在家目录下的<code>.gitconfig</code>中，经过了配置之后，我们就可以开始使用git了。</p>\n<h2 id=\"本地管理\"><a href=\"#本地管理\" class=\"headerlink\" title=\"本地管理\"></a>本地管理</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>我们可以用<code>git clone</code>拉取远程的框架代码，或者在本地进行初始化新的项目:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看存档信息\"><a href=\"#查看存档信息\" class=\"headerlink\" title=\"查看存档信息\"></a>查看存档信息</h3><p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>查看目前为止所有的存档。<br>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>可以得知，与当前存档相比，哪些文件发生变化。 </p>\n<span id=\"more\"></span> \n\n<h3 id=\"存档\"><a href=\"#存档\" class=\"headerlink\" title=\"存档\"></a>存档</h3><p>当我们代码写到一定程度的时候，就应该进行”存档”。<br>首先我们需要使用<code>git status</code>查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用<code>git add</code>将文件加入跟踪列表，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.c</span><br></pre></td></tr></table></figure>\n<p>会将<code>file.c</code>加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n<p>这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的 .o 文件, 和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让<code>git</code>在添加跟踪文件之前作筛选，我们可以编辑<code>.gitignore</code>文件(你可以使用<code>ls -a</code>命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被<code>git</code>忽略的文件和文件类型。<br>把新文件加入跟踪列表后，使用<code>git status</code>再次确认。确认无误后就可以存档了，使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n<p>提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如”fix bug for xxx”。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用<code>git log</code>查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱<code>git commit -m &quot;COMMIT&quot;</code>，虽然我知道上面说的是对的。</font>  </p>\n<h3 id=\"读档\"><a href=\"#读档\" class=\"headerlink\" title=\"读档\"></a>读档</h3><p>我们可以使用<code>git log</code>来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash code，例如<code>8e4fac44d3b567591bc3768fc94d53575726b866</code>，我们需要通过hash code来告诉<code>git</code>我们希望读取哪一个档。使用一下命令进行独档:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 8e4f</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>8e4f</code>是上文hash code的前缀，我们不需要输入整个hash code。这时候我们的代码已经回到过去了。<br>但事实上，使用<code>git reset</code>的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到”将来”了。就和别的软件中的撤销操作一样。</p>\n<h3 id=\"第三视点\"><a href=\"#第三视点\" class=\"headerlink\" title=\"第三视点\"></a>第三视点</h3><p>当然还是有办法来避免上文提到的副作用的，这就是<code>git</code>的分支功能，使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<p>查看所有分支。其中<code>master</code>是主分支，使用<code>git init</code>初始化之后会自动建立主分支。<br>读档的时候使用以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 8e4f</span><br></pre></td></tr></table></figure>\n<p>而不是<code>git reset</code>。这时你将处于一个虚拟的分支中，你可以  </p>\n<ol>\n<li>查看<code>8e4f</code>存档的内容</li>\n<li>使用以下命令切换到其它分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br></pre></td></tr></table></figure></li>\n<li>对代码的内容进行修改，但你不能使用<code>git commit</code>进行存档，你需要使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git check -B 分支名</span><br></pre></td></tr></table></figure>\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。<br>不同的分支之间不会相互干扰， 这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。</li>\n</ol>\n","excerpt":"<p>git是一个版本控制软件，以前使用的方法过程粗浅，因此我希望记录下git的一些命令，这些命令主要是从jyy的<a href=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2022/git.html\">ics的PA</a>上抄来的。  </p>\n<p>安装好git后我们需要先进行一些配置工作。在终端中输入一下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;hapo&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;hapo@mail.com&quot;</span></span><br><span class=\"line\">git config --global core.editor vim</span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>这些配置会储存在家目录下的<code>.gitconfig</code>中，经过了配置之后，我们就可以开始使用git了。</p>\n<h2 id=\"本地管理\"><a href=\"#本地管理\" class=\"headerlink\" title=\"本地管理\"></a>本地管理</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>我们可以用<code>git clone</code>拉取远程的框架代码，或者在本地进行初始化新的项目:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看存档信息\"><a href=\"#查看存档信息\" class=\"headerlink\" title=\"查看存档信息\"></a>查看存档信息</h3><p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>查看目前为止所有的存档。<br>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<p>可以得知，与当前存档相比，哪些文件发生变化。 </p>","more":"<h3 id=\"存档\"><a href=\"#存档\" class=\"headerlink\" title=\"存档\"></a>存档</h3><p>当我们代码写到一定程度的时候，就应该进行”存档”。<br>首先我们需要使用<code>git status</code>查看是否有新的文件或者已经修改的文件未被跟踪，若有，则使用<code>git add</code>将文件加入跟踪列表，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.c</span><br></pre></td></tr></table></figure>\n<p>会将<code>file.c</code>加入跟踪列表中，如果需要一次添加所有未被跟踪的文件，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n<p>这个我爱用，但是这是不对的，因为可能会跟踪一些不必要的文件，例如编译产生的 .o 文件, 和最后产生的可执行文件。事实上，我们只需要跟踪代码源文件即可。为了让<code>git</code>在添加跟踪文件之前作筛选，我们可以编辑<code>.gitignore</code>文件(你可以使用<code>ls -a</code>命令看到它，<font color=\"orange\">但是我没看到</font>)，在里面给出了需要被<code>git</code>忽略的文件和文件类型。<br>把新文件加入跟踪列表后，使用<code>git status</code>再次确认。确认无误后就可以存档了，使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n<p>提交工程当前的状态。执行这条命令后，将会弹出文本编辑器，我们需要在第一行中添加本次存档的注释，例如”fix bug for xxx”。我们应该尽可能添加详细的注释，将来我们需要根据这些注释来区别不同的存档。编写好注释之后，保存并退出文本编辑器，存档成功。我们可以使用<code>git log</code>查看存档记录，你应该能看到刚才编辑的注释。<font color='orange'>但是现在我偏爱<code>git commit -m &quot;COMMIT&quot;</code>，虽然我知道上面说的是对的。</font>  </p>\n<h3 id=\"读档\"><a href=\"#读档\" class=\"headerlink\" title=\"读档\"></a>读档</h3><p>我们可以使用<code>git log</code>来查看已有的存档，并决定需要回到哪个过去，每一份存档都有一个hash code，例如<code>8e4fac44d3b567591bc3768fc94d53575726b866</code>，我们需要通过hash code来告诉<code>git</code>我们希望读取哪一个档。使用一下命令进行独档:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 8e4f</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>8e4f</code>是上文hash code的前缀，我们不需要输入整个hash code。这时候我们的代码已经回到过去了。<br>但事实上，使用<code>git reset</code>的hard模式之前，我们需要再三确认选择的存档是不是我们的真正目标。如果我们读入了一个较早的存档，那么比这个存档新的所有记录都将被删除！这意味着你不能随便回到”将来”了。就和别的软件中的撤销操作一样。</p>\n<h3 id=\"第三视点\"><a href=\"#第三视点\" class=\"headerlink\" title=\"第三视点\"></a>第三视点</h3><p>当然还是有办法来避免上文提到的副作用的，这就是<code>git</code>的分支功能，使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<p>查看所有分支。其中<code>master</code>是主分支，使用<code>git init</code>初始化之后会自动建立主分支。<br>读档的时候使用以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 8e4f</span><br></pre></td></tr></table></figure>\n<p>而不是<code>git reset</code>。这时你将处于一个虚拟的分支中，你可以  </p>\n<ol>\n<li>查看<code>8e4f</code>存档的内容</li>\n<li>使用以下命令切换到其它分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br></pre></td></tr></table></figure></li>\n<li>对代码的内容进行修改，但你不能使用<code>git commit</code>进行存档，你需要使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git check -B 分支名</span><br></pre></td></tr></table></figure>\n把修改保存到一个新的分支中，如果分支已存在，其内容将会被覆盖。<br>不同的分支之间不会相互干扰， 这也给项目的分布式开发带来了便利，有了分支功能，我们就可以像但视点那样在一个世界的不同时间(一个分支的多个存档)，或者是多个平行时间(多个分支)之间来回穿梭。</li>\n</ol>"},{"title":"安装amber22的坑","date":"2023-04-18T11:49:10.000Z","_content":"amber22已经把Amber部分开源了, 再加上最近需要使用amber, 所以将amber的安装研究了下, 经过两天的debug, 终于可以在集群上安装起来.\n\n## 最基本的安装过程\n\namber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹, 并且amber22已经不需要再分开编译serial, mpi, cuda版本, 只要开启了相应的选项就能都编译出来. 在`/path/to/amber22_src/build`中有`run_make`和`configure_make.py`两个文件. 其中, `run_make`写了基本的编译命令, 你需要对自己需要的选项进行修改从编译需要的版本, 而`configure_make.py`则是一个`python`脚本, 可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure. 当编译出现问题时, 可以用`clean_build`清理掉生成的文件.\n\n最基本的安装命令是\n\n```bash\n./run_make\nmake install\nsource /path/to/amber/amber.sh\n```\n\n如果amber源文件夹为`/path/to/amber22_src`, 则默认安装好的文件夹在`/path/to/amber`.\n<!--more-->\n\n## 配置python\n\namber22的一些程序需要python环境, 有很多方法可以python环境.\n\n### 1\n\namber22默认会下载miniconda, 这样可以搭建出amber22适配的环境. 安装完成后会生成一个`amber.python`软连接, 这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网, 此时可以如下操作: (1) 在`amber22_src/build`下新建文件夹`CMakeFiles/miniconda/download/`, 下载好`Miniconda3-latest-Linux-x86_64.sh`放入该文件夹中, 之后cmake会认为该文件已下载好, 从而跳过下载过程. (2) 修改`amber22_src/cmake`文件夹下的`UseMiniconda.cmake`文件, 修改91行\n\n```cmake\n91  set(INSTALLER_URL \"http://repo.continuum.io/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n例如修改成如下\n\n```cmake\n91  set(INSTALLER_URL \"http://mirrors.nju.edu.cn/anaconda/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网, 因此我们可以配置成内网的镜像. 可以修改家目录下的`.condarc`文件\n\n```json\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirror.nju.edu.cn/anaconda/pkgs/main\n  - https://mirror.nju.edu.cn/anaconda/pkgs/r\n  - https://mirror.nju.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirror.nju.edu.cn/anaconda/cloud\n  msys2: https://mirror.nju.edu.cn/anaconda/cloud\n  bioconda: https://mirror.nju.edu.cn/anaconda/cloud\n  menpo: https://mirror.nju.edu.cn/anaconda/cloud\n  pytorch: https://mirror.nju.edu.cn/anaconda/cloud\n  simpleitk: https://mirror.nju.edu.cn/anaconda/cloud\n```\n\n以及配置pip\n\n```bash\npip config set global.index-url https://mirror.nju.edu.cn/pypi/web/simple/\n```\n\n此时会在家目录下生成如下配置文件`～/.config/pip/pip.conf`, 其中内容为\n\n```json\n[global]\nindex-url = https://mirror.nju.edu.cn/pypi/web/simple/\n\n```\n\n这样后使用miniconda的python环境就可以顺利安装了.\n\n### 2\n\n如果已经在本地装过anaconda, 那么我们就可以用anaconda生成一个安装amber22的本地环境, 这样可以和已经安装过的python库同时在一个环境下使用. 使用本地python环境需要设置如下的选项`-DDOWNLOAD_MINICONDA=FALSE`(不下载miniconda)和`-DUSE_CONDA_LIBS=TRUE`(使用conda的python库). 可以用以下命令生成一个新的环境.\n\n```bash\nconda create -n amber python=3.10\nconda activate amber\n```\n\namber22的安装需要一些python库\n\n```conda\nconda install numpy\nconda install scipy\nconda install matplotlib\nconda install setuptools\nconda install thinker\n```\n\n有的python库可能已经自带. 经过以上的配置, amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.\n\n## 其余的坑\n\n### Boost\n\namber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装, 或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译. 如果你确定系统中的版本可用, 那么可以设置`-DFORCE_EXTERNAL_LIBS='boost'`. amber22要编译自己的boost库需要zlib和bzip2, 其中zlib的缺失会在`run_make`的过程中检查到, 而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失, 那么可以使用anaconda安装库.  \n\n```bash\nconda install zlib #zlib 在前面的配置环境的时候已经安装了.\nconda install bzip2\n```\n\n### libSM\n\n在集群上, libSM库存在问题, 这会导致xaLeap编译出问题, 这时候我们可以使用anaconda安装该库文件.\n\n```bash\nconda install -c conda-forge xorg-libsm\n```\n\n并且设置如下两个变量： `-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include`和`-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so`\n\n并且设置`LD_LIBRARY_PATH`用于链接`libuuid.so`\n\n```bash\nexport LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:$LD_LIBRARY_PATH\n```\n\n> 这里实际上是系统的libsm库和uuid库的匹配有问题, 使用conda安装了libsm库后会下载uuid库, 而设置了`-DX11_SM_INCLUDE`、`-DX11_SM_LIB`和`LD_LIBRARY_PATH`后会使用anaconda下的libsm库并且会优先查找`/path/toanaconda3/env/amber/lib`下的uuid库. 通过使用`objdump -d /usr/lib64/libuuid.so.1`发现其中的函数名为`uuid_generate@@UUID_1.0`而不是`uuid_generate@UUID_1.0`.\n>\n> <font color='salmon'>更简单的方法是设置`-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/`来让cmake自动查找libsm库和uuid库, 这样就不用设置`-DX11_SM_LIB`和`-DX11_SM_INCLUDE_PATH`了, 也不需要设置系统的`LD_LIBRARY_PATH`.</font>\n>\n>> 实际上经过测试, 只设置了`-DX11_SM_INCLUDE`和`-DX11_SM_LIB`依旧会使用`/usr/lib64/libSM.so.1`.\n>>\n>> 只设置`LD_LIBRARY_PATH`也无法通过编译\n\n### 一些额外的选项\n\n1. `-DTRUST_SYSTEM_LIBS`: 相信系统的库文件, 开启后会将某些库会使用系统中自带的(例如boost), 开启命令`-DTRUST_SYSTEM_LIBS=TRUE`\n2. `-DDISABLE_TOOLS`: 关闭一些工具的编译, 例如`-DDISABLE_TOOLS=cpptraj`\n3. `-DFORCE_DISABLE_LIBS`: 关闭某些库文件, 使用`;`分隔开(注意用引号`'`引起来, 以防和bash冲突), 例如`-DFORCE_DISABLE_LIBS=boost`\n4. `-DFORCE_INTERNAL_LIBS`: 强制某些库文件使用内部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n5. `-DFORCE_EXTERNAL_LIBS`: 强制某些库文件使用外部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n\n### CUDA与INTEL编译器版本问题\n\n`run_cmake`会检查编译器的版本和CUDA版本, 如果版本不适配则会配置不通过. 但是当你使用intel编译器时, 它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本. 为了解决这个问题我们可以修改`/path/to/amber22_src/cmake/CudaConfig.cmake`文件的112行\n\n```cmake\n111             CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 12\n112             AND CUDA_VERSION VERSION_GREATER 11.6\n```\n\n将cuda的上限版本(11.6)调低即可, 我一般调至11.0.\n","source":"_posts/安装amber22的坑.md","raw":"---\ntitle: 安装amber22的坑\ndate: 2023-04-18 20:49:10\ncategories:\n    - 分子模拟\ntags:\n    - 软件安装\n---\namber22已经把Amber部分开源了, 再加上最近需要使用amber, 所以将amber的安装研究了下, 经过两天的debug, 终于可以在集群上安装起来.\n\n## 最基本的安装过程\n\namber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹, 并且amber22已经不需要再分开编译serial, mpi, cuda版本, 只要开启了相应的选项就能都编译出来. 在`/path/to/amber22_src/build`中有`run_make`和`configure_make.py`两个文件. 其中, `run_make`写了基本的编译命令, 你需要对自己需要的选项进行修改从编译需要的版本, 而`configure_make.py`则是一个`python`脚本, 可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure. 当编译出现问题时, 可以用`clean_build`清理掉生成的文件.\n\n最基本的安装命令是\n\n```bash\n./run_make\nmake install\nsource /path/to/amber/amber.sh\n```\n\n如果amber源文件夹为`/path/to/amber22_src`, 则默认安装好的文件夹在`/path/to/amber`.\n<!--more-->\n\n## 配置python\n\namber22的一些程序需要python环境, 有很多方法可以python环境.\n\n### 1\n\namber22默认会下载miniconda, 这样可以搭建出amber22适配的环境. 安装完成后会生成一个`amber.python`软连接, 这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网, 此时可以如下操作: (1) 在`amber22_src/build`下新建文件夹`CMakeFiles/miniconda/download/`, 下载好`Miniconda3-latest-Linux-x86_64.sh`放入该文件夹中, 之后cmake会认为该文件已下载好, 从而跳过下载过程. (2) 修改`amber22_src/cmake`文件夹下的`UseMiniconda.cmake`文件, 修改91行\n\n```cmake\n91  set(INSTALLER_URL \"http://repo.continuum.io/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n例如修改成如下\n\n```cmake\n91  set(INSTALLER_URL \"http://mirrors.nju.edu.cn/anaconda/miniconda/${MINICONDA_INSTALLER_FILENAME}\")\n```\n\n之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网, 因此我们可以配置成内网的镜像. 可以修改家目录下的`.condarc`文件\n\n```json\nchannels:\n  - defaults\nshow_channel_urls: true\ndefault_channels:\n  - https://mirror.nju.edu.cn/anaconda/pkgs/main\n  - https://mirror.nju.edu.cn/anaconda/pkgs/r\n  - https://mirror.nju.edu.cn/anaconda/pkgs/msys2\ncustom_channels:\n  conda-forge: https://mirror.nju.edu.cn/anaconda/cloud\n  msys2: https://mirror.nju.edu.cn/anaconda/cloud\n  bioconda: https://mirror.nju.edu.cn/anaconda/cloud\n  menpo: https://mirror.nju.edu.cn/anaconda/cloud\n  pytorch: https://mirror.nju.edu.cn/anaconda/cloud\n  simpleitk: https://mirror.nju.edu.cn/anaconda/cloud\n```\n\n以及配置pip\n\n```bash\npip config set global.index-url https://mirror.nju.edu.cn/pypi/web/simple/\n```\n\n此时会在家目录下生成如下配置文件`～/.config/pip/pip.conf`, 其中内容为\n\n```json\n[global]\nindex-url = https://mirror.nju.edu.cn/pypi/web/simple/\n\n```\n\n这样后使用miniconda的python环境就可以顺利安装了.\n\n### 2\n\n如果已经在本地装过anaconda, 那么我们就可以用anaconda生成一个安装amber22的本地环境, 这样可以和已经安装过的python库同时在一个环境下使用. 使用本地python环境需要设置如下的选项`-DDOWNLOAD_MINICONDA=FALSE`(不下载miniconda)和`-DUSE_CONDA_LIBS=TRUE`(使用conda的python库). 可以用以下命令生成一个新的环境.\n\n```bash\nconda create -n amber python=3.10\nconda activate amber\n```\n\namber22的安装需要一些python库\n\n```conda\nconda install numpy\nconda install scipy\nconda install matplotlib\nconda install setuptools\nconda install thinker\n```\n\n有的python库可能已经自带. 经过以上的配置, amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.\n\n## 其余的坑\n\n### Boost\n\namber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装, 或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译. 如果你确定系统中的版本可用, 那么可以设置`-DFORCE_EXTERNAL_LIBS='boost'`. amber22要编译自己的boost库需要zlib和bzip2, 其中zlib的缺失会在`run_make`的过程中检查到, 而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失, 那么可以使用anaconda安装库.  \n\n```bash\nconda install zlib #zlib 在前面的配置环境的时候已经安装了.\nconda install bzip2\n```\n\n### libSM\n\n在集群上, libSM库存在问题, 这会导致xaLeap编译出问题, 这时候我们可以使用anaconda安装该库文件.\n\n```bash\nconda install -c conda-forge xorg-libsm\n```\n\n并且设置如下两个变量： `-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include`和`-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so`\n\n并且设置`LD_LIBRARY_PATH`用于链接`libuuid.so`\n\n```bash\nexport LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:$LD_LIBRARY_PATH\n```\n\n> 这里实际上是系统的libsm库和uuid库的匹配有问题, 使用conda安装了libsm库后会下载uuid库, 而设置了`-DX11_SM_INCLUDE`、`-DX11_SM_LIB`和`LD_LIBRARY_PATH`后会使用anaconda下的libsm库并且会优先查找`/path/toanaconda3/env/amber/lib`下的uuid库. 通过使用`objdump -d /usr/lib64/libuuid.so.1`发现其中的函数名为`uuid_generate@@UUID_1.0`而不是`uuid_generate@UUID_1.0`.\n>\n> <font color='salmon'>更简单的方法是设置`-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/`来让cmake自动查找libsm库和uuid库, 这样就不用设置`-DX11_SM_LIB`和`-DX11_SM_INCLUDE_PATH`了, 也不需要设置系统的`LD_LIBRARY_PATH`.</font>\n>\n>> 实际上经过测试, 只设置了`-DX11_SM_INCLUDE`和`-DX11_SM_LIB`依旧会使用`/usr/lib64/libSM.so.1`.\n>>\n>> 只设置`LD_LIBRARY_PATH`也无法通过编译\n\n### 一些额外的选项\n\n1. `-DTRUST_SYSTEM_LIBS`: 相信系统的库文件, 开启后会将某些库会使用系统中自带的(例如boost), 开启命令`-DTRUST_SYSTEM_LIBS=TRUE`\n2. `-DDISABLE_TOOLS`: 关闭一些工具的编译, 例如`-DDISABLE_TOOLS=cpptraj`\n3. `-DFORCE_DISABLE_LIBS`: 关闭某些库文件, 使用`;`分隔开(注意用引号`'`引起来, 以防和bash冲突), 例如`-DFORCE_DISABLE_LIBS=boost`\n4. `-DFORCE_INTERNAL_LIBS`: 强制某些库文件使用内部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n5. `-DFORCE_EXTERNAL_LIBS`: 强制某些库文件使用外部编译, 例如`-DFORCE_INTERNAL_LIBS=zlib`\n\n### CUDA与INTEL编译器版本问题\n\n`run_cmake`会检查编译器的版本和CUDA版本, 如果版本不适配则会配置不通过. 但是当你使用intel编译器时, 它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本. 为了解决这个问题我们可以修改`/path/to/amber22_src/cmake/CudaConfig.cmake`文件的112行\n\n```cmake\n111             CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 12\n112             AND CUDA_VERSION VERSION_GREATER 11.6\n```\n\n将cuda的上限版本(11.6)调低即可, 我一般调至11.0.\n","slug":"安装amber22的坑","published":1,"updated":"2025-06-19T15:17:12.146Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4q1001cl8vqc4rvdedb","content":"<p>amber22已经把Amber部分开源了, 再加上最近需要使用amber, 所以将amber的安装研究了下, 经过两天的debug, 终于可以在集群上安装起来.</p>\n<h2 id=\"最基本的安装过程\"><a href=\"#最基本的安装过程\" class=\"headerlink\" title=\"最基本的安装过程\"></a>最基本的安装过程</h2><p>amber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹, 并且amber22已经不需要再分开编译serial, mpi, cuda版本, 只要开启了相应的选项就能都编译出来. 在<code>/path/to/amber22_src/build</code>中有<code>run_make</code>和<code>configure_make.py</code>两个文件. 其中, <code>run_make</code>写了基本的编译命令, 你需要对自己需要的选项进行修改从编译需要的版本, 而<code>configure_make.py</code>则是一个<code>python</code>脚本, 可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure. 当编译出现问题时, 可以用<code>clean_build</code>清理掉生成的文件.</p>\n<p>最基本的安装命令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./run_make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">source</span> /path/to/amber/amber.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果amber源文件夹为<code>/path/to/amber22_src</code>, 则默认安装好的文件夹在<code>/path/to/amber</code>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置python\"><a href=\"#配置python\" class=\"headerlink\" title=\"配置python\"></a>配置python</h2><p>amber22的一些程序需要python环境, 有很多方法可以python环境.</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>amber22默认会下载miniconda, 这样可以搭建出amber22适配的环境. 安装完成后会生成一个<code>amber.python</code>软连接, 这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网, 此时可以如下操作: (1) 在<code>amber22_src/build</code>下新建文件夹<code>CMakeFiles/miniconda/download/</code>, 下载好<code>Miniconda3-latest-Linux-x86_64.sh</code>放入该文件夹中, 之后cmake会认为该文件已下载好, 从而跳过下载过程. (2) 修改<code>amber22_src/cmake</code>文件夹下的<code>UseMiniconda.cmake</code>文件, 修改91行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://repo.continuum.io/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如修改成如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://mirrors.nju.edu.cn/anaconda/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网, 因此我们可以配置成内网的镜像. 可以修改家目录下的<code>.condarc</code>文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">default_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/main</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/r</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/msys2</span></span><br><span class=\"line\">custom_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  conda-forge<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  msys2<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  bioconda<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  menpo<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  pytorch<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  simpleitk<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br></pre></td></tr></table></figure>\n\n<p>以及配置pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://mirror.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>\n\n<p>此时会在家目录下生成如下配置文件<code>～/.config/pip/pip.conf</code>, 其中内容为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span>global<span class=\"punctuation\">]</span></span><br><span class=\"line\">index-url = https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/pypi/web/simple/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样后使用miniconda的python环境就可以顺利安装了.</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>如果已经在本地装过anaconda, 那么我们就可以用anaconda生成一个安装amber22的本地环境, 这样可以和已经安装过的python库同时在一个环境下使用. 使用本地python环境需要设置如下的选项<code>-DDOWNLOAD_MINICONDA=FALSE</code>(不下载miniconda)和<code>-DUSE_CONDA_LIBS=TRUE</code>(使用conda的python库). 可以用以下命令生成一个新的环境.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n amber python=3.10</span><br><span class=\"line\">conda activate amber</span><br></pre></td></tr></table></figure>\n\n<p>amber22的安装需要一些python库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy</span><br><span class=\"line\">conda install scipy</span><br><span class=\"line\">conda install matplotlib</span><br><span class=\"line\">conda install setuptools</span><br><span class=\"line\">conda install thinker</span><br></pre></td></tr></table></figure>\n\n<p>有的python库可能已经自带. 经过以上的配置, amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.</p>\n<h2 id=\"其余的坑\"><a href=\"#其余的坑\" class=\"headerlink\" title=\"其余的坑\"></a>其余的坑</h2><h3 id=\"Boost\"><a href=\"#Boost\" class=\"headerlink\" title=\"Boost\"></a>Boost</h3><p>amber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装, 或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译. 如果你确定系统中的版本可用, 那么可以设置<code>-DFORCE_EXTERNAL_LIBS=&#39;boost&#39;</code>. amber22要编译自己的boost库需要zlib和bzip2, 其中zlib的缺失会在<code>run_make</code>的过程中检查到, 而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失, 那么可以使用anaconda安装库.  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install zlib <span class=\"comment\">#zlib 在前面的配置环境的时候已经安装了.</span></span><br><span class=\"line\">conda install bzip2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"libSM\"><a href=\"#libSM\" class=\"headerlink\" title=\"libSM\"></a>libSM</h3><p>在集群上, libSM库存在问题, 这会导致xaLeap编译出问题, 这时候我们可以使用anaconda安装该库文件.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c conda-forge xorg-libsm</span><br></pre></td></tr></table></figure>\n\n<p>并且设置如下两个变量： <code>-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include</code>和<code>-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so</code></p>\n<p>并且设置<code>LD_LIBRARY_PATH</code>用于链接<code>libuuid.so</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里实际上是系统的libsm库和uuid库的匹配有问题, 使用conda安装了libsm库后会下载uuid库, 而设置了<code>-DX11_SM_INCLUDE</code>、<code>-DX11_SM_LIB</code>和<code>LD_LIBRARY_PATH</code>后会使用anaconda下的libsm库并且会优先查找<code>/path/toanaconda3/env/amber/lib</code>下的uuid库. 通过使用<code>objdump -d /usr/lib64/libuuid.so.1</code>发现其中的函数名为<code>uuid_generate@@UUID_1.0</code>而不是<code>uuid_generate@UUID_1.0</code>.</p>\n<p><font color='salmon'>更简单的方法是设置<code>-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/</code>来让cmake自动查找libsm库和uuid库, 这样就不用设置<code>-DX11_SM_LIB</code>和<code>-DX11_SM_INCLUDE_PATH</code>了, 也不需要设置系统的<code>LD_LIBRARY_PATH</code>.</font></p>\n<blockquote>\n<p>实际上经过测试, 只设置了<code>-DX11_SM_INCLUDE</code>和<code>-DX11_SM_LIB</code>依旧会使用<code>/usr/lib64/libSM.so.1</code>.</p>\n<p>只设置<code>LD_LIBRARY_PATH</code>也无法通过编译</p>\n</blockquote>\n</blockquote>\n<h3 id=\"一些额外的选项\"><a href=\"#一些额外的选项\" class=\"headerlink\" title=\"一些额外的选项\"></a>一些额外的选项</h3><ol>\n<li><code>-DTRUST_SYSTEM_LIBS</code>: 相信系统的库文件, 开启后会将某些库会使用系统中自带的(例如boost), 开启命令<code>-DTRUST_SYSTEM_LIBS=TRUE</code></li>\n<li><code>-DDISABLE_TOOLS</code>: 关闭一些工具的编译, 例如<code>-DDISABLE_TOOLS=cpptraj</code></li>\n<li><code>-DFORCE_DISABLE_LIBS</code>: 关闭某些库文件, 使用<code>;</code>分隔开(注意用引号<code>&#39;</code>引起来, 以防和bash冲突), 例如<code>-DFORCE_DISABLE_LIBS=boost</code></li>\n<li><code>-DFORCE_INTERNAL_LIBS</code>: 强制某些库文件使用内部编译, 例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n<li><code>-DFORCE_EXTERNAL_LIBS</code>: 强制某些库文件使用外部编译, 例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n</ol>\n<h3 id=\"CUDA与INTEL编译器版本问题\"><a href=\"#CUDA与INTEL编译器版本问题\" class=\"headerlink\" title=\"CUDA与INTEL编译器版本问题\"></a>CUDA与INTEL编译器版本问题</h3><p><code>run_cmake</code>会检查编译器的版本和CUDA版本, 如果版本不适配则会配置不通过. 但是当你使用intel编译器时, 它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本. 为了解决这个问题我们可以修改<code>/path/to/amber22_src/cmake/CudaConfig.cmake</code>文件的112行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">111</span>             CMAKE_CXX_COMPILER_VERSION <span class=\"keyword\">VERSION_GREATER_EQUAL</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">112</span>             <span class=\"keyword\">AND</span> CUDA_VERSION <span class=\"keyword\">VERSION_GREATER</span> <span class=\"number\">11.6</span></span><br></pre></td></tr></table></figure>\n\n<p>将cuda的上限版本(11.6)调低即可, 我一般调至11.0.</p>\n","excerpt":"<p>amber22已经把Amber部分开源了, 再加上最近需要使用amber, 所以将amber的安装研究了下, 经过两天的debug, 终于可以在集群上安装起来.</p>\n<h2 id=\"最基本的安装过程\"><a href=\"#最基本的安装过程\" class=\"headerlink\" title=\"最基本的安装过程\"></a>最基本的安装过程</h2><p>amber22使用cmake进行构建程序, 这样的好处是不会破坏源程序文件夹, 并且amber22已经不需要再分开编译serial, mpi, cuda版本, 只要开启了相应的选项就能都编译出来. 在<code>/path/to/amber22_src/build</code>中有<code>run_make</code>和<code>configure_make.py</code>两个文件. 其中, <code>run_make</code>写了基本的编译命令, 你需要对自己需要的选项进行修改从编译需要的版本, 而<code>configure_make.py</code>则是一个<code>python</code>脚本, 可以通过命令行设置对应的选项. 两个文件可以任意选一个进行configure. 当编译出现问题时, 可以用<code>clean_build</code>清理掉生成的文件.</p>\n<p>最基本的安装命令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./run_make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">source</span> /path/to/amber/amber.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果amber源文件夹为<code>/path/to/amber22_src</code>, 则默认安装好的文件夹在<code>/path/to/amber</code>.</p>","more":"<h2 id=\"配置python\"><a href=\"#配置python\" class=\"headerlink\" title=\"配置python\"></a>配置python</h2><p>amber22的一些程序需要python环境, 有很多方法可以python环境.</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>amber22默认会下载miniconda, 这样可以搭建出amber22适配的环境. 安装完成后会生成一个<code>amber.python</code>软连接, 这样可以和系统默认的python区分开. 但是在hpcc集群上没有办法连接外网, 此时可以如下操作: (1) 在<code>amber22_src/build</code>下新建文件夹<code>CMakeFiles/miniconda/download/</code>, 下载好<code>Miniconda3-latest-Linux-x86_64.sh</code>放入该文件夹中, 之后cmake会认为该文件已下载好, 从而跳过下载过程. (2) 修改<code>amber22_src/cmake</code>文件夹下的<code>UseMiniconda.cmake</code>文件, 修改91行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://repo.continuum.io/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如修改成如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">91</span>  <span class=\"keyword\">set</span>(INSTALLER_URL <span class=\"string\">&quot;http://mirrors.nju.edu.cn/anaconda/miniconda/$&#123;MINICONDA_INSTALLER_FILENAME&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>之后会下载一些miniconda需要的python库. 因为hpcc集群上无法连接外网, 因此我们可以配置成内网的镜像. 可以修改家目录下的<code>.condarc</code>文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - defaults</span><br><span class=\"line\">show_channel_urls<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">default_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/main</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/r</span></span><br><span class=\"line\">  - https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/pkgs/msys2</span></span><br><span class=\"line\">custom_channels<span class=\"punctuation\">:</span></span><br><span class=\"line\">  conda-forge<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  msys2<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  bioconda<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  menpo<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  pytorch<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class=\"line\">  simpleitk<span class=\"punctuation\">:</span> https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/anaconda/cloud</span></span><br></pre></td></tr></table></figure>\n\n<p>以及配置pip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config <span class=\"built_in\">set</span> global.index-url https://mirror.nju.edu.cn/pypi/web/simple/</span><br></pre></td></tr></table></figure>\n\n<p>此时会在家目录下生成如下配置文件<code>～/.config/pip/pip.conf</code>, 其中内容为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span>global<span class=\"punctuation\">]</span></span><br><span class=\"line\">index-url = https<span class=\"punctuation\">:</span><span class=\"comment\">//mirror.nju.edu.cn/pypi/web/simple/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样后使用miniconda的python环境就可以顺利安装了.</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>如果已经在本地装过anaconda, 那么我们就可以用anaconda生成一个安装amber22的本地环境, 这样可以和已经安装过的python库同时在一个环境下使用. 使用本地python环境需要设置如下的选项<code>-DDOWNLOAD_MINICONDA=FALSE</code>(不下载miniconda)和<code>-DUSE_CONDA_LIBS=TRUE</code>(使用conda的python库). 可以用以下命令生成一个新的环境.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n amber python=3.10</span><br><span class=\"line\">conda activate amber</span><br></pre></td></tr></table></figure>\n\n<p>amber22的安装需要一些python库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy</span><br><span class=\"line\">conda install scipy</span><br><span class=\"line\">conda install matplotlib</span><br><span class=\"line\">conda install setuptools</span><br><span class=\"line\">conda install thinker</span><br></pre></td></tr></table></figure>\n\n<p>有的python库可能已经自带. 经过以上的配置, amber22就能使用anaconda下现成的python环境, 不需要额外安装anaconda.</p>\n<h2 id=\"其余的坑\"><a href=\"#其余的坑\" class=\"headerlink\" title=\"其余的坑\"></a>其余的坑</h2><h3 id=\"Boost\"><a href=\"#Boost\" class=\"headerlink\" title=\"Boost\"></a>Boost</h3><p>amber需要使用zlib和bzip2编译过的boost库. 集群上一般没有安装, 或者安装后也boost并没有使用zlib和bzip2编译, 因此amber22一般会自己编译. 如果你确定系统中的版本可用, 那么可以设置<code>-DFORCE_EXTERNAL_LIBS=&#39;boost&#39;</code>. amber22要编译自己的boost库需要zlib和bzip2, 其中zlib的缺失会在<code>run_make</code>的过程中检查到, 而bzip2的缺失则会在编译的过程中才会报错. 如果这两个库在集群上缺失, 那么可以使用anaconda安装库.  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install zlib <span class=\"comment\">#zlib 在前面的配置环境的时候已经安装了.</span></span><br><span class=\"line\">conda install bzip2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"libSM\"><a href=\"#libSM\" class=\"headerlink\" title=\"libSM\"></a>libSM</h3><p>在集群上, libSM库存在问题, 这会导致xaLeap编译出问题, 这时候我们可以使用anaconda安装该库文件.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c conda-forge xorg-libsm</span><br></pre></td></tr></table></figure>\n\n<p>并且设置如下两个变量： <code>-DX11_SM_INCLUDE_PATH=/path/to/anaconda/env/amber/include</code>和<code>-DX11_SM_LIB=/path/to/anaconda/env/amber/lib/libSM.so</code></p>\n<p>并且设置<code>LD_LIBRARY_PATH</code>用于链接<code>libuuid.so</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/path/to/anaconda3/env/amber/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里实际上是系统的libsm库和uuid库的匹配有问题, 使用conda安装了libsm库后会下载uuid库, 而设置了<code>-DX11_SM_INCLUDE</code>、<code>-DX11_SM_LIB</code>和<code>LD_LIBRARY_PATH</code>后会使用anaconda下的libsm库并且会优先查找<code>/path/toanaconda3/env/amber/lib</code>下的uuid库. 通过使用<code>objdump -d /usr/lib64/libuuid.so.1</code>发现其中的函数名为<code>uuid_generate@@UUID_1.0</code>而不是<code>uuid_generate@UUID_1.0</code>.</p>\n<p><font color='salmon'>更简单的方法是设置<code>-DCMAKE_PREFIX_PATH=/path/to/anaconda/env/amber/</code>来让cmake自动查找libsm库和uuid库, 这样就不用设置<code>-DX11_SM_LIB</code>和<code>-DX11_SM_INCLUDE_PATH</code>了, 也不需要设置系统的<code>LD_LIBRARY_PATH</code>.</font></p>\n<blockquote>\n<p>实际上经过测试, 只设置了<code>-DX11_SM_INCLUDE</code>和<code>-DX11_SM_LIB</code>依旧会使用<code>/usr/lib64/libSM.so.1</code>.</p>\n<p>只设置<code>LD_LIBRARY_PATH</code>也无法通过编译</p>\n</blockquote>\n</blockquote>\n<h3 id=\"一些额外的选项\"><a href=\"#一些额外的选项\" class=\"headerlink\" title=\"一些额外的选项\"></a>一些额外的选项</h3><ol>\n<li><code>-DTRUST_SYSTEM_LIBS</code>: 相信系统的库文件, 开启后会将某些库会使用系统中自带的(例如boost), 开启命令<code>-DTRUST_SYSTEM_LIBS=TRUE</code></li>\n<li><code>-DDISABLE_TOOLS</code>: 关闭一些工具的编译, 例如<code>-DDISABLE_TOOLS=cpptraj</code></li>\n<li><code>-DFORCE_DISABLE_LIBS</code>: 关闭某些库文件, 使用<code>;</code>分隔开(注意用引号<code>&#39;</code>引起来, 以防和bash冲突), 例如<code>-DFORCE_DISABLE_LIBS=boost</code></li>\n<li><code>-DFORCE_INTERNAL_LIBS</code>: 强制某些库文件使用内部编译, 例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n<li><code>-DFORCE_EXTERNAL_LIBS</code>: 强制某些库文件使用外部编译, 例如<code>-DFORCE_INTERNAL_LIBS=zlib</code></li>\n</ol>\n<h3 id=\"CUDA与INTEL编译器版本问题\"><a href=\"#CUDA与INTEL编译器版本问题\" class=\"headerlink\" title=\"CUDA与INTEL编译器版本问题\"></a>CUDA与INTEL编译器版本问题</h3><p><code>run_cmake</code>会检查编译器的版本和CUDA版本, 如果版本不适配则会配置不通过. 但是当你使用intel编译器时, 它依旧是按照gnu的编译器版本在比较, 因此intel几乎无法编译cuda版本. 为了解决这个问题我们可以修改<code>/path/to/amber22_src/cmake/CudaConfig.cmake</code>文件的112行</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">111</span>             CMAKE_CXX_COMPILER_VERSION <span class=\"keyword\">VERSION_GREATER_EQUAL</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">112</span>             <span class=\"keyword\">AND</span> CUDA_VERSION <span class=\"keyword\">VERSION_GREATER</span> <span class=\"number\">11.6</span></span><br></pre></td></tr></table></figure>\n\n<p>将cuda的上限版本(11.6)调低即可, 我一般调至11.0.</p>"},{"title":"数学分析学习","date":"2022-12-07T13:58:26.000Z","_content":"<!-- # 数学分析学习 -->\n最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。  \n想到这里，顿时豁然开朗，原来我应该从头开始学数学。  \n\n当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  \n\n为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本[《数学分析讲义》](https://www.overleaf.com/read/pddprfvnrrkv)。希望能在学习和写讲义的过程中有所收获。  \n\n<!--more-->\n并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n而另一个则是Maki's lab的Ayumu的教程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>\n","source":"_posts/数学分析学习.md","raw":"---\ntitle: 数学分析学习\ndate: 2022-12-07 22:58:26\ncategories:\n    - 数学\ntags:\n    - 数学分析\n---\n<!-- # 数学分析学习 -->\n最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。  \n想到这里，顿时豁然开朗，原来我应该从头开始学数学。  \n\n当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  \n\n为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本[《数学分析讲义》](https://www.overleaf.com/read/pddprfvnrrkv)。希望能在学习和写讲义的过程中有所收获。  \n\n<!--more-->\n并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n而另一个则是Maki's lab的Ayumu的教程：  \n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>\n","slug":"数学分析学习","published":1,"updated":"2022-12-15T04:32:36.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4q1001el8vq30o06kg6","content":"<!-- # 数学分析学习 -->\n<p>最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。<br>想到这里，顿时豁然开朗，原来我应该从头开始学数学。  </p>\n<p>当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  </p>\n<p>为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本<a href=\"https://www.overleaf.com/read/pddprfvnrrkv\">《数学分析讲义》</a>。希望能在学习和写讲义的过程中有所收获。  </p>\n<span id=\"more\"></span>\n<p>并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n<p>而另一个则是Maki’s lab的Ayumu的教程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>\n","excerpt":"<!-- # 数学分析学习 -->\n<p>最近发现自己的数学，在我学习随机过程的时候，我发现我并不会概率论，当我学习概率论的时候，我发现我并不会测度论，而当我学习测度论的时候，我终于发现，原来我不会数学。<br>想到这里，顿时豁然开朗，原来我应该从头开始学数学。  </p>\n<p>当然实际上，在我学习测度论的时候，我就发现其实我缺失的是一些最基本的数学上的概念，比如上确界和下确界，这些知识的缺失使我学习测度论的过程异常艰难。  </p>\n<p>为了补全这些知识，我决定从数学分析开始学起来。为了记住学习的知识点，我决定用费曼学习法，即写一本<a href=\"https://www.overleaf.com/read/pddprfvnrrkv\">《数学分析讲义》</a>。希望能在学习和写讲义的过程中有所收获。  </p>","more":"<p>并且我在这里提供两个B站上好的教程，一个是复旦大学的陈纪修教授的课程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=250927429&bvid=BV15v411g7VP&cid=420572250&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>   \n\n<p>而另一个则是Maki’s lab的Ayumu的教程：  </p>\n<iframe src=\"//player.bilibili.com/player.html?aid=859119009&bvid=BV1BV4y1V71p&cid=861721399&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"400px\" > </iframe>"},{"title":"解决U盘刻盘空间变小问题","date":"2023-02-06T11:54:38.000Z","_content":"U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：\n```bash\nsudo parted /dev/sdc # 使用parted来调整磁盘/dev/sdc\nprint # 打印查看当前的\nresizepart 2 -1 # 将第二个分区充满剩下的空间\nquit # 退出\nsudo resize2fs /dev/sdc2 # 使用resize2fs来调整sdc2分区大小\n```\n亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。","source":"_posts/解决U盘刻盘空间变小问题.md","raw":"---\ntitle: 解决U盘刻盘空间变小问题\ndate: 2023-02-06 20:54:38\ntags:\n    - linux\ncategories:\n    - 计算机\n---\nU盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：\n```bash\nsudo parted /dev/sdc # 使用parted来调整磁盘/dev/sdc\nprint # 打印查看当前的\nresizepart 2 -1 # 将第二个分区充满剩下的空间\nquit # 退出\nsudo resize2fs /dev/sdc2 # 使用resize2fs来调整sdc2分区大小\n```\n亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。","slug":"解决U盘刻盘空间变小问题","published":1,"updated":"2023-02-06T15:51:20.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4q3001il8vq3t184zcc","content":"<p>U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> parted /dev/sdc <span class=\"comment\"># 使用parted来调整磁盘/dev/sdc</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"comment\"># 打印查看当前的</span></span><br><span class=\"line\">resizepart 2 -1 <span class=\"comment\"># 将第二个分区充满剩下的空间</span></span><br><span class=\"line\">quit <span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> resize2fs /dev/sdc2 <span class=\"comment\"># 使用resize2fs来调整sdc2分区大小</span></span><br></pre></td></tr></table></figure>\n<p>亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。</p>\n","excerpt":"","more":"<p>U盘刻盘ISO后空间会变得和ISO问题大小一样，最初是在折腾树莓派的时候发现这个问题。最近在刻opensuse15.4的盘的时候也发生了这个问题，因此在这里记录下解决这个问题的代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> parted /dev/sdc <span class=\"comment\"># 使用parted来调整磁盘/dev/sdc</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"comment\"># 打印查看当前的</span></span><br><span class=\"line\">resizepart 2 -1 <span class=\"comment\"># 将第二个分区充满剩下的空间</span></span><br><span class=\"line\">quit <span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> resize2fs /dev/sdc2 <span class=\"comment\"># 使用resize2fs来调整sdc2分区大小</span></span><br></pre></td></tr></table></figure>\n<p>亲测在树莓派的SD卡以及U盘上都可用。但是对于U盘也只是lsblk可以识别出大小而已，df命令依旧识别ISO的大小，不知道怎么修正，猜测是最后一步出错了。</p>\n"},{"title":"计算机程序的构造与解释","date":"2022-12-10T14:37:21.000Z","_content":"我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。","source":"_posts/计算机程序的构造与解释.md","raw":"---\ntitle: 计算机程序的构造与解释\ndate: 2022-12-10 23:37:21\ncategories:\n    - 计算机\ntags:\n    - 计算机程序的构造与解释\n    - python\n---\n我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。","slug":"计算机程序的构造与解释","published":1,"updated":"2022-12-10T15:40:32.000Z","comments":1,"layout":"post","photos":[],"_id":"cmc3my4q4001ll8vqeiyc4nuj","content":"<p>我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。</p>\n","excerpt":"","more":"<p>我想做计算机程序的构造与解释(SICP)的教程，先在这里占个坑。</p>\n"}],"PostAsset":[{"_id":"source/_posts/制作小分子力场/LigParGen.png","post":"cmc3my4px0013l8vq954rengy","slug":"LigParGen.png","modified":1,"renderable":0},{"_id":"source/_posts/制作小分子力场/openbabel.png","post":"cmc3my4px0013l8vq954rengy","slug":"openbabel.png","modified":1,"renderable":0},{"_id":"source/_posts/制作小分子力场/tppmktop.png","post":"cmc3my4px0013l8vq954rengy","slug":"tppmktop.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cmc3my4p80001l8vq6uc86zi0","category_id":"cmc3my4pe0004l8vq1i4z2ng8","_id":"cmc3my4pq000kl8vq9whp06qs"},{"post_id":"cmc3my4pl000bl8vq6e06d38r","category_id":"cmc3my4pe0004l8vq1i4z2ng8","_id":"cmc3my4pr000ol8vqbtzvbnld"},{"post_id":"cmc3my4pn000gl8vq1kla1uyp","category_id":"cmc3my4pe0004l8vq1i4z2ng8","_id":"cmc3my4pt000rl8vqh04g39k7"},{"post_id":"cmc3my4pc0003l8vq379j68pf","category_id":"cmc3my4pe0004l8vq1i4z2ng8","_id":"cmc3my4pv000vl8vqezei5v5r"},{"post_id":"cmc3my4pq000nl8vqglm3ewy1","category_id":"cmc3my4pe0004l8vq1i4z2ng8","_id":"cmc3my4pw000xl8vq6y1m1ll0"},{"post_id":"cmc3my4ph0007l8vq5gbv7x0g","category_id":"cmc3my4pe0004l8vq1i4z2ng8","_id":"cmc3my4px0011l8vq1xqg9af9"},{"post_id":"cmc3my4pj0009l8vqfwdahlv7","category_id":"cmc3my4ps000ql8vq8xehh1al","_id":"cmc3my4py0014l8vqb6hhco2l"},{"post_id":"cmc3my4pp000il8vq9vc7didj","category_id":"cmc3my4pw000yl8vqd58f82qa","_id":"cmc3my4q0001al8vq8z1r0wn1"},{"post_id":"cmc3my4ps000pl8vq3xch3lxa","category_id":"cmc3my4pw000yl8vqd58f82qa","_id":"cmc3my4q2001fl8vqhhgk97xt"},{"post_id":"cmc3my4q1001cl8vqc4rvdedb","category_id":"cmc3my4q00019l8vq9cqz5vdw","_id":"cmc3my4q4001ml8vqee84gqgz"},{"post_id":"cmc3my4pv000wl8vqa78d3u1q","category_id":"cmc3my4q00019l8vq9cqz5vdw","_id":"cmc3my4q5001ol8vq0iivb8t7"},{"post_id":"cmc3my4q3001il8vq3t184zcc","category_id":"cmc3my4pw000yl8vqd58f82qa","_id":"cmc3my4q6001rl8vq5gkias87"},{"post_id":"cmc3my4q4001ll8vqeiyc4nuj","category_id":"cmc3my4pw000yl8vqd58f82qa","_id":"cmc3my4q6001sl8vqc1mohcq5"},{"post_id":"cmc3my4px0010l8vq7nay4fdc","category_id":"cmc3my4q2001hl8vqet67hm1z","_id":"cmc3my4q7001vl8vqadlu8ul5"},{"post_id":"cmc3my4px0013l8vq954rengy","category_id":"cmc3my4q00019l8vq9cqz5vdw","_id":"cmc3my4q7001xl8vqc3zlc113"},{"post_id":"cmc3my4q1001el8vq30o06kg6","category_id":"cmc3my4q6001tl8vq0mr757vn","_id":"cmc3my4q80021l8vqb0jqb4jr"}],"PostTag":[{"post_id":"cmc3my4p80001l8vq6uc86zi0","tag_id":"cmc3my4pg0005l8vqdhffg95c","_id":"cmc3my4pn000el8vqhq8wdryw"},{"post_id":"cmc3my4pl000bl8vq6e06d38r","tag_id":"cmc3my4pg0005l8vqdhffg95c","_id":"cmc3my4pp000hl8vqhh9n4bdj"},{"post_id":"cmc3my4pc0003l8vq379j68pf","tag_id":"cmc3my4pg0005l8vqdhffg95c","_id":"cmc3my4pq000ml8vq7drahr3y"},{"post_id":"cmc3my4ph0007l8vq5gbv7x0g","tag_id":"cmc3my4pg0005l8vqdhffg95c","_id":"cmc3my4pt000tl8vqexr54put"},{"post_id":"cmc3my4pj0009l8vqfwdahlv7","tag_id":"cmc3my4pt000sl8vqem1jd4vr","_id":"cmc3my4px0012l8vqe52x8h40"},{"post_id":"cmc3my4pn000gl8vq1kla1uyp","tag_id":"cmc3my4pw000zl8vq1vh5aydz","_id":"cmc3my4q1001dl8vq1sta15me"},{"post_id":"cmc3my4pn000gl8vq1kla1uyp","tag_id":"cmc3my4py0016l8vqdjzwgozv","_id":"cmc3my4q2001gl8vq4h3w1prb"},{"post_id":"cmc3my4pp000il8vq9vc7didj","tag_id":"cmc3my4q0001bl8vqc2f1ch7e","_id":"cmc3my4q4001kl8vq0w7e3zsm"},{"post_id":"cmc3my4q3001il8vq3t184zcc","tag_id":"cmc3my4q0001bl8vqc2f1ch7e","_id":"cmc3my4q5001nl8vq433efxth"},{"post_id":"cmc3my4pq000nl8vqglm3ewy1","tag_id":"cmc3my4pw000zl8vq1vh5aydz","_id":"cmc3my4q7001wl8vqdjenfwhe"},{"post_id":"cmc3my4pq000nl8vqglm3ewy1","tag_id":"cmc3my4q5001ql8vq75v1e19o","_id":"cmc3my4q7001yl8vqcbqn3l38"},{"post_id":"cmc3my4ps000pl8vq3xch3lxa","tag_id":"cmc3my4q0001bl8vqc2f1ch7e","_id":"cmc3my4q80020l8vqa6dx3sv9"},{"post_id":"cmc3my4pu000ul8vq9uls868e","tag_id":"cmc3my4q7001zl8vqbgvv3z53","_id":"cmc3my4q80023l8vqhr193wqv"},{"post_id":"cmc3my4pv000wl8vqa78d3u1q","tag_id":"cmc3my4q80022l8vqhvi09ukv","_id":"cmc3my4q80025l8vqc19j22s1"},{"post_id":"cmc3my4px0010l8vq7nay4fdc","tag_id":"cmc3my4q80024l8vqe0fzbj74","_id":"cmc3my4q90027l8vq6c4eb54j"},{"post_id":"cmc3my4px0013l8vq954rengy","tag_id":"cmc3my4q80026l8vqd6sh8ks5","_id":"cmc3my4q90029l8vqcgkk0fgf"},{"post_id":"cmc3my4pz0017l8vq8hcoe1l1","tag_id":"cmc3my4q7001zl8vqbgvv3z53","_id":"cmc3my4q9002bl8vqh6zw6c22"},{"post_id":"cmc3my4pz0018l8vqg4ozejjf","tag_id":"cmc3my4q9002al8vqd01h8nk1","_id":"cmc3my4q9002dl8vqa6dk0av8"},{"post_id":"cmc3my4q1001cl8vqc4rvdedb","tag_id":"cmc3my4q9002cl8vq6463c43m","_id":"cmc3my4qa002fl8vqgd25fjf8"},{"post_id":"cmc3my4q1001el8vq30o06kg6","tag_id":"cmc3my4qa002el8vq6v4n24gz","_id":"cmc3my4qa002hl8vq1q4l0fug"},{"post_id":"cmc3my4q4001ll8vqeiyc4nuj","tag_id":"cmc3my4qa002gl8vq8pup0bt2","_id":"cmc3my4qb002jl8vqh2ka3rsi"},{"post_id":"cmc3my4q4001ll8vqeiyc4nuj","tag_id":"cmc3my4qa002il8vqagyg4exw","_id":"cmc3my4qb002kl8vqcdbf9i89"}],"Tag":[{"name":"MD","_id":"cmc3my4pg0005l8vqdhffg95c"},{"name":"bash","_id":"cmc3my4pt000sl8vqem1jd4vr"},{"name":"C","_id":"cmc3my4pw000zl8vq1vh5aydz"},{"name":"Fortran","_id":"cmc3my4py0016l8vqdjzwgozv"},{"name":"linux","_id":"cmc3my4q0001bl8vqc2f1ch7e"},{"name":"C++","_id":"cmc3my4q5001ql8vq75v1e19o"},{"name":"ssh","_id":"cmc3my4q7001zl8vqbgvv3z53"},{"name":"pdb预处理","_id":"cmc3my4q80022l8vqhvi09ukv"},{"name":"latex","_id":"cmc3my4q80024l8vqe0fzbj74"},{"name":"力场构建","_id":"cmc3my4q80026l8vqd6sh8ks5"},{"name":"git","_id":"cmc3my4q9002al8vqd01h8nk1"},{"name":"软件安装","_id":"cmc3my4q9002cl8vq6463c43m"},{"name":"数学分析","_id":"cmc3my4qa002el8vq6v4n24gz"},{"name":"计算机程序的构造与解释","_id":"cmc3my4qa002gl8vq8pup0bt2"},{"name":"python","_id":"cmc3my4qa002il8vqagyg4exw"}]}}